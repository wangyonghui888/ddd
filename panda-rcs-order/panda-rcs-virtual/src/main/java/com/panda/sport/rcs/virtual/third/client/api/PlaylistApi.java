/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.Assets;
import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import com.panda.sport.rcs.virtual.third.client.model.Playlist;
import com.panda.sport.rcs.virtual.third.client.model.PlaylistInfo;
import com.panda.sport.rcs.virtual.third.client.model.SchedulerConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaylistApi {
    private ApiClient apiClient;

    public PlaylistApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for playlistCreate
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param shortName The unique short name of the playlist. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param gametype Define the game type of the playlist that it will be created. We can use at this moment the following gametype codes: | Gametype  | Description   | | ---       | ---           | | Ch        | Champions     | | Dog       | Dog           | | Horse     | Horse         | | Kart      | Kart          | | Motorbike | Motorbike     | | S7        | Super 7       | | Speedway  | Speedway      | | Lottofive | Lottofive     | | Trotting  | Trotting      | | Sx        | Perfect Six   | | Lk        | Live Keno     | | Kn        | Keno          | | Fight     | Fighting      | | Dirttrack | Dirt Track    | | Ll        | Live Lotto    | | Basket    | Basket 3x3    |  (required)
     * @param playlistInfo  (required)
     * @param parentId Parent Playlist Id in the Playlist Hierarchy System. This value will be NULL in case that the playlist is a GameType Main Playlist.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistCreateCall(Integer playlistId, String shortName, String description, String gametype, PlaylistInfo playlistInfo, Integer parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = playlistInfo;

        // create path and map variables
        String localVarPath = "/playlists/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (shortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shortName", shortName));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (gametype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gametype", gametype));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistCreateValidateBeforeCall(Integer playlistId, String shortName, String description, String gametype, PlaylistInfo playlistInfo, Integer parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling playlistCreate(Async)");
        }
        
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling playlistCreate(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling playlistCreate(Async)");
        }
        
        // verify the required parameter 'gametype' is set
        if (gametype == null) {
            throw new ApiException("Missing the required parameter 'gametype' when calling playlistCreate(Async)");
        }
        
        // verify the required parameter 'playlistInfo' is set
        if (playlistInfo == null) {
            throw new ApiException("Missing the required parameter 'playlistInfo' when calling playlistCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = playlistCreateCall(playlistId, shortName, description, gametype, playlistInfo, parentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param shortName The unique short name of the playlist. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param gametype Define the game type of the playlist that it will be created. We can use at this moment the following gametype codes: | Gametype  | Description   | | ---       | ---           | | Ch        | Champions     | | Dog       | Dog           | | Horse     | Horse         | | Kart      | Kart          | | Motorbike | Motorbike     | | S7        | Super 7       | | Speedway  | Speedway      | | Lottofive | Lottofive     | | Trotting  | Trotting      | | Sx        | Perfect Six   | | Lk        | Live Keno     | | Kn        | Keno          | | Fight     | Fighting      | | Dirttrack | Dirt Track    | | Ll        | Live Lotto    | | Basket    | Basket 3x3    |  (required)
     * @param playlistInfo  (required)
     * @param parentId Parent Playlist Id in the Playlist Hierarchy System. This value will be NULL in case that the playlist is a GameType Main Playlist.  (optional)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Playlist playlistCreate(Integer playlistId, String shortName, String description, String gametype, PlaylistInfo playlistInfo, Integer parentId) throws ApiException {
        ApiResponse<Playlist> resp = playlistCreateWithHttpInfo(playlistId, shortName, description, gametype, playlistInfo, parentId);
        return resp.getData();
    }

    /**
     * 
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param shortName The unique short name of the playlist. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param gametype Define the game type of the playlist that it will be created. We can use at this moment the following gametype codes: | Gametype  | Description   | | ---       | ---           | | Ch        | Champions     | | Dog       | Dog           | | Horse     | Horse         | | Kart      | Kart          | | Motorbike | Motorbike     | | S7        | Super 7       | | Speedway  | Speedway      | | Lottofive | Lottofive     | | Trotting  | Trotting      | | Sx        | Perfect Six   | | Lk        | Live Keno     | | Kn        | Keno          | | Fight     | Fighting      | | Dirttrack | Dirt Track    | | Ll        | Live Lotto    | | Basket    | Basket 3x3    |  (required)
     * @param playlistInfo  (required)
     * @param parentId Parent Playlist Id in the Playlist Hierarchy System. This value will be NULL in case that the playlist is a GameType Main Playlist.  (optional)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Playlist> playlistCreateWithHttpInfo(Integer playlistId, String shortName, String description, String gametype, PlaylistInfo playlistInfo, Integer parentId) throws ApiException {
        com.squareup.okhttp.Call call = playlistCreateValidateBeforeCall(playlistId, shortName, description, gametype, playlistInfo, parentId, null, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param shortName The unique short name of the playlist. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param gametype Define the game type of the playlist that it will be created. We can use at this moment the following gametype codes: | Gametype  | Description   | | ---       | ---           | | Ch        | Champions     | | Dog       | Dog           | | Horse     | Horse         | | Kart      | Kart          | | Motorbike | Motorbike     | | S7        | Super 7       | | Speedway  | Speedway      | | Lottofive | Lottofive     | | Trotting  | Trotting      | | Sx        | Perfect Six   | | Lk        | Live Keno     | | Kn        | Keno          | | Fight     | Fighting      | | Dirttrack | Dirt Track    | | Ll        | Live Lotto    | | Basket    | Basket 3x3    |  (required)
     * @param playlistInfo  (required)
     * @param parentId Parent Playlist Id in the Playlist Hierarchy System. This value will be NULL in case that the playlist is a GameType Main Playlist.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistCreateAsync(Integer playlistId, String shortName, String description, String gametype, PlaylistInfo playlistInfo, Integer parentId, final ApiCallback<Playlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistCreateValidateBeforeCall(playlistId, shortName, description, gametype, playlistInfo, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistFindAll
     * @param gameType The Gametype code of the playlist.  (optional)
     * @param mode The mode define if the playlist is Disabled, Scheduled, On-Demand, Live.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistFindAllCall(String gameType, String mode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/findAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (gameType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gameType", gameType));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistFindAllValidateBeforeCall(String gameType, String mode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = playlistFindAllCall(gameType, mode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find all playlist related with a certain gametype code and a playlist-mode 
     * @param gameType The Gametype code of the playlist.  (optional)
     * @param mode The mode define if the playlist is Disabled, Scheduled, On-Demand, Live.  (optional)
     * @return List&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Playlist> playlistFindAll(String gameType, String mode) throws ApiException {
        ApiResponse<List<Playlist>> resp = playlistFindAllWithHttpInfo(gameType, mode);
        return resp.getData();
    }

    /**
     * 
     * Find all playlist related with a certain gametype code and a playlist-mode 
     * @param gameType The Gametype code of the playlist.  (optional)
     * @param mode The mode define if the playlist is Disabled, Scheduled, On-Demand, Live.  (optional)
     * @return ApiResponse&lt;List&lt;Playlist&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Playlist>> playlistFindAllWithHttpInfo(String gameType, String mode) throws ApiException {
        com.squareup.okhttp.Call call = playlistFindAllValidateBeforeCall(gameType, mode, null, null);
        Type localVarReturnType = new TypeToken<List<Playlist>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find all playlist related with a certain gametype code and a playlist-mode 
     * @param gameType The Gametype code of the playlist.  (optional)
     * @param mode The mode define if the playlist is Disabled, Scheduled, On-Demand, Live.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistFindAllAsync(String gameType, String mode, final ApiCallback<List<Playlist>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistFindAllValidateBeforeCall(gameType, mode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Playlist>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistFindByIds
     * @param playlistIds List of playlist identifiers  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistFindByIdsCall(List<String> playlistIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/findByIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playlistIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "playlistIds", playlistIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistFindByIdsValidateBeforeCall(List<String> playlistIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playlistIds' is set
        if (playlistIds == null) {
            throw new ApiException("Missing the required parameter 'playlistIds' when calling playlistFindByIds(Async)");
        }
        

        com.squareup.okhttp.Call call = playlistFindByIdsCall(playlistIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find playlists by identifier 
     * @param playlistIds List of playlist identifiers  (required)
     * @return List&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Playlist> playlistFindByIds(List<String> playlistIds) throws ApiException {
        ApiResponse<List<Playlist>> resp = playlistFindByIdsWithHttpInfo(playlistIds);
        return resp.getData();
    }

    /**
     * 
     * Find playlists by identifier 
     * @param playlistIds List of playlist identifiers  (required)
     * @return ApiResponse&lt;List&lt;Playlist&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Playlist>> playlistFindByIdsWithHttpInfo(List<String> playlistIds) throws ApiException {
        com.squareup.okhttp.Call call = playlistFindByIdsValidateBeforeCall(playlistIds, null, null);
        Type localVarReturnType = new TypeToken<List<Playlist>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find playlists by identifier 
     * @param playlistIds List of playlist identifiers  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistFindByIdsAsync(List<String> playlistIds, final ApiCallback<List<Playlist>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistFindByIdsValidateBeforeCall(playlistIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Playlist>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistSet
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param mode Playlist mode (optional, default to DISABLED)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistSetCall(Integer playlistId, String description, String mode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistSetValidateBeforeCall(Integer playlistId, String description, String mode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling playlistSet(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling playlistSet(Async)");
        }
        

        com.squareup.okhttp.Call call = playlistSetCall(playlistId, description, mode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set playlist properties 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param mode Playlist mode (optional, default to DISABLED)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Playlist playlistSet(Integer playlistId, String description, String mode) throws ApiException {
        ApiResponse<Playlist> resp = playlistSetWithHttpInfo(playlistId, description, mode);
        return resp.getData();
    }

    /**
     * 
     * Set playlist properties 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param mode Playlist mode (optional, default to DISABLED)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Playlist> playlistSetWithHttpInfo(Integer playlistId, String description, String mode) throws ApiException {
        com.squareup.okhttp.Call call = playlistSetValidateBeforeCall(playlistId, description, mode, null, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set playlist properties 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param description A english human readable Name of the playlist. Used as default name on UI, if no custom translation is available for shortName playlist tag. (required)
     * @param mode Playlist mode (optional, default to DISABLED)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistSetAsync(Integer playlistId, String description, String mode, final ApiCallback<Playlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistSetValidateBeforeCall(playlistId, description, mode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistSetAssets
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param assets  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistSetAssetsCall(Integer playlistId, Assets assets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = assets;

        // create path and map variables
        String localVarPath = "/playlists/setAssets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistSetAssetsValidateBeforeCall(Integer playlistId, Assets assets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling playlistSetAssets(Async)");
        }
        
        // verify the required parameter 'assets' is set
        if (assets == null) {
            throw new ApiException("Missing the required parameter 'assets' when calling playlistSetAssets(Async)");
        }
        

        com.squareup.okhttp.Call call = playlistSetAssetsCall(playlistId, assets, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param assets  (required)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Playlist playlistSetAssets(Integer playlistId, Assets assets) throws ApiException {
        ApiResponse<Playlist> resp = playlistSetAssetsWithHttpInfo(playlistId, assets);
        return resp.getData();
    }

    /**
     * 
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param assets  (required)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Playlist> playlistSetAssetsWithHttpInfo(Integer playlistId, Assets assets) throws ApiException {
        com.squareup.okhttp.Call call = playlistSetAssetsValidateBeforeCall(playlistId, assets, null, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param assets  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistSetAssetsAsync(Integer playlistId, Assets assets, final ApiCallback<Playlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistSetAssetsValidateBeforeCall(playlistId, assets, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playlistSetSchedulerConfiguration
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param schedulerConfigurations  (required)
     * @param allowedCountdown Array of allowed countdown  (optional)
     * @param allowedOffset Array of allowed offset  (optional)
     * @param scheduledWindow Number of minutes to ensure future scheduled events (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playlistSetSchedulerConfigurationCall(Integer playlistId, List<SchedulerConfiguration> schedulerConfigurations, List<Integer> allowedCountdown, List<Integer> allowedOffset, Integer scheduledWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedulerConfigurations;

        // create path and map variables
        String localVarPath = "/playlists/setSchedulerConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (allowedCountdown != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "allowedCountdown", allowedCountdown));
        if (allowedOffset != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "allowedOffset", allowedOffset));
        if (scheduledWindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduledWindow", scheduledWindow));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playlistSetSchedulerConfigurationValidateBeforeCall(Integer playlistId, List<SchedulerConfiguration> schedulerConfigurations, List<Integer> allowedCountdown, List<Integer> allowedOffset, Integer scheduledWindow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling playlistSetSchedulerConfiguration(Async)");
        }
        
        // verify the required parameter 'schedulerConfigurations' is set
        if (schedulerConfigurations == null) {
            throw new ApiException("Missing the required parameter 'schedulerConfigurations' when calling playlistSetSchedulerConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = playlistSetSchedulerConfigurationCall(playlistId, schedulerConfigurations, allowedCountdown, allowedOffset, scheduledWindow, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param schedulerConfigurations  (required)
     * @param allowedCountdown Array of allowed countdown  (optional)
     * @param allowedOffset Array of allowed offset  (optional)
     * @param scheduledWindow Number of minutes to ensure future scheduled events (optional)
     * @return Playlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Playlist playlistSetSchedulerConfiguration(Integer playlistId, List<SchedulerConfiguration> schedulerConfigurations, List<Integer> allowedCountdown, List<Integer> allowedOffset, Integer scheduledWindow) throws ApiException {
        ApiResponse<Playlist> resp = playlistSetSchedulerConfigurationWithHttpInfo(playlistId, schedulerConfigurations, allowedCountdown, allowedOffset, scheduledWindow);
        return resp.getData();
    }

    /**
     * 
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param schedulerConfigurations  (required)
     * @param allowedCountdown Array of allowed countdown  (optional)
     * @param allowedOffset Array of allowed offset  (optional)
     * @param scheduledWindow Number of minutes to ensure future scheduled events (optional)
     * @return ApiResponse&lt;Playlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Playlist> playlistSetSchedulerConfigurationWithHttpInfo(Integer playlistId, List<SchedulerConfiguration> schedulerConfigurations, List<Integer> allowedCountdown, List<Integer> allowedOffset, Integer scheduledWindow) throws ApiException {
        com.squareup.okhttp.Call call = playlistSetSchedulerConfigurationValidateBeforeCall(playlistId, schedulerConfigurations, allowedCountdown, allowedOffset, scheduledWindow, null, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new playlist 
     * @param playlistId The identifier of the playlist to edit. (required)
     * @param schedulerConfigurations  (required)
     * @param allowedCountdown Array of allowed countdown  (optional)
     * @param allowedOffset Array of allowed offset  (optional)
     * @param scheduledWindow Number of minutes to ensure future scheduled events (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playlistSetSchedulerConfigurationAsync(Integer playlistId, List<SchedulerConfiguration> schedulerConfigurations, List<Integer> allowedCountdown, List<Integer> allowedOffset, Integer scheduledWindow, final ApiCallback<Playlist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playlistSetSchedulerConfigurationValidateBeforeCall(playlistId, schedulerConfigurations, allowedCountdown, allowedOffset, scheduledWindow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
