/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Paytable details for Super 7 game 
 */
@ApiModel(description = "Paytable details for Super 7 game ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class S7PayTable {
  @SerializedName("allIn1")
  private Double allIn1 = null;

  @SerializedName("allIn2")
  private Double allIn2 = null;

  @SerializedName("allIn3")
  private Double allIn3 = null;

  @SerializedName("allIn4")
  private Double allIn4 = null;

  @SerializedName("allIn5")
  private Double allIn5 = null;

  @SerializedName("allIn6")
  private Double allIn6 = null;

  @SerializedName("allIn7")
  private Double allIn7 = null;

  @SerializedName("oneOutOf7")
  private Double oneOutOf7 = null;

  @SerializedName("twoOutOf7")
  private Double twoOutOf7 = null;

  @SerializedName("threeOutOf7")
  private Double threeOutOf7 = null;

  @SerializedName("fourOutOf7")
  private Double fourOutOf7 = null;

  @SerializedName("fiveOutOf7")
  private Double fiveOutOf7 = null;

  @SerializedName("sixOutOf7")
  private Double sixOutOf7 = null;

  @SerializedName("sevenOutOf7")
  private Double sevenOutOf7 = null;

  @SerializedName("noDraw1")
  private Double noDraw1 = null;

  @SerializedName("noDraw2")
  private Double noDraw2 = null;

  @SerializedName("noDraw3")
  private Double noDraw3 = null;

  @SerializedName("noDraw4")
  private Double noDraw4 = null;

  @SerializedName("noDraw5")
  private Double noDraw5 = null;

  @SerializedName("noDraw6")
  private Double noDraw6 = null;

  @SerializedName("noDraw7")
  private Double noDraw7 = null;

  @SerializedName("firstBallWhite")
  private Double firstBallWhite = null;

  @SerializedName("firstBallRed")
  private Double firstBallRed = null;

  @SerializedName("lastBallWhite")
  private Double lastBallWhite = null;

  @SerializedName("lastBallRed")
  private Double lastBallRed = null;

  @SerializedName("firstAndSecondSameColor")
  private Double firstAndSecondSameColor = null;

  @SerializedName("firstAndSecondDifferentColor")
  private Double firstAndSecondDifferentColor = null;

  @SerializedName("sevenWhiteBalls")
  private Double sevenWhiteBalls = null;

  @SerializedName("sixWhiteBalls")
  private Double sixWhiteBalls = null;

  @SerializedName("fiveWhiteBalls")
  private Double fiveWhiteBalls = null;

  @SerializedName("fourWhiteBalls")
  private Double fourWhiteBalls = null;

  @SerializedName("threeWhiteBalls")
  private Double threeWhiteBalls = null;

  @SerializedName("twoWhiteBalls")
  private Double twoWhiteBalls = null;

  @SerializedName("oneWhiteBalls")
  private Double oneWhiteBalls = null;

  @SerializedName("sevenRedBalls")
  private Double sevenRedBalls = null;

  @SerializedName("sixRedBalls")
  private Double sixRedBalls = null;

  @SerializedName("fiveRedBalls")
  private Double fiveRedBalls = null;

  @SerializedName("fourRedBalls")
  private Double fourRedBalls = null;

  @SerializedName("threeRedBalls")
  private Double threeRedBalls = null;

  @SerializedName("twoRedBalls")
  private Double twoRedBalls = null;

  @SerializedName("oneRedBalls")
  private Double oneRedBalls = null;

  @SerializedName("sumUnder100")
  private Double sumUnder100 = null;

  @SerializedName("sumUnder125")
  private Double sumUnder125 = null;

  @SerializedName("sumOver125")
  private Double sumOver125 = null;

  @SerializedName("sumUnder150")
  private Double sumUnder150 = null;

  @SerializedName("sumOver150")
  private Double sumOver150 = null;

  @SerializedName("sumUnder175")
  private Double sumUnder175 = null;

  @SerializedName("sumOver175")
  private Double sumOver175 = null;

  @SerializedName("sumOver200")
  private Double sumOver200 = null;

  @SerializedName("sumWhiteUnder73")
  private Double sumWhiteUnder73 = null;

  @SerializedName("sumWhiteOver73")
  private Double sumWhiteOver73 = null;

  @SerializedName("sumRedUnder73")
  private Double sumRedUnder73 = null;

  @SerializedName("sumRedOver73")
  private Double sumRedOver73 = null;

  @SerializedName("countWhiteUnder3")
  private Double countWhiteUnder3 = null;

  @SerializedName("countWhiteOver3")
  private Double countWhiteOver3 = null;

  @SerializedName("countWhiteUnder2")
  private Double countWhiteUnder2 = null;

  @SerializedName("countWhiteOver2")
  private Double countWhiteOver2 = null;

  @SerializedName("countWhiteUnder1")
  private Double countWhiteUnder1 = null;

  @SerializedName("countWhiteOver1")
  private Double countWhiteOver1 = null;

  @SerializedName("countRedUnder3")
  private Double countRedUnder3 = null;

  @SerializedName("countRedOver3")
  private Double countRedOver3 = null;

  @SerializedName("countRedUnder2")
  private Double countRedUnder2 = null;

  @SerializedName("countRedOver2")
  private Double countRedOver2 = null;

  @SerializedName("countRedUnder1")
  private Double countRedUnder1 = null;

  @SerializedName("countRedOver1")
  private Double countRedOver1 = null;

  @SerializedName("moreOdd")
  private Double moreOdd = null;

  @SerializedName("moreEven")
  private Double moreEven = null;

  @SerializedName("sumOdd")
  private Double sumOdd = null;

  @SerializedName("sumEven")
  private Double sumEven = null;

  @SerializedName("firstBallOdd")
  private Double firstBallOdd = null;

  @SerializedName("firstBallEven")
  private Double firstBallEven = null;

  @SerializedName("lastBallOdd")
  private Double lastBallOdd = null;

  @SerializedName("lastBallEven")
  private Double lastBallEven = null;

  @SerializedName("firstTwoBallsOdd")
  private Double firstTwoBallsOdd = null;

  @SerializedName("firstTwoBallsEven")
  private Double firstTwoBallsEven = null;

  @SerializedName("firstOddAndSecondEven")
  private Double firstOddAndSecondEven = null;

  @SerializedName("firstEvenAndSecondOdd")
  private Double firstEvenAndSecondOdd = null;

  @SerializedName("firstOddAndLastEven")
  private Double firstOddAndLastEven = null;

  @SerializedName("firstEvenAndLastOdd")
  private Double firstEvenAndLastOdd = null;

  public S7PayTable allIn1(Double allIn1) {
    this.allIn1 = allIn1;
    return this;
  }

   /**
   * The odd value for All In 1
   * minimum: 1
   * @return allIn1
  **/
  @ApiModelProperty(value = "The odd value for All In 1")
  public Double getAllIn1() {
    return allIn1;
  }

  public void setAllIn1(Double allIn1) {
    this.allIn1 = allIn1;
  }

  public S7PayTable allIn2(Double allIn2) {
    this.allIn2 = allIn2;
    return this;
  }

   /**
   * The odd value for All In 2
   * minimum: 1
   * @return allIn2
  **/
  @ApiModelProperty(value = "The odd value for All In 2")
  public Double getAllIn2() {
    return allIn2;
  }

  public void setAllIn2(Double allIn2) {
    this.allIn2 = allIn2;
  }

  public S7PayTable allIn3(Double allIn3) {
    this.allIn3 = allIn3;
    return this;
  }

   /**
   * The odd value for All In 3
   * minimum: 1
   * @return allIn3
  **/
  @ApiModelProperty(value = "The odd value for All In 3")
  public Double getAllIn3() {
    return allIn3;
  }

  public void setAllIn3(Double allIn3) {
    this.allIn3 = allIn3;
  }

  public S7PayTable allIn4(Double allIn4) {
    this.allIn4 = allIn4;
    return this;
  }

   /**
   * The odd value for All In 4
   * minimum: 1
   * @return allIn4
  **/
  @ApiModelProperty(value = "The odd value for All In 4")
  public Double getAllIn4() {
    return allIn4;
  }

  public void setAllIn4(Double allIn4) {
    this.allIn4 = allIn4;
  }

  public S7PayTable allIn5(Double allIn5) {
    this.allIn5 = allIn5;
    return this;
  }

   /**
   * The odd value for All In 5
   * minimum: 1
   * @return allIn5
  **/
  @ApiModelProperty(value = "The odd value for All In 5")
  public Double getAllIn5() {
    return allIn5;
  }

  public void setAllIn5(Double allIn5) {
    this.allIn5 = allIn5;
  }

  public S7PayTable allIn6(Double allIn6) {
    this.allIn6 = allIn6;
    return this;
  }

   /**
   * The odd value for All In 6
   * minimum: 1
   * @return allIn6
  **/
  @ApiModelProperty(value = "The odd value for All In 6")
  public Double getAllIn6() {
    return allIn6;
  }

  public void setAllIn6(Double allIn6) {
    this.allIn6 = allIn6;
  }

  public S7PayTable allIn7(Double allIn7) {
    this.allIn7 = allIn7;
    return this;
  }

   /**
   * The odd value for All In 7
   * minimum: 1
   * @return allIn7
  **/
  @ApiModelProperty(value = "The odd value for All In 7")
  public Double getAllIn7() {
    return allIn7;
  }

  public void setAllIn7(Double allIn7) {
    this.allIn7 = allIn7;
  }

  public S7PayTable oneOutOf7(Double oneOutOf7) {
    this.oneOutOf7 = oneOutOf7;
    return this;
  }

   /**
   * The odd value for 1 Out of 7
   * minimum: 1
   * @return oneOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 1 Out of 7")
  public Double getOneOutOf7() {
    return oneOutOf7;
  }

  public void setOneOutOf7(Double oneOutOf7) {
    this.oneOutOf7 = oneOutOf7;
  }

  public S7PayTable twoOutOf7(Double twoOutOf7) {
    this.twoOutOf7 = twoOutOf7;
    return this;
  }

   /**
   * The odd value for 2 Out of 7
   * minimum: 1
   * @return twoOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 2 Out of 7")
  public Double getTwoOutOf7() {
    return twoOutOf7;
  }

  public void setTwoOutOf7(Double twoOutOf7) {
    this.twoOutOf7 = twoOutOf7;
  }

  public S7PayTable threeOutOf7(Double threeOutOf7) {
    this.threeOutOf7 = threeOutOf7;
    return this;
  }

   /**
   * The odd value for 3 Out of 7
   * minimum: 1
   * @return threeOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 3 Out of 7")
  public Double getThreeOutOf7() {
    return threeOutOf7;
  }

  public void setThreeOutOf7(Double threeOutOf7) {
    this.threeOutOf7 = threeOutOf7;
  }

  public S7PayTable fourOutOf7(Double fourOutOf7) {
    this.fourOutOf7 = fourOutOf7;
    return this;
  }

   /**
   * The odd value for 4 Out of 7
   * minimum: 1
   * @return fourOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 4 Out of 7")
  public Double getFourOutOf7() {
    return fourOutOf7;
  }

  public void setFourOutOf7(Double fourOutOf7) {
    this.fourOutOf7 = fourOutOf7;
  }

  public S7PayTable fiveOutOf7(Double fiveOutOf7) {
    this.fiveOutOf7 = fiveOutOf7;
    return this;
  }

   /**
   * The odd value for 5 Out of 7
   * minimum: 1
   * @return fiveOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 5 Out of 7")
  public Double getFiveOutOf7() {
    return fiveOutOf7;
  }

  public void setFiveOutOf7(Double fiveOutOf7) {
    this.fiveOutOf7 = fiveOutOf7;
  }

  public S7PayTable sixOutOf7(Double sixOutOf7) {
    this.sixOutOf7 = sixOutOf7;
    return this;
  }

   /**
   * The odd value for 6 Out of 7
   * minimum: 1
   * @return sixOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 6 Out of 7")
  public Double getSixOutOf7() {
    return sixOutOf7;
  }

  public void setSixOutOf7(Double sixOutOf7) {
    this.sixOutOf7 = sixOutOf7;
  }

  public S7PayTable sevenOutOf7(Double sevenOutOf7) {
    this.sevenOutOf7 = sevenOutOf7;
    return this;
  }

   /**
   * The odd value for 1 Out of 7
   * minimum: 1
   * @return sevenOutOf7
  **/
  @ApiModelProperty(value = "The odd value for 1 Out of 7")
  public Double getSevenOutOf7() {
    return sevenOutOf7;
  }

  public void setSevenOutOf7(Double sevenOutOf7) {
    this.sevenOutOf7 = sevenOutOf7;
  }

  public S7PayTable noDraw1(Double noDraw1) {
    this.noDraw1 = noDraw1;
    return this;
  }

   /**
   * The odd value for No Draw 1
   * minimum: 1
   * @return noDraw1
  **/
  @ApiModelProperty(value = "The odd value for No Draw 1")
  public Double getNoDraw1() {
    return noDraw1;
  }

  public void setNoDraw1(Double noDraw1) {
    this.noDraw1 = noDraw1;
  }

  public S7PayTable noDraw2(Double noDraw2) {
    this.noDraw2 = noDraw2;
    return this;
  }

   /**
   * The odd value for No Draw 2
   * minimum: 1
   * @return noDraw2
  **/
  @ApiModelProperty(value = "The odd value for No Draw 2")
  public Double getNoDraw2() {
    return noDraw2;
  }

  public void setNoDraw2(Double noDraw2) {
    this.noDraw2 = noDraw2;
  }

  public S7PayTable noDraw3(Double noDraw3) {
    this.noDraw3 = noDraw3;
    return this;
  }

   /**
   * The odd value for No Draw 3
   * minimum: 1
   * @return noDraw3
  **/
  @ApiModelProperty(value = "The odd value for No Draw 3")
  public Double getNoDraw3() {
    return noDraw3;
  }

  public void setNoDraw3(Double noDraw3) {
    this.noDraw3 = noDraw3;
  }

  public S7PayTable noDraw4(Double noDraw4) {
    this.noDraw4 = noDraw4;
    return this;
  }

   /**
   * The odd value for No Draw 4
   * minimum: 1
   * @return noDraw4
  **/
  @ApiModelProperty(value = "The odd value for No Draw 4")
  public Double getNoDraw4() {
    return noDraw4;
  }

  public void setNoDraw4(Double noDraw4) {
    this.noDraw4 = noDraw4;
  }

  public S7PayTable noDraw5(Double noDraw5) {
    this.noDraw5 = noDraw5;
    return this;
  }

   /**
   * The odd value for No Draw 5
   * minimum: 1
   * @return noDraw5
  **/
  @ApiModelProperty(value = "The odd value for No Draw 5")
  public Double getNoDraw5() {
    return noDraw5;
  }

  public void setNoDraw5(Double noDraw5) {
    this.noDraw5 = noDraw5;
  }

  public S7PayTable noDraw6(Double noDraw6) {
    this.noDraw6 = noDraw6;
    return this;
  }

   /**
   * The odd value for No Draw 6
   * minimum: 1
   * @return noDraw6
  **/
  @ApiModelProperty(value = "The odd value for No Draw 6")
  public Double getNoDraw6() {
    return noDraw6;
  }

  public void setNoDraw6(Double noDraw6) {
    this.noDraw6 = noDraw6;
  }

  public S7PayTable noDraw7(Double noDraw7) {
    this.noDraw7 = noDraw7;
    return this;
  }

   /**
   * The odd value for No Draw 7
   * minimum: 1
   * @return noDraw7
  **/
  @ApiModelProperty(value = "The odd value for No Draw 7")
  public Double getNoDraw7() {
    return noDraw7;
  }

  public void setNoDraw7(Double noDraw7) {
    this.noDraw7 = noDraw7;
  }

  public S7PayTable firstBallWhite(Double firstBallWhite) {
    this.firstBallWhite = firstBallWhite;
    return this;
  }

   /**
   * The odd value for First Ball White
   * minimum: 1
   * @return firstBallWhite
  **/
  @ApiModelProperty(value = "The odd value for First Ball White")
  public Double getFirstBallWhite() {
    return firstBallWhite;
  }

  public void setFirstBallWhite(Double firstBallWhite) {
    this.firstBallWhite = firstBallWhite;
  }

  public S7PayTable firstBallRed(Double firstBallRed) {
    this.firstBallRed = firstBallRed;
    return this;
  }

   /**
   * The odd value for First Ball Red
   * minimum: 1
   * @return firstBallRed
  **/
  @ApiModelProperty(value = "The odd value for First Ball Red")
  public Double getFirstBallRed() {
    return firstBallRed;
  }

  public void setFirstBallRed(Double firstBallRed) {
    this.firstBallRed = firstBallRed;
  }

  public S7PayTable lastBallWhite(Double lastBallWhite) {
    this.lastBallWhite = lastBallWhite;
    return this;
  }

   /**
   * The odd value for Last Ball White
   * minimum: 1
   * @return lastBallWhite
  **/
  @ApiModelProperty(value = "The odd value for Last Ball White")
  public Double getLastBallWhite() {
    return lastBallWhite;
  }

  public void setLastBallWhite(Double lastBallWhite) {
    this.lastBallWhite = lastBallWhite;
  }

  public S7PayTable lastBallRed(Double lastBallRed) {
    this.lastBallRed = lastBallRed;
    return this;
  }

   /**
   * The odd value for Last Ball Red
   * minimum: 1
   * @return lastBallRed
  **/
  @ApiModelProperty(value = "The odd value for Last Ball Red")
  public Double getLastBallRed() {
    return lastBallRed;
  }

  public void setLastBallRed(Double lastBallRed) {
    this.lastBallRed = lastBallRed;
  }

  public S7PayTable firstAndSecondSameColor(Double firstAndSecondSameColor) {
    this.firstAndSecondSameColor = firstAndSecondSameColor;
    return this;
  }

   /**
   * The odd value for First And Second Same Color
   * minimum: 1
   * @return firstAndSecondSameColor
  **/
  @ApiModelProperty(value = "The odd value for First And Second Same Color")
  public Double getFirstAndSecondSameColor() {
    return firstAndSecondSameColor;
  }

  public void setFirstAndSecondSameColor(Double firstAndSecondSameColor) {
    this.firstAndSecondSameColor = firstAndSecondSameColor;
  }

  public S7PayTable firstAndSecondDifferentColor(Double firstAndSecondDifferentColor) {
    this.firstAndSecondDifferentColor = firstAndSecondDifferentColor;
    return this;
  }

   /**
   * The odd value for First And Second Different Color
   * minimum: 1
   * @return firstAndSecondDifferentColor
  **/
  @ApiModelProperty(value = "The odd value for First And Second Different Color")
  public Double getFirstAndSecondDifferentColor() {
    return firstAndSecondDifferentColor;
  }

  public void setFirstAndSecondDifferentColor(Double firstAndSecondDifferentColor) {
    this.firstAndSecondDifferentColor = firstAndSecondDifferentColor;
  }

  public S7PayTable sevenWhiteBalls(Double sevenWhiteBalls) {
    this.sevenWhiteBalls = sevenWhiteBalls;
    return this;
  }

   /**
   * The odd value for 7 White Balls
   * minimum: 1
   * @return sevenWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 7 White Balls")
  public Double getSevenWhiteBalls() {
    return sevenWhiteBalls;
  }

  public void setSevenWhiteBalls(Double sevenWhiteBalls) {
    this.sevenWhiteBalls = sevenWhiteBalls;
  }

  public S7PayTable sixWhiteBalls(Double sixWhiteBalls) {
    this.sixWhiteBalls = sixWhiteBalls;
    return this;
  }

   /**
   * The odd value for 6 White Balls
   * minimum: 1
   * @return sixWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 6 White Balls")
  public Double getSixWhiteBalls() {
    return sixWhiteBalls;
  }

  public void setSixWhiteBalls(Double sixWhiteBalls) {
    this.sixWhiteBalls = sixWhiteBalls;
  }

  public S7PayTable fiveWhiteBalls(Double fiveWhiteBalls) {
    this.fiveWhiteBalls = fiveWhiteBalls;
    return this;
  }

   /**
   * The odd value for 5 White Balls
   * minimum: 1
   * @return fiveWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 5 White Balls")
  public Double getFiveWhiteBalls() {
    return fiveWhiteBalls;
  }

  public void setFiveWhiteBalls(Double fiveWhiteBalls) {
    this.fiveWhiteBalls = fiveWhiteBalls;
  }

  public S7PayTable fourWhiteBalls(Double fourWhiteBalls) {
    this.fourWhiteBalls = fourWhiteBalls;
    return this;
  }

   /**
   * The odd value for 4 White Balls
   * minimum: 1
   * @return fourWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 4 White Balls")
  public Double getFourWhiteBalls() {
    return fourWhiteBalls;
  }

  public void setFourWhiteBalls(Double fourWhiteBalls) {
    this.fourWhiteBalls = fourWhiteBalls;
  }

  public S7PayTable threeWhiteBalls(Double threeWhiteBalls) {
    this.threeWhiteBalls = threeWhiteBalls;
    return this;
  }

   /**
   * The odd value for 3 White Balls
   * minimum: 1
   * @return threeWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 3 White Balls")
  public Double getThreeWhiteBalls() {
    return threeWhiteBalls;
  }

  public void setThreeWhiteBalls(Double threeWhiteBalls) {
    this.threeWhiteBalls = threeWhiteBalls;
  }

  public S7PayTable twoWhiteBalls(Double twoWhiteBalls) {
    this.twoWhiteBalls = twoWhiteBalls;
    return this;
  }

   /**
   * The odd value for 2 White Balls
   * minimum: 1
   * @return twoWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 2 White Balls")
  public Double getTwoWhiteBalls() {
    return twoWhiteBalls;
  }

  public void setTwoWhiteBalls(Double twoWhiteBalls) {
    this.twoWhiteBalls = twoWhiteBalls;
  }

  public S7PayTable oneWhiteBalls(Double oneWhiteBalls) {
    this.oneWhiteBalls = oneWhiteBalls;
    return this;
  }

   /**
   * The odd value for 1 White Balls
   * minimum: 1
   * @return oneWhiteBalls
  **/
  @ApiModelProperty(value = "The odd value for 1 White Balls")
  public Double getOneWhiteBalls() {
    return oneWhiteBalls;
  }

  public void setOneWhiteBalls(Double oneWhiteBalls) {
    this.oneWhiteBalls = oneWhiteBalls;
  }

  public S7PayTable sevenRedBalls(Double sevenRedBalls) {
    this.sevenRedBalls = sevenRedBalls;
    return this;
  }

   /**
   * The odd value for 7 Red Balls
   * minimum: 1
   * @return sevenRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 7 Red Balls")
  public Double getSevenRedBalls() {
    return sevenRedBalls;
  }

  public void setSevenRedBalls(Double sevenRedBalls) {
    this.sevenRedBalls = sevenRedBalls;
  }

  public S7PayTable sixRedBalls(Double sixRedBalls) {
    this.sixRedBalls = sixRedBalls;
    return this;
  }

   /**
   * The odd value for 6 Red Balls
   * minimum: 1
   * @return sixRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 6 Red Balls")
  public Double getSixRedBalls() {
    return sixRedBalls;
  }

  public void setSixRedBalls(Double sixRedBalls) {
    this.sixRedBalls = sixRedBalls;
  }

  public S7PayTable fiveRedBalls(Double fiveRedBalls) {
    this.fiveRedBalls = fiveRedBalls;
    return this;
  }

   /**
   * The odd value for 5 Red Balls
   * minimum: 1
   * @return fiveRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 5 Red Balls")
  public Double getFiveRedBalls() {
    return fiveRedBalls;
  }

  public void setFiveRedBalls(Double fiveRedBalls) {
    this.fiveRedBalls = fiveRedBalls;
  }

  public S7PayTable fourRedBalls(Double fourRedBalls) {
    this.fourRedBalls = fourRedBalls;
    return this;
  }

   /**
   * The odd value for 4 Red Balls
   * minimum: 1
   * @return fourRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 4 Red Balls")
  public Double getFourRedBalls() {
    return fourRedBalls;
  }

  public void setFourRedBalls(Double fourRedBalls) {
    this.fourRedBalls = fourRedBalls;
  }

  public S7PayTable threeRedBalls(Double threeRedBalls) {
    this.threeRedBalls = threeRedBalls;
    return this;
  }

   /**
   * The odd value for 3 Red Balls
   * minimum: 1
   * @return threeRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 3 Red Balls")
  public Double getThreeRedBalls() {
    return threeRedBalls;
  }

  public void setThreeRedBalls(Double threeRedBalls) {
    this.threeRedBalls = threeRedBalls;
  }

  public S7PayTable twoRedBalls(Double twoRedBalls) {
    this.twoRedBalls = twoRedBalls;
    return this;
  }

   /**
   * The odd value for 2 Red Balls
   * minimum: 1
   * @return twoRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 2 Red Balls")
  public Double getTwoRedBalls() {
    return twoRedBalls;
  }

  public void setTwoRedBalls(Double twoRedBalls) {
    this.twoRedBalls = twoRedBalls;
  }

  public S7PayTable oneRedBalls(Double oneRedBalls) {
    this.oneRedBalls = oneRedBalls;
    return this;
  }

   /**
   * The odd value for 1 Red Balls
   * minimum: 1
   * @return oneRedBalls
  **/
  @ApiModelProperty(value = "The odd value for 1 Red Balls")
  public Double getOneRedBalls() {
    return oneRedBalls;
  }

  public void setOneRedBalls(Double oneRedBalls) {
    this.oneRedBalls = oneRedBalls;
  }

  public S7PayTable sumUnder100(Double sumUnder100) {
    this.sumUnder100 = sumUnder100;
    return this;
  }

   /**
   * The odd value for Sum Under 100.5
   * minimum: 1
   * @return sumUnder100
  **/
  @ApiModelProperty(value = "The odd value for Sum Under 100.5")
  public Double getSumUnder100() {
    return sumUnder100;
  }

  public void setSumUnder100(Double sumUnder100) {
    this.sumUnder100 = sumUnder100;
  }

  public S7PayTable sumUnder125(Double sumUnder125) {
    this.sumUnder125 = sumUnder125;
    return this;
  }

   /**
   * The odd value for Sum Under 125.5
   * minimum: 1
   * @return sumUnder125
  **/
  @ApiModelProperty(value = "The odd value for Sum Under 125.5")
  public Double getSumUnder125() {
    return sumUnder125;
  }

  public void setSumUnder125(Double sumUnder125) {
    this.sumUnder125 = sumUnder125;
  }

  public S7PayTable sumOver125(Double sumOver125) {
    this.sumOver125 = sumOver125;
    return this;
  }

   /**
   * The odd value for Sum Over 125.5
   * minimum: 1
   * @return sumOver125
  **/
  @ApiModelProperty(value = "The odd value for Sum Over 125.5")
  public Double getSumOver125() {
    return sumOver125;
  }

  public void setSumOver125(Double sumOver125) {
    this.sumOver125 = sumOver125;
  }

  public S7PayTable sumUnder150(Double sumUnder150) {
    this.sumUnder150 = sumUnder150;
    return this;
  }

   /**
   * The odd value for Sum Under 150.5
   * minimum: 1
   * @return sumUnder150
  **/
  @ApiModelProperty(value = "The odd value for Sum Under 150.5")
  public Double getSumUnder150() {
    return sumUnder150;
  }

  public void setSumUnder150(Double sumUnder150) {
    this.sumUnder150 = sumUnder150;
  }

  public S7PayTable sumOver150(Double sumOver150) {
    this.sumOver150 = sumOver150;
    return this;
  }

   /**
   * The odd value for Sum Over 150.5
   * minimum: 1
   * @return sumOver150
  **/
  @ApiModelProperty(value = "The odd value for Sum Over 150.5")
  public Double getSumOver150() {
    return sumOver150;
  }

  public void setSumOver150(Double sumOver150) {
    this.sumOver150 = sumOver150;
  }

  public S7PayTable sumUnder175(Double sumUnder175) {
    this.sumUnder175 = sumUnder175;
    return this;
  }

   /**
   * The odd value for Sum Under 175.5
   * minimum: 1
   * @return sumUnder175
  **/
  @ApiModelProperty(value = "The odd value for Sum Under 175.5")
  public Double getSumUnder175() {
    return sumUnder175;
  }

  public void setSumUnder175(Double sumUnder175) {
    this.sumUnder175 = sumUnder175;
  }

  public S7PayTable sumOver175(Double sumOver175) {
    this.sumOver175 = sumOver175;
    return this;
  }

   /**
   * The odd value for Sum Over 175.5
   * minimum: 1
   * @return sumOver175
  **/
  @ApiModelProperty(value = "The odd value for Sum Over 175.5")
  public Double getSumOver175() {
    return sumOver175;
  }

  public void setSumOver175(Double sumOver175) {
    this.sumOver175 = sumOver175;
  }

  public S7PayTable sumOver200(Double sumOver200) {
    this.sumOver200 = sumOver200;
    return this;
  }

   /**
   * The odd value for Sum Over 200.5
   * minimum: 1
   * @return sumOver200
  **/
  @ApiModelProperty(value = "The odd value for Sum Over 200.5")
  public Double getSumOver200() {
    return sumOver200;
  }

  public void setSumOver200(Double sumOver200) {
    this.sumOver200 = sumOver200;
  }

  public S7PayTable sumWhiteUnder73(Double sumWhiteUnder73) {
    this.sumWhiteUnder73 = sumWhiteUnder73;
    return this;
  }

   /**
   * The odd value for White Balls Sum Under 73.5
   * minimum: 1
   * @return sumWhiteUnder73
  **/
  @ApiModelProperty(value = "The odd value for White Balls Sum Under 73.5")
  public Double getSumWhiteUnder73() {
    return sumWhiteUnder73;
  }

  public void setSumWhiteUnder73(Double sumWhiteUnder73) {
    this.sumWhiteUnder73 = sumWhiteUnder73;
  }

  public S7PayTable sumWhiteOver73(Double sumWhiteOver73) {
    this.sumWhiteOver73 = sumWhiteOver73;
    return this;
  }

   /**
   * The odd value for White Balls Sum Over 73.5
   * minimum: 1
   * @return sumWhiteOver73
  **/
  @ApiModelProperty(value = "The odd value for White Balls Sum Over 73.5")
  public Double getSumWhiteOver73() {
    return sumWhiteOver73;
  }

  public void setSumWhiteOver73(Double sumWhiteOver73) {
    this.sumWhiteOver73 = sumWhiteOver73;
  }

  public S7PayTable sumRedUnder73(Double sumRedUnder73) {
    this.sumRedUnder73 = sumRedUnder73;
    return this;
  }

   /**
   * The odd value for Red Balls Sum Under 73.5
   * minimum: 1
   * @return sumRedUnder73
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Sum Under 73.5")
  public Double getSumRedUnder73() {
    return sumRedUnder73;
  }

  public void setSumRedUnder73(Double sumRedUnder73) {
    this.sumRedUnder73 = sumRedUnder73;
  }

  public S7PayTable sumRedOver73(Double sumRedOver73) {
    this.sumRedOver73 = sumRedOver73;
    return this;
  }

   /**
   * The odd value for Red Balls Sum Over 73.5
   * minimum: 1
   * @return sumRedOver73
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Sum Over 73.5")
  public Double getSumRedOver73() {
    return sumRedOver73;
  }

  public void setSumRedOver73(Double sumRedOver73) {
    this.sumRedOver73 = sumRedOver73;
  }

  public S7PayTable countWhiteUnder3(Double countWhiteUnder3) {
    this.countWhiteUnder3 = countWhiteUnder3;
    return this;
  }

   /**
   * The odd value for White Balls Count Under 3.5
   * minimum: 1
   * @return countWhiteUnder3
  **/
  @ApiModelProperty(value = "The odd value for White Balls Count Under 3.5")
  public Double getCountWhiteUnder3() {
    return countWhiteUnder3;
  }

  public void setCountWhiteUnder3(Double countWhiteUnder3) {
    this.countWhiteUnder3 = countWhiteUnder3;
  }

  public S7PayTable countWhiteOver3(Double countWhiteOver3) {
    this.countWhiteOver3 = countWhiteOver3;
    return this;
  }

   /**
   * The odd value for White Balls Count Over 3.5
   * minimum: 1
   * @return countWhiteOver3
  **/
  @ApiModelProperty(value = "The odd value for White Balls Count Over 3.5")
  public Double getCountWhiteOver3() {
    return countWhiteOver3;
  }

  public void setCountWhiteOver3(Double countWhiteOver3) {
    this.countWhiteOver3 = countWhiteOver3;
  }

  public S7PayTable countWhiteUnder2(Double countWhiteUnder2) {
    this.countWhiteUnder2 = countWhiteUnder2;
    return this;
  }

   /**
   * The odd value for White Balls Count Under 2.5
   * minimum: 1
   * @return countWhiteUnder2
  **/
  @ApiModelProperty(value = "The odd value for White Balls Count Under 2.5")
  public Double getCountWhiteUnder2() {
    return countWhiteUnder2;
  }

  public void setCountWhiteUnder2(Double countWhiteUnder2) {
    this.countWhiteUnder2 = countWhiteUnder2;
  }

  public S7PayTable countWhiteOver2(Double countWhiteOver2) {
    this.countWhiteOver2 = countWhiteOver2;
    return this;
  }

   /**
   * The odd value for White Balls Count Over 2.5
   * minimum: 1
   * @return countWhiteOver2
  **/
  @ApiModelProperty(value = "The odd value for White Balls Count Over 2.5")
  public Double getCountWhiteOver2() {
    return countWhiteOver2;
  }

  public void setCountWhiteOver2(Double countWhiteOver2) {
    this.countWhiteOver2 = countWhiteOver2;
  }

  public S7PayTable countWhiteUnder1(Double countWhiteUnder1) {
    this.countWhiteUnder1 = countWhiteUnder1;
    return this;
  }

   /**
   * The odd value for White Balls Count Under 1.5
   * minimum: 1
   * @return countWhiteUnder1
  **/
  @ApiModelProperty(value = "The odd value for White Balls Count Under 1.5")
  public Double getCountWhiteUnder1() {
    return countWhiteUnder1;
  }

  public void setCountWhiteUnder1(Double countWhiteUnder1) {
    this.countWhiteUnder1 = countWhiteUnder1;
  }

  public S7PayTable countWhiteOver1(Double countWhiteOver1) {
    this.countWhiteOver1 = countWhiteOver1;
    return this;
  }

   /**
   * The odd value for White Balls Count Over 1.5
   * minimum: 1
   * @return countWhiteOver1
  **/
  @ApiModelProperty(value = "The odd value for White Balls Count Over 1.5")
  public Double getCountWhiteOver1() {
    return countWhiteOver1;
  }

  public void setCountWhiteOver1(Double countWhiteOver1) {
    this.countWhiteOver1 = countWhiteOver1;
  }

  public S7PayTable countRedUnder3(Double countRedUnder3) {
    this.countRedUnder3 = countRedUnder3;
    return this;
  }

   /**
   * The odd value for Red Balls Count Under 3.5
   * minimum: 1
   * @return countRedUnder3
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Count Under 3.5")
  public Double getCountRedUnder3() {
    return countRedUnder3;
  }

  public void setCountRedUnder3(Double countRedUnder3) {
    this.countRedUnder3 = countRedUnder3;
  }

  public S7PayTable countRedOver3(Double countRedOver3) {
    this.countRedOver3 = countRedOver3;
    return this;
  }

   /**
   * The odd value for Red Balls Count Over 3.5
   * minimum: 1
   * @return countRedOver3
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Count Over 3.5")
  public Double getCountRedOver3() {
    return countRedOver3;
  }

  public void setCountRedOver3(Double countRedOver3) {
    this.countRedOver3 = countRedOver3;
  }

  public S7PayTable countRedUnder2(Double countRedUnder2) {
    this.countRedUnder2 = countRedUnder2;
    return this;
  }

   /**
   * The odd value for Red Balls Count Under 2.5
   * minimum: 1
   * @return countRedUnder2
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Count Under 2.5")
  public Double getCountRedUnder2() {
    return countRedUnder2;
  }

  public void setCountRedUnder2(Double countRedUnder2) {
    this.countRedUnder2 = countRedUnder2;
  }

  public S7PayTable countRedOver2(Double countRedOver2) {
    this.countRedOver2 = countRedOver2;
    return this;
  }

   /**
   * The odd value for Red Balls Count Over 2.5
   * minimum: 1
   * @return countRedOver2
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Count Over 2.5")
  public Double getCountRedOver2() {
    return countRedOver2;
  }

  public void setCountRedOver2(Double countRedOver2) {
    this.countRedOver2 = countRedOver2;
  }

  public S7PayTable countRedUnder1(Double countRedUnder1) {
    this.countRedUnder1 = countRedUnder1;
    return this;
  }

   /**
   * The odd value for Red Balls Count Under 1.5
   * minimum: 1
   * @return countRedUnder1
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Count Under 1.5")
  public Double getCountRedUnder1() {
    return countRedUnder1;
  }

  public void setCountRedUnder1(Double countRedUnder1) {
    this.countRedUnder1 = countRedUnder1;
  }

  public S7PayTable countRedOver1(Double countRedOver1) {
    this.countRedOver1 = countRedOver1;
    return this;
  }

   /**
   * The odd value for Red Balls Count Over 1.5
   * minimum: 1
   * @return countRedOver1
  **/
  @ApiModelProperty(value = "The odd value for Red Balls Count Over 1.5")
  public Double getCountRedOver1() {
    return countRedOver1;
  }

  public void setCountRedOver1(Double countRedOver1) {
    this.countRedOver1 = countRedOver1;
  }

  public S7PayTable moreOdd(Double moreOdd) {
    this.moreOdd = moreOdd;
    return this;
  }

   /**
   * The odd value for More Odd Balls Than Even
   * minimum: 1
   * @return moreOdd
  **/
  @ApiModelProperty(value = "The odd value for More Odd Balls Than Even")
  public Double getMoreOdd() {
    return moreOdd;
  }

  public void setMoreOdd(Double moreOdd) {
    this.moreOdd = moreOdd;
  }

  public S7PayTable moreEven(Double moreEven) {
    this.moreEven = moreEven;
    return this;
  }

   /**
   * The odd value for More Even Balls Than Odd
   * minimum: 1
   * @return moreEven
  **/
  @ApiModelProperty(value = "The odd value for More Even Balls Than Odd")
  public Double getMoreEven() {
    return moreEven;
  }

  public void setMoreEven(Double moreEven) {
    this.moreEven = moreEven;
  }

  public S7PayTable sumOdd(Double sumOdd) {
    this.sumOdd = sumOdd;
    return this;
  }

   /**
   * The odd value for Balls Sum Odd
   * minimum: 1
   * @return sumOdd
  **/
  @ApiModelProperty(value = "The odd value for Balls Sum Odd")
  public Double getSumOdd() {
    return sumOdd;
  }

  public void setSumOdd(Double sumOdd) {
    this.sumOdd = sumOdd;
  }

  public S7PayTable sumEven(Double sumEven) {
    this.sumEven = sumEven;
    return this;
  }

   /**
   * The odd value for Balls Sum Even
   * minimum: 1
   * @return sumEven
  **/
  @ApiModelProperty(value = "The odd value for Balls Sum Even")
  public Double getSumEven() {
    return sumEven;
  }

  public void setSumEven(Double sumEven) {
    this.sumEven = sumEven;
  }

  public S7PayTable firstBallOdd(Double firstBallOdd) {
    this.firstBallOdd = firstBallOdd;
    return this;
  }

   /**
   * The odd value for First Ball Odd
   * minimum: 1
   * @return firstBallOdd
  **/
  @ApiModelProperty(value = "The odd value for First Ball Odd")
  public Double getFirstBallOdd() {
    return firstBallOdd;
  }

  public void setFirstBallOdd(Double firstBallOdd) {
    this.firstBallOdd = firstBallOdd;
  }

  public S7PayTable firstBallEven(Double firstBallEven) {
    this.firstBallEven = firstBallEven;
    return this;
  }

   /**
   * The odd value for First Ball Even
   * minimum: 1
   * @return firstBallEven
  **/
  @ApiModelProperty(value = "The odd value for First Ball Even")
  public Double getFirstBallEven() {
    return firstBallEven;
  }

  public void setFirstBallEven(Double firstBallEven) {
    this.firstBallEven = firstBallEven;
  }

  public S7PayTable lastBallOdd(Double lastBallOdd) {
    this.lastBallOdd = lastBallOdd;
    return this;
  }

   /**
   * The odd value for Last Ball Odd
   * minimum: 1
   * @return lastBallOdd
  **/
  @ApiModelProperty(value = "The odd value for Last Ball Odd")
  public Double getLastBallOdd() {
    return lastBallOdd;
  }

  public void setLastBallOdd(Double lastBallOdd) {
    this.lastBallOdd = lastBallOdd;
  }

  public S7PayTable lastBallEven(Double lastBallEven) {
    this.lastBallEven = lastBallEven;
    return this;
  }

   /**
   * The odd value for Last Ball Even
   * minimum: 1
   * @return lastBallEven
  **/
  @ApiModelProperty(value = "The odd value for Last Ball Even")
  public Double getLastBallEven() {
    return lastBallEven;
  }

  public void setLastBallEven(Double lastBallEven) {
    this.lastBallEven = lastBallEven;
  }

  public S7PayTable firstTwoBallsOdd(Double firstTwoBallsOdd) {
    this.firstTwoBallsOdd = firstTwoBallsOdd;
    return this;
  }

   /**
   * The odd value for First Two Balls Odd
   * minimum: 1
   * @return firstTwoBallsOdd
  **/
  @ApiModelProperty(value = "The odd value for First Two Balls Odd")
  public Double getFirstTwoBallsOdd() {
    return firstTwoBallsOdd;
  }

  public void setFirstTwoBallsOdd(Double firstTwoBallsOdd) {
    this.firstTwoBallsOdd = firstTwoBallsOdd;
  }

  public S7PayTable firstTwoBallsEven(Double firstTwoBallsEven) {
    this.firstTwoBallsEven = firstTwoBallsEven;
    return this;
  }

   /**
   * The odd value for First Two Balls Even
   * minimum: 1
   * @return firstTwoBallsEven
  **/
  @ApiModelProperty(value = "The odd value for First Two Balls Even")
  public Double getFirstTwoBallsEven() {
    return firstTwoBallsEven;
  }

  public void setFirstTwoBallsEven(Double firstTwoBallsEven) {
    this.firstTwoBallsEven = firstTwoBallsEven;
  }

  public S7PayTable firstOddAndSecondEven(Double firstOddAndSecondEven) {
    this.firstOddAndSecondEven = firstOddAndSecondEven;
    return this;
  }

   /**
   * The odd value for First Odd And Second Even
   * minimum: 1
   * @return firstOddAndSecondEven
  **/
  @ApiModelProperty(value = "The odd value for First Odd And Second Even")
  public Double getFirstOddAndSecondEven() {
    return firstOddAndSecondEven;
  }

  public void setFirstOddAndSecondEven(Double firstOddAndSecondEven) {
    this.firstOddAndSecondEven = firstOddAndSecondEven;
  }

  public S7PayTable firstEvenAndSecondOdd(Double firstEvenAndSecondOdd) {
    this.firstEvenAndSecondOdd = firstEvenAndSecondOdd;
    return this;
  }

   /**
   * The odd value for First Even And Second Odd
   * minimum: 1
   * @return firstEvenAndSecondOdd
  **/
  @ApiModelProperty(value = "The odd value for First Even And Second Odd")
  public Double getFirstEvenAndSecondOdd() {
    return firstEvenAndSecondOdd;
  }

  public void setFirstEvenAndSecondOdd(Double firstEvenAndSecondOdd) {
    this.firstEvenAndSecondOdd = firstEvenAndSecondOdd;
  }

  public S7PayTable firstOddAndLastEven(Double firstOddAndLastEven) {
    this.firstOddAndLastEven = firstOddAndLastEven;
    return this;
  }

   /**
   * The odd value for First Odd And Last Even
   * minimum: 1
   * @return firstOddAndLastEven
  **/
  @ApiModelProperty(value = "The odd value for First Odd And Last Even")
  public Double getFirstOddAndLastEven() {
    return firstOddAndLastEven;
  }

  public void setFirstOddAndLastEven(Double firstOddAndLastEven) {
    this.firstOddAndLastEven = firstOddAndLastEven;
  }

  public S7PayTable firstEvenAndLastOdd(Double firstEvenAndLastOdd) {
    this.firstEvenAndLastOdd = firstEvenAndLastOdd;
    return this;
  }

   /**
   * The odd value for First Even And Last Odd
   * minimum: 1
   * @return firstEvenAndLastOdd
  **/
  @ApiModelProperty(value = "The odd value for First Even And Last Odd")
  public Double getFirstEvenAndLastOdd() {
    return firstEvenAndLastOdd;
  }

  public void setFirstEvenAndLastOdd(Double firstEvenAndLastOdd) {
    this.firstEvenAndLastOdd = firstEvenAndLastOdd;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S7PayTable s7PayTable = (S7PayTable) o;
    return Objects.equals(this.allIn1, s7PayTable.allIn1) &&
        Objects.equals(this.allIn2, s7PayTable.allIn2) &&
        Objects.equals(this.allIn3, s7PayTable.allIn3) &&
        Objects.equals(this.allIn4, s7PayTable.allIn4) &&
        Objects.equals(this.allIn5, s7PayTable.allIn5) &&
        Objects.equals(this.allIn6, s7PayTable.allIn6) &&
        Objects.equals(this.allIn7, s7PayTable.allIn7) &&
        Objects.equals(this.oneOutOf7, s7PayTable.oneOutOf7) &&
        Objects.equals(this.twoOutOf7, s7PayTable.twoOutOf7) &&
        Objects.equals(this.threeOutOf7, s7PayTable.threeOutOf7) &&
        Objects.equals(this.fourOutOf7, s7PayTable.fourOutOf7) &&
        Objects.equals(this.fiveOutOf7, s7PayTable.fiveOutOf7) &&
        Objects.equals(this.sixOutOf7, s7PayTable.sixOutOf7) &&
        Objects.equals(this.sevenOutOf7, s7PayTable.sevenOutOf7) &&
        Objects.equals(this.noDraw1, s7PayTable.noDraw1) &&
        Objects.equals(this.noDraw2, s7PayTable.noDraw2) &&
        Objects.equals(this.noDraw3, s7PayTable.noDraw3) &&
        Objects.equals(this.noDraw4, s7PayTable.noDraw4) &&
        Objects.equals(this.noDraw5, s7PayTable.noDraw5) &&
        Objects.equals(this.noDraw6, s7PayTable.noDraw6) &&
        Objects.equals(this.noDraw7, s7PayTable.noDraw7) &&
        Objects.equals(this.firstBallWhite, s7PayTable.firstBallWhite) &&
        Objects.equals(this.firstBallRed, s7PayTable.firstBallRed) &&
        Objects.equals(this.lastBallWhite, s7PayTable.lastBallWhite) &&
        Objects.equals(this.lastBallRed, s7PayTable.lastBallRed) &&
        Objects.equals(this.firstAndSecondSameColor, s7PayTable.firstAndSecondSameColor) &&
        Objects.equals(this.firstAndSecondDifferentColor, s7PayTable.firstAndSecondDifferentColor) &&
        Objects.equals(this.sevenWhiteBalls, s7PayTable.sevenWhiteBalls) &&
        Objects.equals(this.sixWhiteBalls, s7PayTable.sixWhiteBalls) &&
        Objects.equals(this.fiveWhiteBalls, s7PayTable.fiveWhiteBalls) &&
        Objects.equals(this.fourWhiteBalls, s7PayTable.fourWhiteBalls) &&
        Objects.equals(this.threeWhiteBalls, s7PayTable.threeWhiteBalls) &&
        Objects.equals(this.twoWhiteBalls, s7PayTable.twoWhiteBalls) &&
        Objects.equals(this.oneWhiteBalls, s7PayTable.oneWhiteBalls) &&
        Objects.equals(this.sevenRedBalls, s7PayTable.sevenRedBalls) &&
        Objects.equals(this.sixRedBalls, s7PayTable.sixRedBalls) &&
        Objects.equals(this.fiveRedBalls, s7PayTable.fiveRedBalls) &&
        Objects.equals(this.fourRedBalls, s7PayTable.fourRedBalls) &&
        Objects.equals(this.threeRedBalls, s7PayTable.threeRedBalls) &&
        Objects.equals(this.twoRedBalls, s7PayTable.twoRedBalls) &&
        Objects.equals(this.oneRedBalls, s7PayTable.oneRedBalls) &&
        Objects.equals(this.sumUnder100, s7PayTable.sumUnder100) &&
        Objects.equals(this.sumUnder125, s7PayTable.sumUnder125) &&
        Objects.equals(this.sumOver125, s7PayTable.sumOver125) &&
        Objects.equals(this.sumUnder150, s7PayTable.sumUnder150) &&
        Objects.equals(this.sumOver150, s7PayTable.sumOver150) &&
        Objects.equals(this.sumUnder175, s7PayTable.sumUnder175) &&
        Objects.equals(this.sumOver175, s7PayTable.sumOver175) &&
        Objects.equals(this.sumOver200, s7PayTable.sumOver200) &&
        Objects.equals(this.sumWhiteUnder73, s7PayTable.sumWhiteUnder73) &&
        Objects.equals(this.sumWhiteOver73, s7PayTable.sumWhiteOver73) &&
        Objects.equals(this.sumRedUnder73, s7PayTable.sumRedUnder73) &&
        Objects.equals(this.sumRedOver73, s7PayTable.sumRedOver73) &&
        Objects.equals(this.countWhiteUnder3, s7PayTable.countWhiteUnder3) &&
        Objects.equals(this.countWhiteOver3, s7PayTable.countWhiteOver3) &&
        Objects.equals(this.countWhiteUnder2, s7PayTable.countWhiteUnder2) &&
        Objects.equals(this.countWhiteOver2, s7PayTable.countWhiteOver2) &&
        Objects.equals(this.countWhiteUnder1, s7PayTable.countWhiteUnder1) &&
        Objects.equals(this.countWhiteOver1, s7PayTable.countWhiteOver1) &&
        Objects.equals(this.countRedUnder3, s7PayTable.countRedUnder3) &&
        Objects.equals(this.countRedOver3, s7PayTable.countRedOver3) &&
        Objects.equals(this.countRedUnder2, s7PayTable.countRedUnder2) &&
        Objects.equals(this.countRedOver2, s7PayTable.countRedOver2) &&
        Objects.equals(this.countRedUnder1, s7PayTable.countRedUnder1) &&
        Objects.equals(this.countRedOver1, s7PayTable.countRedOver1) &&
        Objects.equals(this.moreOdd, s7PayTable.moreOdd) &&
        Objects.equals(this.moreEven, s7PayTable.moreEven) &&
        Objects.equals(this.sumOdd, s7PayTable.sumOdd) &&
        Objects.equals(this.sumEven, s7PayTable.sumEven) &&
        Objects.equals(this.firstBallOdd, s7PayTable.firstBallOdd) &&
        Objects.equals(this.firstBallEven, s7PayTable.firstBallEven) &&
        Objects.equals(this.lastBallOdd, s7PayTable.lastBallOdd) &&
        Objects.equals(this.lastBallEven, s7PayTable.lastBallEven) &&
        Objects.equals(this.firstTwoBallsOdd, s7PayTable.firstTwoBallsOdd) &&
        Objects.equals(this.firstTwoBallsEven, s7PayTable.firstTwoBallsEven) &&
        Objects.equals(this.firstOddAndSecondEven, s7PayTable.firstOddAndSecondEven) &&
        Objects.equals(this.firstEvenAndSecondOdd, s7PayTable.firstEvenAndSecondOdd) &&
        Objects.equals(this.firstOddAndLastEven, s7PayTable.firstOddAndLastEven) &&
        Objects.equals(this.firstEvenAndLastOdd, s7PayTable.firstEvenAndLastOdd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allIn1, allIn2, allIn3, allIn4, allIn5, allIn6, allIn7, oneOutOf7, twoOutOf7, threeOutOf7, fourOutOf7, fiveOutOf7, sixOutOf7, sevenOutOf7, noDraw1, noDraw2, noDraw3, noDraw4, noDraw5, noDraw6, noDraw7, firstBallWhite, firstBallRed, lastBallWhite, lastBallRed, firstAndSecondSameColor, firstAndSecondDifferentColor, sevenWhiteBalls, sixWhiteBalls, fiveWhiteBalls, fourWhiteBalls, threeWhiteBalls, twoWhiteBalls, oneWhiteBalls, sevenRedBalls, sixRedBalls, fiveRedBalls, fourRedBalls, threeRedBalls, twoRedBalls, oneRedBalls, sumUnder100, sumUnder125, sumOver125, sumUnder150, sumOver150, sumUnder175, sumOver175, sumOver200, sumWhiteUnder73, sumWhiteOver73, sumRedUnder73, sumRedOver73, countWhiteUnder3, countWhiteOver3, countWhiteUnder2, countWhiteOver2, countWhiteUnder1, countWhiteOver1, countRedUnder3, countRedOver3, countRedUnder2, countRedOver2, countRedUnder1, countRedOver1, moreOdd, moreEven, sumOdd, sumEven, firstBallOdd, firstBallEven, lastBallOdd, lastBallEven, firstTwoBallsOdd, firstTwoBallsEven, firstOddAndSecondEven, firstEvenAndSecondOdd, firstOddAndLastEven, firstEvenAndLastOdd);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S7PayTable {\n");
    
    sb.append("    allIn1: ").append(toIndentedString(allIn1)).append("\n");
    sb.append("    allIn2: ").append(toIndentedString(allIn2)).append("\n");
    sb.append("    allIn3: ").append(toIndentedString(allIn3)).append("\n");
    sb.append("    allIn4: ").append(toIndentedString(allIn4)).append("\n");
    sb.append("    allIn5: ").append(toIndentedString(allIn5)).append("\n");
    sb.append("    allIn6: ").append(toIndentedString(allIn6)).append("\n");
    sb.append("    allIn7: ").append(toIndentedString(allIn7)).append("\n");
    sb.append("    oneOutOf7: ").append(toIndentedString(oneOutOf7)).append("\n");
    sb.append("    twoOutOf7: ").append(toIndentedString(twoOutOf7)).append("\n");
    sb.append("    threeOutOf7: ").append(toIndentedString(threeOutOf7)).append("\n");
    sb.append("    fourOutOf7: ").append(toIndentedString(fourOutOf7)).append("\n");
    sb.append("    fiveOutOf7: ").append(toIndentedString(fiveOutOf7)).append("\n");
    sb.append("    sixOutOf7: ").append(toIndentedString(sixOutOf7)).append("\n");
    sb.append("    sevenOutOf7: ").append(toIndentedString(sevenOutOf7)).append("\n");
    sb.append("    noDraw1: ").append(toIndentedString(noDraw1)).append("\n");
    sb.append("    noDraw2: ").append(toIndentedString(noDraw2)).append("\n");
    sb.append("    noDraw3: ").append(toIndentedString(noDraw3)).append("\n");
    sb.append("    noDraw4: ").append(toIndentedString(noDraw4)).append("\n");
    sb.append("    noDraw5: ").append(toIndentedString(noDraw5)).append("\n");
    sb.append("    noDraw6: ").append(toIndentedString(noDraw6)).append("\n");
    sb.append("    noDraw7: ").append(toIndentedString(noDraw7)).append("\n");
    sb.append("    firstBallWhite: ").append(toIndentedString(firstBallWhite)).append("\n");
    sb.append("    firstBallRed: ").append(toIndentedString(firstBallRed)).append("\n");
    sb.append("    lastBallWhite: ").append(toIndentedString(lastBallWhite)).append("\n");
    sb.append("    lastBallRed: ").append(toIndentedString(lastBallRed)).append("\n");
    sb.append("    firstAndSecondSameColor: ").append(toIndentedString(firstAndSecondSameColor)).append("\n");
    sb.append("    firstAndSecondDifferentColor: ").append(toIndentedString(firstAndSecondDifferentColor)).append("\n");
    sb.append("    sevenWhiteBalls: ").append(toIndentedString(sevenWhiteBalls)).append("\n");
    sb.append("    sixWhiteBalls: ").append(toIndentedString(sixWhiteBalls)).append("\n");
    sb.append("    fiveWhiteBalls: ").append(toIndentedString(fiveWhiteBalls)).append("\n");
    sb.append("    fourWhiteBalls: ").append(toIndentedString(fourWhiteBalls)).append("\n");
    sb.append("    threeWhiteBalls: ").append(toIndentedString(threeWhiteBalls)).append("\n");
    sb.append("    twoWhiteBalls: ").append(toIndentedString(twoWhiteBalls)).append("\n");
    sb.append("    oneWhiteBalls: ").append(toIndentedString(oneWhiteBalls)).append("\n");
    sb.append("    sevenRedBalls: ").append(toIndentedString(sevenRedBalls)).append("\n");
    sb.append("    sixRedBalls: ").append(toIndentedString(sixRedBalls)).append("\n");
    sb.append("    fiveRedBalls: ").append(toIndentedString(fiveRedBalls)).append("\n");
    sb.append("    fourRedBalls: ").append(toIndentedString(fourRedBalls)).append("\n");
    sb.append("    threeRedBalls: ").append(toIndentedString(threeRedBalls)).append("\n");
    sb.append("    twoRedBalls: ").append(toIndentedString(twoRedBalls)).append("\n");
    sb.append("    oneRedBalls: ").append(toIndentedString(oneRedBalls)).append("\n");
    sb.append("    sumUnder100: ").append(toIndentedString(sumUnder100)).append("\n");
    sb.append("    sumUnder125: ").append(toIndentedString(sumUnder125)).append("\n");
    sb.append("    sumOver125: ").append(toIndentedString(sumOver125)).append("\n");
    sb.append("    sumUnder150: ").append(toIndentedString(sumUnder150)).append("\n");
    sb.append("    sumOver150: ").append(toIndentedString(sumOver150)).append("\n");
    sb.append("    sumUnder175: ").append(toIndentedString(sumUnder175)).append("\n");
    sb.append("    sumOver175: ").append(toIndentedString(sumOver175)).append("\n");
    sb.append("    sumOver200: ").append(toIndentedString(sumOver200)).append("\n");
    sb.append("    sumWhiteUnder73: ").append(toIndentedString(sumWhiteUnder73)).append("\n");
    sb.append("    sumWhiteOver73: ").append(toIndentedString(sumWhiteOver73)).append("\n");
    sb.append("    sumRedUnder73: ").append(toIndentedString(sumRedUnder73)).append("\n");
    sb.append("    sumRedOver73: ").append(toIndentedString(sumRedOver73)).append("\n");
    sb.append("    countWhiteUnder3: ").append(toIndentedString(countWhiteUnder3)).append("\n");
    sb.append("    countWhiteOver3: ").append(toIndentedString(countWhiteOver3)).append("\n");
    sb.append("    countWhiteUnder2: ").append(toIndentedString(countWhiteUnder2)).append("\n");
    sb.append("    countWhiteOver2: ").append(toIndentedString(countWhiteOver2)).append("\n");
    sb.append("    countWhiteUnder1: ").append(toIndentedString(countWhiteUnder1)).append("\n");
    sb.append("    countWhiteOver1: ").append(toIndentedString(countWhiteOver1)).append("\n");
    sb.append("    countRedUnder3: ").append(toIndentedString(countRedUnder3)).append("\n");
    sb.append("    countRedOver3: ").append(toIndentedString(countRedOver3)).append("\n");
    sb.append("    countRedUnder2: ").append(toIndentedString(countRedUnder2)).append("\n");
    sb.append("    countRedOver2: ").append(toIndentedString(countRedOver2)).append("\n");
    sb.append("    countRedUnder1: ").append(toIndentedString(countRedUnder1)).append("\n");
    sb.append("    countRedOver1: ").append(toIndentedString(countRedOver1)).append("\n");
    sb.append("    moreOdd: ").append(toIndentedString(moreOdd)).append("\n");
    sb.append("    moreEven: ").append(toIndentedString(moreEven)).append("\n");
    sb.append("    sumOdd: ").append(toIndentedString(sumOdd)).append("\n");
    sb.append("    sumEven: ").append(toIndentedString(sumEven)).append("\n");
    sb.append("    firstBallOdd: ").append(toIndentedString(firstBallOdd)).append("\n");
    sb.append("    firstBallEven: ").append(toIndentedString(firstBallEven)).append("\n");
    sb.append("    lastBallOdd: ").append(toIndentedString(lastBallOdd)).append("\n");
    sb.append("    lastBallEven: ").append(toIndentedString(lastBallEven)).append("\n");
    sb.append("    firstTwoBallsOdd: ").append(toIndentedString(firstTwoBallsOdd)).append("\n");
    sb.append("    firstTwoBallsEven: ").append(toIndentedString(firstTwoBallsEven)).append("\n");
    sb.append("    firstOddAndSecondEven: ").append(toIndentedString(firstOddAndSecondEven)).append("\n");
    sb.append("    firstEvenAndSecondOdd: ").append(toIndentedString(firstEvenAndSecondOdd)).append("\n");
    sb.append("    firstOddAndLastEven: ").append(toIndentedString(firstOddAndLastEven)).append("\n");
    sb.append("    firstEvenAndLastOdd: ").append(toIndentedString(firstEvenAndLastOdd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

