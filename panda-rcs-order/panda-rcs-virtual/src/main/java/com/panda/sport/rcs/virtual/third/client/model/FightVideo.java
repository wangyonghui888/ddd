/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.FightVideoHappening;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This class encapsulates all the necessary fight slot information 
 */
@ApiModel(description = "This class encapsulates all the necessary fight slot information ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class FightVideo {
  @SerializedName("mediaId")
  private String mediaId = null;

  @SerializedName("playerBId")
  private String playerBId = null;

  @SerializedName("playerWId")
  private String playerWId = null;

  /**
   * VideoSlot Type; HS &#x3D; It is an introduction slots. In it the fighters greet each other to start the fight WB &#x3D; This type indicates that in the slot the black fighter will win by points WW &#x3D; WW &#x3D; This type indicates that in the slot the white fighter will win by points WD &#x3D; There is a point draw in slot KB &#x3D;This type indicates that in the slot the black fighter will win by KO KW &#x3D; This type indicates that in the slot the white fighter will win by KO SB &#x3D; This type indicates that the slot is a video replay KO type of black participant. This slot is preceded by a KO slot, that is, the video replay always refers to a KO SW &#x3D; This type indicates that the slot is a video replay KO type of white participant. This slot is preceded by a KO slot, that is, the video replay always refers to a KO 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HS("HS"),
    
    WB("WB"),
    
    WW("WW"),
    
    WD("WD"),
    
    KB("KB"),
    
    KW("KW"),
    
    SB("SB"),
    
    SW("SW");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("duration")
  private Float duration = null;

  @SerializedName("scoreB")
  private Integer scoreB = null;

  @SerializedName("scoreW")
  private Integer scoreW = null;

  @SerializedName("videoHappening")
  private List<FightVideoHappening> videoHappening = null;

  public FightVideo mediaId(String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

   /**
   * Multimedia resource identifier associated with the OCV or HLS to be used in the ingame. This attribute will be used to generate the OCV or HLS video url. For OCV, this identifier is the same for both video and voice-over 
   * @return mediaId
  **/
  @ApiModelProperty(value = "Multimedia resource identifier associated with the OCV or HLS to be used in the ingame. This attribute will be used to generate the OCV or HLS video url. For OCV, this identifier is the same for both video and voice-over ")
  public String getMediaId() {
    return mediaId;
  }

  public void setMediaId(String mediaId) {
    this.mediaId = mediaId;
  }

  public FightVideo playerBId(String playerBId) {
    this.playerBId = playerBId;
    return this;
  }

   /**
   * Numerical identifier representing the black fighter. Always has 2 digits 
   * @return playerBId
  **/
  @ApiModelProperty(value = "Numerical identifier representing the black fighter. Always has 2 digits ")
  public String getPlayerBId() {
    return playerBId;
  }

  public void setPlayerBId(String playerBId) {
    this.playerBId = playerBId;
  }

  public FightVideo playerWId(String playerWId) {
    this.playerWId = playerWId;
    return this;
  }

   /**
   * Numerical identifier representing the white fighter. Always has 2 digits 
   * @return playerWId
  **/
  @ApiModelProperty(value = "Numerical identifier representing the white fighter. Always has 2 digits ")
  public String getPlayerWId() {
    return playerWId;
  }

  public void setPlayerWId(String playerWId) {
    this.playerWId = playerWId;
  }

  public FightVideo type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * VideoSlot Type; HS &#x3D; It is an introduction slots. In it the fighters greet each other to start the fight WB &#x3D; This type indicates that in the slot the black fighter will win by points WW &#x3D; WW &#x3D; This type indicates that in the slot the white fighter will win by points WD &#x3D; There is a point draw in slot KB &#x3D;This type indicates that in the slot the black fighter will win by KO KW &#x3D; This type indicates that in the slot the white fighter will win by KO SB &#x3D; This type indicates that the slot is a video replay KO type of black participant. This slot is preceded by a KO slot, that is, the video replay always refers to a KO SW &#x3D; This type indicates that the slot is a video replay KO type of white participant. This slot is preceded by a KO slot, that is, the video replay always refers to a KO 
   * @return type
  **/
  @ApiModelProperty(value = "VideoSlot Type; HS = It is an introduction slots. In it the fighters greet each other to start the fight WB = This type indicates that in the slot the black fighter will win by points WW = WW = This type indicates that in the slot the white fighter will win by points WD = There is a point draw in slot KB =This type indicates that in the slot the black fighter will win by KO KW = This type indicates that in the slot the white fighter will win by KO SB = This type indicates that the slot is a video replay KO type of black participant. This slot is preceded by a KO slot, that is, the video replay always refers to a KO SW = This type indicates that the slot is a video replay KO type of white participant. This slot is preceded by a KO slot, that is, the video replay always refers to a KO ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FightVideo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Sequence Identifier Each type of slot has different sequences to generate more variety 
   * @return id
  **/
  @ApiModelProperty(value = "Sequence Identifier Each type of slot has different sequences to generate more variety ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public FightVideo duration(Float duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Actual duration (in seconds) of the sequence 
   * @return duration
  **/
  @ApiModelProperty(value = "Actual duration (in seconds) of the sequence ")
  public Float getDuration() {
    return duration;
  }

  public void setDuration(Float duration) {
    this.duration = duration;
  }

  public FightVideo scoreB(Integer scoreB) {
    this.scoreB = scoreB;
    return this;
  }

   /**
   * Total score of the black player in the sequence. It is the sum of the score of all happenings concerning the black player. For slots of type HS and SB, this value will be null 
   * @return scoreB
  **/
  @ApiModelProperty(value = "Total score of the black player in the sequence. It is the sum of the score of all happenings concerning the black player. For slots of type HS and SB, this value will be null ")
  public Integer getScoreB() {
    return scoreB;
  }

  public void setScoreB(Integer scoreB) {
    this.scoreB = scoreB;
  }

  public FightVideo scoreW(Integer scoreW) {
    this.scoreW = scoreW;
    return this;
  }

   /**
   * Total score of the white player in the sequence. It is the sum of the score of all happenings concerning the white player. For slots of type HS and SW, this value will be null 
   * @return scoreW
  **/
  @ApiModelProperty(value = "Total score of the white player in the sequence. It is the sum of the score of all happenings concerning the white player. For slots of type HS and SW, this value will be null ")
  public Integer getScoreW() {
    return scoreW;
  }

  public void setScoreW(Integer scoreW) {
    this.scoreW = scoreW;
  }

  public FightVideo videoHappening(List<FightVideoHappening> videoHappening) {
    this.videoHappening = videoHappening;
    return this;
  }

  public FightVideo addVideoHappeningItem(FightVideoHappening videoHappeningItem) {
    if (this.videoHappening == null) {
      this.videoHappening = new ArrayList<FightVideoHappening>();
    }
    this.videoHappening.add(videoHappeningItem);
    return this;
  }

   /**
   * Array that stores all the events that happen in the slot. For slots of type HS, SB and SW, this value will be null 
   * @return videoHappening
  **/
  @ApiModelProperty(value = "Array that stores all the events that happen in the slot. For slots of type HS, SB and SW, this value will be null ")
  public List<FightVideoHappening> getVideoHappening() {
    return videoHappening;
  }

  public void setVideoHappening(List<FightVideoHappening> videoHappening) {
    this.videoHappening = videoHappening;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FightVideo fightVideo = (FightVideo) o;
    return Objects.equals(this.mediaId, fightVideo.mediaId) &&
        Objects.equals(this.playerBId, fightVideo.playerBId) &&
        Objects.equals(this.playerWId, fightVideo.playerWId) &&
        Objects.equals(this.type, fightVideo.type) &&
        Objects.equals(this.id, fightVideo.id) &&
        Objects.equals(this.duration, fightVideo.duration) &&
        Objects.equals(this.scoreB, fightVideo.scoreB) &&
        Objects.equals(this.scoreW, fightVideo.scoreW) &&
        Objects.equals(this.videoHappening, fightVideo.videoHappening);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaId, playerBId, playerWId, type, id, duration, scoreB, scoreW, videoHappening);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FightVideo {\n");
    
    sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
    sb.append("    playerBId: ").append(toIndentedString(playerBId)).append("\n");
    sb.append("    playerWId: ").append(toIndentedString(playerWId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    scoreB: ").append(toIndentedString(scoreB)).append("\n");
    sb.append("    scoreW: ").append(toIndentedString(scoreW)).append("\n");
    sb.append("    videoHappening: ").append(toIndentedString(videoHappening)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

