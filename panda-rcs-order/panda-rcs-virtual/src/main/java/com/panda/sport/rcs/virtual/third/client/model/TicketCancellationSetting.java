/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ticket Cancellation Settings 
 */
@ApiModel(description = "Ticket Cancellation Settings ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class TicketCancellationSetting {
  @SerializedName("cancellationEnabled")
  private Boolean cancellationEnabled = null;

  @SerializedName("sameDayCancel")
  private Boolean sameDayCancel = null;

  @SerializedName("maximumCancellationTime")
  private Integer maximumCancellationTime = null;

  @SerializedName("maximumNumberTicketCancelled")
  private Integer maximumNumberTicketCancelled = null;

  /**
   * | Ways of cancellation | Description                                                  | | -------------------- | ------------------------------------------------------------ | | NATURAL              | Checks if the number of tickets cancelled in period (now - *total minutes allowed*,  now) is greater than *Maximum number of tickets cancelled* | | FROM_NOW_TO_THE_LAST | A ticket can be cancelled only if it is cancelled after the period (last cancelled ticket,  last cancelled ticket + *total minutes allowed*) | [^total minutes allowed]: minutes in *Number of days* (D) plus minutes in *Number of hours* (H) plus *Number of minutes* (M). E.g. if D&#x3D;1, H&#x3D;0 or empty and M&#x3D;0 or empty then *total minutes allowed* equals 1440 minutes (minutes in a day) 
   */
  @JsonAdapter(CancellationModeEnum.Adapter.class)
  public enum CancellationModeEnum {
    NATURAL("NATURAL"),
    
    FROM_NOW_TO_THE_LAST("FROM_NOW_TO_THE_LAST");

    private String value;

    CancellationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CancellationModeEnum fromValue(String text) {
      for (CancellationModeEnum b : CancellationModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CancellationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CancellationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CancellationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CancellationModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cancellationMode")
  private CancellationModeEnum cancellationMode = null;

  @SerializedName("days")
  private Integer days = null;

  @SerializedName("hours")
  private Integer hours = null;

  @SerializedName("minutes")
  private Integer minutes = null;

  public TicketCancellationSetting cancellationEnabled(Boolean cancellationEnabled) {
    this.cancellationEnabled = cancellationEnabled;
    return this;
  }

   /**
   * The cancellation setting is enable 
   * @return cancellationEnabled
  **/
  @ApiModelProperty(value = "The cancellation setting is enable ")
  public Boolean isCancellationEnabled() {
    return cancellationEnabled;
  }

  public void setCancellationEnabled(Boolean cancellationEnabled) {
    this.cancellationEnabled = cancellationEnabled;
  }

  public TicketCancellationSetting sameDayCancel(Boolean sameDayCancel) {
    this.sameDayCancel = sameDayCancel;
    return this;
  }

   /**
   * Cancellation is enable in the same day 
   * @return sameDayCancel
  **/
  @ApiModelProperty(value = "Cancellation is enable in the same day ")
  public Boolean isSameDayCancel() {
    return sameDayCancel;
  }

  public void setSameDayCancel(Boolean sameDayCancel) {
    this.sameDayCancel = sameDayCancel;
  }

  public TicketCancellationSetting maximumCancellationTime(Integer maximumCancellationTime) {
    this.maximumCancellationTime = maximumCancellationTime;
    return this;
  }

   /**
   * Maximum number of seconds within which a ticket can be cancelled since the ticket is created 
   * minimum: 0
   * @return maximumCancellationTime
  **/
  @ApiModelProperty(value = "Maximum number of seconds within which a ticket can be cancelled since the ticket is created ")
  public Integer getMaximumCancellationTime() {
    return maximumCancellationTime;
  }

  public void setMaximumCancellationTime(Integer maximumCancellationTime) {
    this.maximumCancellationTime = maximumCancellationTime;
  }

  public TicketCancellationSetting maximumNumberTicketCancelled(Integer maximumNumberTicketCancelled) {
    this.maximumNumberTicketCancelled = maximumNumberTicketCancelled;
    return this;
  }

   /**
   * Maximum number of tickets that can be cancelled since the ticket is created. 0 means infinite number 
   * minimum: 0
   * @return maximumNumberTicketCancelled
  **/
  @ApiModelProperty(value = "Maximum number of tickets that can be cancelled since the ticket is created. 0 means infinite number ")
  public Integer getMaximumNumberTicketCancelled() {
    return maximumNumberTicketCancelled;
  }

  public void setMaximumNumberTicketCancelled(Integer maximumNumberTicketCancelled) {
    this.maximumNumberTicketCancelled = maximumNumberTicketCancelled;
  }

  public TicketCancellationSetting cancellationMode(CancellationModeEnum cancellationMode) {
    this.cancellationMode = cancellationMode;
    return this;
  }

   /**
   * | Ways of cancellation | Description                                                  | | -------------------- | ------------------------------------------------------------ | | NATURAL              | Checks if the number of tickets cancelled in period (now - *total minutes allowed*,  now) is greater than *Maximum number of tickets cancelled* | | FROM_NOW_TO_THE_LAST | A ticket can be cancelled only if it is cancelled after the period (last cancelled ticket,  last cancelled ticket + *total minutes allowed*) | [^total minutes allowed]: minutes in *Number of days* (D) plus minutes in *Number of hours* (H) plus *Number of minutes* (M). E.g. if D&#x3D;1, H&#x3D;0 or empty and M&#x3D;0 or empty then *total minutes allowed* equals 1440 minutes (minutes in a day) 
   * @return cancellationMode
  **/
  @ApiModelProperty(value = "| Ways of cancellation | Description                                                  | | -------------------- | ------------------------------------------------------------ | | NATURAL              | Checks if the number of tickets cancelled in period (now - *total minutes allowed*,  now) is greater than *Maximum number of tickets cancelled* | | FROM_NOW_TO_THE_LAST | A ticket can be cancelled only if it is cancelled after the period (last cancelled ticket,  last cancelled ticket + *total minutes allowed*) | [^total minutes allowed]: minutes in *Number of days* (D) plus minutes in *Number of hours* (H) plus *Number of minutes* (M). E.g. if D=1, H=0 or empty and M=0 or empty then *total minutes allowed* equals 1440 minutes (minutes in a day) ")
  public CancellationModeEnum getCancellationMode() {
    return cancellationMode;
  }

  public void setCancellationMode(CancellationModeEnum cancellationMode) {
    this.cancellationMode = cancellationMode;
  }

  public TicketCancellationSetting days(Integer days) {
    this.days = days;
    return this;
  }

   /**
   * From 0 to 6. Use alongside Cancellation Mode and Maximum number of tickets cancelled. See Cancellation Mode description 
   * minimum: 0
   * maximum: 6
   * @return days
  **/
  @ApiModelProperty(value = "From 0 to 6. Use alongside Cancellation Mode and Maximum number of tickets cancelled. See Cancellation Mode description ")
  public Integer getDays() {
    return days;
  }

  public void setDays(Integer days) {
    this.days = days;
  }

  public TicketCancellationSetting hours(Integer hours) {
    this.hours = hours;
    return this;
  }

   /**
   * From 0 to 23. Use alongside Cancellation Mode and Maximum number of tickets cancelled. See Cancellation Mode description 
   * minimum: 0
   * maximum: 23
   * @return hours
  **/
  @ApiModelProperty(value = "From 0 to 23. Use alongside Cancellation Mode and Maximum number of tickets cancelled. See Cancellation Mode description ")
  public Integer getHours() {
    return hours;
  }

  public void setHours(Integer hours) {
    this.hours = hours;
  }

  public TicketCancellationSetting minutes(Integer minutes) {
    this.minutes = minutes;
    return this;
  }

   /**
   * From 0 to 59. Use alongside Cancellation Mode and Maximum number of tickets cancelled. See Cancellation Mode description 
   * minimum: 0
   * maximum: 59
   * @return minutes
  **/
  @ApiModelProperty(value = "From 0 to 59. Use alongside Cancellation Mode and Maximum number of tickets cancelled. See Cancellation Mode description ")
  public Integer getMinutes() {
    return minutes;
  }

  public void setMinutes(Integer minutes) {
    this.minutes = minutes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketCancellationSetting ticketCancellationSetting = (TicketCancellationSetting) o;
    return Objects.equals(this.cancellationEnabled, ticketCancellationSetting.cancellationEnabled) &&
        Objects.equals(this.sameDayCancel, ticketCancellationSetting.sameDayCancel) &&
        Objects.equals(this.maximumCancellationTime, ticketCancellationSetting.maximumCancellationTime) &&
        Objects.equals(this.maximumNumberTicketCancelled, ticketCancellationSetting.maximumNumberTicketCancelled) &&
        Objects.equals(this.cancellationMode, ticketCancellationSetting.cancellationMode) &&
        Objects.equals(this.days, ticketCancellationSetting.days) &&
        Objects.equals(this.hours, ticketCancellationSetting.hours) &&
        Objects.equals(this.minutes, ticketCancellationSetting.minutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationEnabled, sameDayCancel, maximumCancellationTime, maximumNumberTicketCancelled, cancellationMode, days, hours, minutes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketCancellationSetting {\n");
    
    sb.append("    cancellationEnabled: ").append(toIndentedString(cancellationEnabled)).append("\n");
    sb.append("    sameDayCancel: ").append(toIndentedString(sameDayCancel)).append("\n");
    sb.append("    maximumCancellationTime: ").append(toIndentedString(maximumCancellationTime)).append("\n");
    sb.append("    maximumNumberTicketCancelled: ").append(toIndentedString(maximumNumberTicketCancelled)).append("\n");
    sb.append("    cancellationMode: ").append(toIndentedString(cancellationMode)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

