/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.ChMatchStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a team stats
 */
@ApiModel(description = "Represents a team stats")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ChTeamStat {
  @SerializedName("homeMatches")
  private Integer homeMatches = null;

  @SerializedName("awayMatches")
  private Integer awayMatches = null;

  @SerializedName("wonHome")
  private Integer wonHome = null;

  @SerializedName("wonAway")
  private Integer wonAway = null;

  @SerializedName("drawHome")
  private Integer drawHome = null;

  @SerializedName("drawAway")
  private Integer drawAway = null;

  @SerializedName("lostHome")
  private Integer lostHome = null;

  @SerializedName("lostAway")
  private Integer lostAway = null;

  @SerializedName("wonPerc")
  private Double wonPerc = null;

  @SerializedName("wonHomePerc")
  private Double wonHomePerc = null;

  @SerializedName("wonAwayPerc")
  private Double wonAwayPerc = null;

  @SerializedName("drawPerc")
  private Double drawPerc = null;

  @SerializedName("drawHomePerc")
  private Double drawHomePerc = null;

  @SerializedName("drawAwayPerc")
  private Double drawAwayPerc = null;

  @SerializedName("lostPerc")
  private Double lostPerc = null;

  @SerializedName("lostHomePerc")
  private Double lostHomePerc = null;

  @SerializedName("lostAwayPerc")
  private Double lostAwayPerc = null;

  @SerializedName("goalsForHome")
  private Integer goalsForHome = null;

  @SerializedName("goalsForAway")
  private Integer goalsForAway = null;

  @SerializedName("goalsForPerMatch")
  private Double goalsForPerMatch = null;

  @SerializedName("goalsForPerMatchHome")
  private Double goalsForPerMatchHome = null;

  @SerializedName("goalsForPerMatchAway")
  private Double goalsForPerMatchAway = null;

  @SerializedName("goalsAgainstHome")
  private Integer goalsAgainstHome = null;

  @SerializedName("goalsAgainstAway")
  private Integer goalsAgainstAway = null;

  @SerializedName("goalsAgainstPerMatch")
  private Double goalsAgainstPerMatch = null;

  @SerializedName("goalsAgainstPerMatchHome")
  private Double goalsAgainstPerMatchHome = null;

  @SerializedName("goalsAgainstPerMatchAway")
  private Double goalsAgainstPerMatchAway = null;

  @SerializedName("lastResults")
  private List<ChMatchStatus> lastResults = null;

  public ChTeamStat homeMatches(Integer homeMatches) {
    this.homeMatches = homeMatches;
    return this;
  }

   /**
   * Total of matches played home
   * @return homeMatches
  **/
  @ApiModelProperty(value = "Total of matches played home")
  public Integer getHomeMatches() {
    return homeMatches;
  }

  public void setHomeMatches(Integer homeMatches) {
    this.homeMatches = homeMatches;
  }

  public ChTeamStat awayMatches(Integer awayMatches) {
    this.awayMatches = awayMatches;
    return this;
  }

   /**
   * Total of matches played away
   * @return awayMatches
  **/
  @ApiModelProperty(value = "Total of matches played away")
  public Integer getAwayMatches() {
    return awayMatches;
  }

  public void setAwayMatches(Integer awayMatches) {
    this.awayMatches = awayMatches;
  }

  public ChTeamStat wonHome(Integer wonHome) {
    this.wonHome = wonHome;
    return this;
  }

   /**
   * Total of matches won home.
   * @return wonHome
  **/
  @ApiModelProperty(value = "Total of matches won home.")
  public Integer getWonHome() {
    return wonHome;
  }

  public void setWonHome(Integer wonHome) {
    this.wonHome = wonHome;
  }

  public ChTeamStat wonAway(Integer wonAway) {
    this.wonAway = wonAway;
    return this;
  }

   /**
   * Total of matches won away.
   * @return wonAway
  **/
  @ApiModelProperty(value = "Total of matches won away.")
  public Integer getWonAway() {
    return wonAway;
  }

  public void setWonAway(Integer wonAway) {
    this.wonAway = wonAway;
  }

  public ChTeamStat drawHome(Integer drawHome) {
    this.drawHome = drawHome;
    return this;
  }

   /**
   * Total of matches draw home.
   * @return drawHome
  **/
  @ApiModelProperty(value = "Total of matches draw home.")
  public Integer getDrawHome() {
    return drawHome;
  }

  public void setDrawHome(Integer drawHome) {
    this.drawHome = drawHome;
  }

  public ChTeamStat drawAway(Integer drawAway) {
    this.drawAway = drawAway;
    return this;
  }

   /**
   * Total of matches draw away.
   * @return drawAway
  **/
  @ApiModelProperty(value = "Total of matches draw away.")
  public Integer getDrawAway() {
    return drawAway;
  }

  public void setDrawAway(Integer drawAway) {
    this.drawAway = drawAway;
  }

  public ChTeamStat lostHome(Integer lostHome) {
    this.lostHome = lostHome;
    return this;
  }

   /**
   * Total of matches lost home.
   * @return lostHome
  **/
  @ApiModelProperty(value = "Total of matches lost home.")
  public Integer getLostHome() {
    return lostHome;
  }

  public void setLostHome(Integer lostHome) {
    this.lostHome = lostHome;
  }

  public ChTeamStat lostAway(Integer lostAway) {
    this.lostAway = lostAway;
    return this;
  }

   /**
   * Total of matches lost away.
   * @return lostAway
  **/
  @ApiModelProperty(value = "Total of matches lost away.")
  public Integer getLostAway() {
    return lostAway;
  }

  public void setLostAway(Integer lostAway) {
    this.lostAway = lostAway;
  }

  public ChTeamStat wonPerc(Double wonPerc) {
    this.wonPerc = wonPerc;
    return this;
  }

   /**
   * Percentage of matches won. Calculated from the total of played matches.
   * @return wonPerc
  **/
  @ApiModelProperty(value = "Percentage of matches won. Calculated from the total of played matches.")
  public Double getWonPerc() {
    return wonPerc;
  }

  public void setWonPerc(Double wonPerc) {
    this.wonPerc = wonPerc;
  }

  public ChTeamStat wonHomePerc(Double wonHomePerc) {
    this.wonHomePerc = wonHomePerc;
    return this;
  }

   /**
   * Percentage of matches won. Calculated from the total of matches played at home.
   * @return wonHomePerc
  **/
  @ApiModelProperty(value = "Percentage of matches won. Calculated from the total of matches played at home.")
  public Double getWonHomePerc() {
    return wonHomePerc;
  }

  public void setWonHomePerc(Double wonHomePerc) {
    this.wonHomePerc = wonHomePerc;
  }

  public ChTeamStat wonAwayPerc(Double wonAwayPerc) {
    this.wonAwayPerc = wonAwayPerc;
    return this;
  }

   /**
   * Percentage of matches won. Calculated from the total of matches played away.
   * @return wonAwayPerc
  **/
  @ApiModelProperty(value = "Percentage of matches won. Calculated from the total of matches played away.")
  public Double getWonAwayPerc() {
    return wonAwayPerc;
  }

  public void setWonAwayPerc(Double wonAwayPerc) {
    this.wonAwayPerc = wonAwayPerc;
  }

  public ChTeamStat drawPerc(Double drawPerc) {
    this.drawPerc = drawPerc;
    return this;
  }

   /**
   * Percentage of matches draw. Calculated from the total of played matches.
   * @return drawPerc
  **/
  @ApiModelProperty(value = "Percentage of matches draw. Calculated from the total of played matches.")
  public Double getDrawPerc() {
    return drawPerc;
  }

  public void setDrawPerc(Double drawPerc) {
    this.drawPerc = drawPerc;
  }

  public ChTeamStat drawHomePerc(Double drawHomePerc) {
    this.drawHomePerc = drawHomePerc;
    return this;
  }

   /**
   * Percentage of matches draw. Calculated from the total of matches played at home.
   * @return drawHomePerc
  **/
  @ApiModelProperty(value = "Percentage of matches draw. Calculated from the total of matches played at home.")
  public Double getDrawHomePerc() {
    return drawHomePerc;
  }

  public void setDrawHomePerc(Double drawHomePerc) {
    this.drawHomePerc = drawHomePerc;
  }

  public ChTeamStat drawAwayPerc(Double drawAwayPerc) {
    this.drawAwayPerc = drawAwayPerc;
    return this;
  }

   /**
   * Percentage of matches draw. Calculated from the total of matches played away.
   * @return drawAwayPerc
  **/
  @ApiModelProperty(value = "Percentage of matches draw. Calculated from the total of matches played away.")
  public Double getDrawAwayPerc() {
    return drawAwayPerc;
  }

  public void setDrawAwayPerc(Double drawAwayPerc) {
    this.drawAwayPerc = drawAwayPerc;
  }

  public ChTeamStat lostPerc(Double lostPerc) {
    this.lostPerc = lostPerc;
    return this;
  }

   /**
   * Percentage of matches lost. Calculated from the total of played matches.
   * @return lostPerc
  **/
  @ApiModelProperty(value = "Percentage of matches lost. Calculated from the total of played matches.")
  public Double getLostPerc() {
    return lostPerc;
  }

  public void setLostPerc(Double lostPerc) {
    this.lostPerc = lostPerc;
  }

  public ChTeamStat lostHomePerc(Double lostHomePerc) {
    this.lostHomePerc = lostHomePerc;
    return this;
  }

   /**
   * Percentage of matches lost. Calculated from the total of matches played at home.
   * @return lostHomePerc
  **/
  @ApiModelProperty(value = "Percentage of matches lost. Calculated from the total of matches played at home.")
  public Double getLostHomePerc() {
    return lostHomePerc;
  }

  public void setLostHomePerc(Double lostHomePerc) {
    this.lostHomePerc = lostHomePerc;
  }

  public ChTeamStat lostAwayPerc(Double lostAwayPerc) {
    this.lostAwayPerc = lostAwayPerc;
    return this;
  }

   /**
   * Percentage of matches lost. Calculated from the total of matches played away.
   * @return lostAwayPerc
  **/
  @ApiModelProperty(value = "Percentage of matches lost. Calculated from the total of matches played away.")
  public Double getLostAwayPerc() {
    return lostAwayPerc;
  }

  public void setLostAwayPerc(Double lostAwayPerc) {
    this.lostAwayPerc = lostAwayPerc;
  }

  public ChTeamStat goalsForHome(Integer goalsForHome) {
    this.goalsForHome = goalsForHome;
    return this;
  }

   /**
   * The total of goals scored home. Calculated from the matches played at home.
   * @return goalsForHome
  **/
  @ApiModelProperty(value = "The total of goals scored home. Calculated from the matches played at home.")
  public Integer getGoalsForHome() {
    return goalsForHome;
  }

  public void setGoalsForHome(Integer goalsForHome) {
    this.goalsForHome = goalsForHome;
  }

  public ChTeamStat goalsForAway(Integer goalsForAway) {
    this.goalsForAway = goalsForAway;
    return this;
  }

   /**
   * The total of goals scored home. Calculated from the matches played away.
   * @return goalsForAway
  **/
  @ApiModelProperty(value = "The total of goals scored home. Calculated from the matches played away.")
  public Integer getGoalsForAway() {
    return goalsForAway;
  }

  public void setGoalsForAway(Integer goalsForAway) {
    this.goalsForAway = goalsForAway;
  }

  public ChTeamStat goalsForPerMatch(Double goalsForPerMatch) {
    this.goalsForPerMatch = goalsForPerMatch;
    return this;
  }

   /**
   * The average of goals scored by match. Calculated from total of matches played
   * @return goalsForPerMatch
  **/
  @ApiModelProperty(value = "The average of goals scored by match. Calculated from total of matches played")
  public Double getGoalsForPerMatch() {
    return goalsForPerMatch;
  }

  public void setGoalsForPerMatch(Double goalsForPerMatch) {
    this.goalsForPerMatch = goalsForPerMatch;
  }

  public ChTeamStat goalsForPerMatchHome(Double goalsForPerMatchHome) {
    this.goalsForPerMatchHome = goalsForPerMatchHome;
    return this;
  }

   /**
   * The average of goals scored by match home. Calculated from matches played home
   * @return goalsForPerMatchHome
  **/
  @ApiModelProperty(value = "The average of goals scored by match home. Calculated from matches played home")
  public Double getGoalsForPerMatchHome() {
    return goalsForPerMatchHome;
  }

  public void setGoalsForPerMatchHome(Double goalsForPerMatchHome) {
    this.goalsForPerMatchHome = goalsForPerMatchHome;
  }

  public ChTeamStat goalsForPerMatchAway(Double goalsForPerMatchAway) {
    this.goalsForPerMatchAway = goalsForPerMatchAway;
    return this;
  }

   /**
   * The average of goals scored by match away. Calculated from matches played away
   * @return goalsForPerMatchAway
  **/
  @ApiModelProperty(value = "The average of goals scored by match away. Calculated from matches played away")
  public Double getGoalsForPerMatchAway() {
    return goalsForPerMatchAway;
  }

  public void setGoalsForPerMatchAway(Double goalsForPerMatchAway) {
    this.goalsForPerMatchAway = goalsForPerMatchAway;
  }

  public ChTeamStat goalsAgainstHome(Integer goalsAgainstHome) {
    this.goalsAgainstHome = goalsAgainstHome;
    return this;
  }

   /**
   * The total of goals conceded home. Calculated from the matches played at home.
   * @return goalsAgainstHome
  **/
  @ApiModelProperty(value = "The total of goals conceded home. Calculated from the matches played at home.")
  public Integer getGoalsAgainstHome() {
    return goalsAgainstHome;
  }

  public void setGoalsAgainstHome(Integer goalsAgainstHome) {
    this.goalsAgainstHome = goalsAgainstHome;
  }

  public ChTeamStat goalsAgainstAway(Integer goalsAgainstAway) {
    this.goalsAgainstAway = goalsAgainstAway;
    return this;
  }

   /**
   * The total of goals conceded home. Calculated from the matches played away.
   * @return goalsAgainstAway
  **/
  @ApiModelProperty(value = "The total of goals conceded home. Calculated from the matches played away.")
  public Integer getGoalsAgainstAway() {
    return goalsAgainstAway;
  }

  public void setGoalsAgainstAway(Integer goalsAgainstAway) {
    this.goalsAgainstAway = goalsAgainstAway;
  }

  public ChTeamStat goalsAgainstPerMatch(Double goalsAgainstPerMatch) {
    this.goalsAgainstPerMatch = goalsAgainstPerMatch;
    return this;
  }

   /**
   * The average of goals conceded by match. Calculated from total of matches played
   * @return goalsAgainstPerMatch
  **/
  @ApiModelProperty(value = "The average of goals conceded by match. Calculated from total of matches played")
  public Double getGoalsAgainstPerMatch() {
    return goalsAgainstPerMatch;
  }

  public void setGoalsAgainstPerMatch(Double goalsAgainstPerMatch) {
    this.goalsAgainstPerMatch = goalsAgainstPerMatch;
  }

  public ChTeamStat goalsAgainstPerMatchHome(Double goalsAgainstPerMatchHome) {
    this.goalsAgainstPerMatchHome = goalsAgainstPerMatchHome;
    return this;
  }

   /**
   * The average of goals conceded by match home. Calculated from matches played home
   * @return goalsAgainstPerMatchHome
  **/
  @ApiModelProperty(value = "The average of goals conceded by match home. Calculated from matches played home")
  public Double getGoalsAgainstPerMatchHome() {
    return goalsAgainstPerMatchHome;
  }

  public void setGoalsAgainstPerMatchHome(Double goalsAgainstPerMatchHome) {
    this.goalsAgainstPerMatchHome = goalsAgainstPerMatchHome;
  }

  public ChTeamStat goalsAgainstPerMatchAway(Double goalsAgainstPerMatchAway) {
    this.goalsAgainstPerMatchAway = goalsAgainstPerMatchAway;
    return this;
  }

   /**
   * The average of goals conceded by match away. Calculated from matches played away
   * @return goalsAgainstPerMatchAway
  **/
  @ApiModelProperty(value = "The average of goals conceded by match away. Calculated from matches played away")
  public Double getGoalsAgainstPerMatchAway() {
    return goalsAgainstPerMatchAway;
  }

  public void setGoalsAgainstPerMatchAway(Double goalsAgainstPerMatchAway) {
    this.goalsAgainstPerMatchAway = goalsAgainstPerMatchAway;
  }

  public ChTeamStat lastResults(List<ChMatchStatus> lastResults) {
    this.lastResults = lastResults;
    return this;
  }

  public ChTeamStat addLastResultsItem(ChMatchStatus lastResultsItem) {
    if (this.lastResults == null) {
      this.lastResults = new ArrayList<ChMatchStatus>();
    }
    this.lastResults.add(lastResultsItem);
    return this;
  }

   /**
   * Last 10 results
   * @return lastResults
  **/
  @ApiModelProperty(value = "Last 10 results")
  public List<ChMatchStatus> getLastResults() {
    return lastResults;
  }

  public void setLastResults(List<ChMatchStatus> lastResults) {
    this.lastResults = lastResults;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChTeamStat chTeamStat = (ChTeamStat) o;
    return Objects.equals(this.homeMatches, chTeamStat.homeMatches) &&
        Objects.equals(this.awayMatches, chTeamStat.awayMatches) &&
        Objects.equals(this.wonHome, chTeamStat.wonHome) &&
        Objects.equals(this.wonAway, chTeamStat.wonAway) &&
        Objects.equals(this.drawHome, chTeamStat.drawHome) &&
        Objects.equals(this.drawAway, chTeamStat.drawAway) &&
        Objects.equals(this.lostHome, chTeamStat.lostHome) &&
        Objects.equals(this.lostAway, chTeamStat.lostAway) &&
        Objects.equals(this.wonPerc, chTeamStat.wonPerc) &&
        Objects.equals(this.wonHomePerc, chTeamStat.wonHomePerc) &&
        Objects.equals(this.wonAwayPerc, chTeamStat.wonAwayPerc) &&
        Objects.equals(this.drawPerc, chTeamStat.drawPerc) &&
        Objects.equals(this.drawHomePerc, chTeamStat.drawHomePerc) &&
        Objects.equals(this.drawAwayPerc, chTeamStat.drawAwayPerc) &&
        Objects.equals(this.lostPerc, chTeamStat.lostPerc) &&
        Objects.equals(this.lostHomePerc, chTeamStat.lostHomePerc) &&
        Objects.equals(this.lostAwayPerc, chTeamStat.lostAwayPerc) &&
        Objects.equals(this.goalsForHome, chTeamStat.goalsForHome) &&
        Objects.equals(this.goalsForAway, chTeamStat.goalsForAway) &&
        Objects.equals(this.goalsForPerMatch, chTeamStat.goalsForPerMatch) &&
        Objects.equals(this.goalsForPerMatchHome, chTeamStat.goalsForPerMatchHome) &&
        Objects.equals(this.goalsForPerMatchAway, chTeamStat.goalsForPerMatchAway) &&
        Objects.equals(this.goalsAgainstHome, chTeamStat.goalsAgainstHome) &&
        Objects.equals(this.goalsAgainstAway, chTeamStat.goalsAgainstAway) &&
        Objects.equals(this.goalsAgainstPerMatch, chTeamStat.goalsAgainstPerMatch) &&
        Objects.equals(this.goalsAgainstPerMatchHome, chTeamStat.goalsAgainstPerMatchHome) &&
        Objects.equals(this.goalsAgainstPerMatchAway, chTeamStat.goalsAgainstPerMatchAway) &&
        Objects.equals(this.lastResults, chTeamStat.lastResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homeMatches, awayMatches, wonHome, wonAway, drawHome, drawAway, lostHome, lostAway, wonPerc, wonHomePerc, wonAwayPerc, drawPerc, drawHomePerc, drawAwayPerc, lostPerc, lostHomePerc, lostAwayPerc, goalsForHome, goalsForAway, goalsForPerMatch, goalsForPerMatchHome, goalsForPerMatchAway, goalsAgainstHome, goalsAgainstAway, goalsAgainstPerMatch, goalsAgainstPerMatchHome, goalsAgainstPerMatchAway, lastResults);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChTeamStat {\n");
    
    sb.append("    homeMatches: ").append(toIndentedString(homeMatches)).append("\n");
    sb.append("    awayMatches: ").append(toIndentedString(awayMatches)).append("\n");
    sb.append("    wonHome: ").append(toIndentedString(wonHome)).append("\n");
    sb.append("    wonAway: ").append(toIndentedString(wonAway)).append("\n");
    sb.append("    drawHome: ").append(toIndentedString(drawHome)).append("\n");
    sb.append("    drawAway: ").append(toIndentedString(drawAway)).append("\n");
    sb.append("    lostHome: ").append(toIndentedString(lostHome)).append("\n");
    sb.append("    lostAway: ").append(toIndentedString(lostAway)).append("\n");
    sb.append("    wonPerc: ").append(toIndentedString(wonPerc)).append("\n");
    sb.append("    wonHomePerc: ").append(toIndentedString(wonHomePerc)).append("\n");
    sb.append("    wonAwayPerc: ").append(toIndentedString(wonAwayPerc)).append("\n");
    sb.append("    drawPerc: ").append(toIndentedString(drawPerc)).append("\n");
    sb.append("    drawHomePerc: ").append(toIndentedString(drawHomePerc)).append("\n");
    sb.append("    drawAwayPerc: ").append(toIndentedString(drawAwayPerc)).append("\n");
    sb.append("    lostPerc: ").append(toIndentedString(lostPerc)).append("\n");
    sb.append("    lostHomePerc: ").append(toIndentedString(lostHomePerc)).append("\n");
    sb.append("    lostAwayPerc: ").append(toIndentedString(lostAwayPerc)).append("\n");
    sb.append("    goalsForHome: ").append(toIndentedString(goalsForHome)).append("\n");
    sb.append("    goalsForAway: ").append(toIndentedString(goalsForAway)).append("\n");
    sb.append("    goalsForPerMatch: ").append(toIndentedString(goalsForPerMatch)).append("\n");
    sb.append("    goalsForPerMatchHome: ").append(toIndentedString(goalsForPerMatchHome)).append("\n");
    sb.append("    goalsForPerMatchAway: ").append(toIndentedString(goalsForPerMatchAway)).append("\n");
    sb.append("    goalsAgainstHome: ").append(toIndentedString(goalsAgainstHome)).append("\n");
    sb.append("    goalsAgainstAway: ").append(toIndentedString(goalsAgainstAway)).append("\n");
    sb.append("    goalsAgainstPerMatch: ").append(toIndentedString(goalsAgainstPerMatch)).append("\n");
    sb.append("    goalsAgainstPerMatchHome: ").append(toIndentedString(goalsAgainstPerMatchHome)).append("\n");
    sb.append("    goalsAgainstPerMatchAway: ").append(toIndentedString(goalsAgainstPerMatchAway)).append("\n");
    sb.append("    lastResults: ").append(toIndentedString(lastResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

