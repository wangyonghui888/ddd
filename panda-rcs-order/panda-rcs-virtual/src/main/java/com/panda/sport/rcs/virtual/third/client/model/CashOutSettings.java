/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CashOut odd settings per market 
 */
@ApiModel(description = "CashOut odd settings per market ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class CashOutSettings {
  @SerializedName("key")
  private String key = null;

  @SerializedName("cashOutCommission")
  private Double cashOutCommission = null;

  public CashOutSettings key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @ApiModelProperty(value = "")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public CashOutSettings cashOutCommission(Double cashOutCommission) {
    this.cashOutCommission = cashOutCommission;
    return this;
  }

   /**
   * Commission percentage for cashout options offered to the player from 0% to 15%. If 0 is selected, the final RTP for the action would be the original RTP offered in the initial stake. This cash out commission, would suppose an additional factor to original market RTP in case the player choose for cashout options. 
   * minimum: 0
   * maximum: 15
   * @return cashOutCommission
  **/
  @ApiModelProperty(value = "Commission percentage for cashout options offered to the player from 0% to 15%. If 0 is selected, the final RTP for the action would be the original RTP offered in the initial stake. This cash out commission, would suppose an additional factor to original market RTP in case the player choose for cashout options. ")
  public Double getCashOutCommission() {
    return cashOutCommission;
  }

  public void setCashOutCommission(Double cashOutCommission) {
    this.cashOutCommission = cashOutCommission;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashOutSettings cashOutSettings = (CashOutSettings) o;
    return Objects.equals(this.key, cashOutSettings.key) &&
        Objects.equals(this.cashOutCommission, cashOutSettings.cashOutCommission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, cashOutCommission);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashOutSettings {\n");
    
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    cashOutCommission: ").append(toIndentedString(cashOutCommission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

