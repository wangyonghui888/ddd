/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.ChQualifyNativeMarket;
import com.panda.sport.rcs.virtual.third.client.model.EvData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Internal event data for football competition 
 */
@ApiModel(description = "Internal event data for football competition ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class EvDataChampion extends EvData {
  @SerializedName("homeTeamId")
  private String homeTeamId = null;

  @SerializedName("awayTeamId")
  private String awayTeamId = null;

  @SerializedName("legOrder")
  private Integer legOrder = null;

  @SerializedName("prevResults")
  private List<String> prevResults = null;

  @SerializedName("qualifyProbs")
  private List<ChQualifyNativeMarket> qualifyProbs = null;

  @SerializedName("teamIds")
  private List<String> teamIds = null;

  @SerializedName("matchOrder")
  private Integer matchOrder = null;

  /**
   * phase of the event block
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    GROUPS("GROUPS"),
    
    KNOCKOUTS("KNOCKOUTS");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String text) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PhaseEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("phase")
  private PhaseEnum phase = null;

  public EvDataChampion homeTeamId(String homeTeamId) {
    this.homeTeamId = homeTeamId;
    return this;
  }

   /**
   * ID of home team
   * @return homeTeamId
  **/
  @ApiModelProperty(value = "ID of home team")
  public String getHomeTeamId() {
    return homeTeamId;
  }

  public void setHomeTeamId(String homeTeamId) {
    this.homeTeamId = homeTeamId;
  }

  public EvDataChampion awayTeamId(String awayTeamId) {
    this.awayTeamId = awayTeamId;
    return this;
  }

   /**
   * ID of away team
   * @return awayTeamId
  **/
  @ApiModelProperty(value = "ID of away team")
  public String getAwayTeamId() {
    return awayTeamId;
  }

  public void setAwayTeamId(String awayTeamId) {
    this.awayTeamId = awayTeamId;
  }

  public EvDataChampion legOrder(Integer legOrder) {
    this.legOrder = legOrder;
    return this;
  }

   /**
   * Match leg (When 1 means First Leg, when 2 means Second Leg)
   * @return legOrder
  **/
  @ApiModelProperty(value = "Match leg (When 1 means First Leg, when 2 means Second Leg)")
  public Integer getLegOrder() {
    return legOrder;
  }

  public void setLegOrder(Integer legOrder) {
    this.legOrder = legOrder;
  }

  public EvDataChampion prevResults(List<String> prevResults) {
    this.prevResults = prevResults;
    return this;
  }

  public EvDataChampion addPrevResultsItem(String prevResultsItem) {
    if (this.prevResults == null) {
      this.prevResults = new ArrayList<String>();
    }
    this.prevResults.add(prevResultsItem);
    return this;
  }

   /**
   * Previous results list in the same round. Needed for Knockout phase when is two legs.
   * @return prevResults
  **/
  @ApiModelProperty(value = "Previous results list in the same round. Needed for Knockout phase when is two legs.")
  public List<String> getPrevResults() {
    return prevResults;
  }

  public void setPrevResults(List<String> prevResults) {
    this.prevResults = prevResults;
  }

  public EvDataChampion qualifyProbs(List<ChQualifyNativeMarket> qualifyProbs) {
    this.qualifyProbs = qualifyProbs;
    return this;
  }

  public EvDataChampion addQualifyProbsItem(ChQualifyNativeMarket qualifyProbsItem) {
    if (this.qualifyProbs == null) {
      this.qualifyProbs = new ArrayList<ChQualifyNativeMarket>();
    }
    this.qualifyProbs.add(qualifyProbsItem);
    return this;
  }

   /**
   * Array of odds probabilities in a knockout round.
   * @return qualifyProbs
  **/
  @ApiModelProperty(value = "Array of odds probabilities in a knockout round.")
  public List<ChQualifyNativeMarket> getQualifyProbs() {
    return qualifyProbs;
  }

  public void setQualifyProbs(List<ChQualifyNativeMarket> qualifyProbs) {
    this.qualifyProbs = qualifyProbs;
  }

  public EvDataChampion teamIds(List<String> teamIds) {
    this.teamIds = teamIds;
    return this;
  }

  public EvDataChampion addTeamIdsItem(String teamIdsItem) {
    if (this.teamIds == null) {
      this.teamIds = new ArrayList<String>();
    }
    this.teamIds.add(teamIdsItem);
    return this;
  }

   /**
   * All participants data for knockout round. Only for knockout phase.
   * @return teamIds
  **/
  @ApiModelProperty(value = "All participants data for knockout round. Only for knockout phase.")
  public List<String> getTeamIds() {
    return teamIds;
  }

  public void setTeamIds(List<String> teamIds) {
    this.teamIds = teamIds;
  }

  public EvDataChampion matchOrder(Integer matchOrder) {
    this.matchOrder = matchOrder;
    return this;
  }

   /**
   * Match order within a Knockout round phase
   * @return matchOrder
  **/
  @ApiModelProperty(value = "Match order within a Knockout round phase")
  public Integer getMatchOrder() {
    return matchOrder;
  }

  public void setMatchOrder(Integer matchOrder) {
    this.matchOrder = matchOrder;
  }

  public EvDataChampion phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * phase of the event block
   * @return phase
  **/
  @ApiModelProperty(value = "phase of the event block")
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvDataChampion evDataChampion = (EvDataChampion) o;
    return Objects.equals(this.homeTeamId, evDataChampion.homeTeamId) &&
        Objects.equals(this.awayTeamId, evDataChampion.awayTeamId) &&
        Objects.equals(this.legOrder, evDataChampion.legOrder) &&
        Objects.equals(this.prevResults, evDataChampion.prevResults) &&
        Objects.equals(this.qualifyProbs, evDataChampion.qualifyProbs) &&
        Objects.equals(this.teamIds, evDataChampion.teamIds) &&
        Objects.equals(this.matchOrder, evDataChampion.matchOrder) &&
        Objects.equals(this.phase, evDataChampion.phase) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homeTeamId, awayTeamId, legOrder, prevResults, qualifyProbs, teamIds, matchOrder, phase, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvDataChampion {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    homeTeamId: ").append(toIndentedString(homeTeamId)).append("\n");
    sb.append("    awayTeamId: ").append(toIndentedString(awayTeamId)).append("\n");
    sb.append("    legOrder: ").append(toIndentedString(legOrder)).append("\n");
    sb.append("    prevResults: ").append(toIndentedString(prevResults)).append("\n");
    sb.append("    qualifyProbs: ").append(toIndentedString(qualifyProbs)).append("\n");
    sb.append("    teamIds: ").append(toIndentedString(teamIds)).append("\n");
    sb.append("    matchOrder: ").append(toIndentedString(matchOrder)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

