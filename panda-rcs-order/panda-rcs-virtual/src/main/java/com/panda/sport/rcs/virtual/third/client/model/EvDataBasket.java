/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.EvData;
import java.io.IOException;

/**
 * Internal Event Data for Baskets competition 
 */
@ApiModel(description = "Internal Event Data for Baskets competition ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class EvDataBasket extends EvData {
  @SerializedName("matchesGroupId")
  private Long matchesGroupId = null;

  @SerializedName("matchOrder")
  private Integer matchOrder = null;

  /**
   * Red team
   */
  @JsonAdapter(RedTeamEnum.Adapter.class)
  public enum RedTeamEnum {
    DRAGONS("DRAGONS"),
    
    BULLS("BULLS"),
    
    HAWKS("HAWKS"),
    
    LIZARDS("LIZARDS"),
    
    LIONS("LIONS");

    private String value;

    RedTeamEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedTeamEnum fromValue(String text) {
      for (RedTeamEnum b : RedTeamEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RedTeamEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedTeamEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedTeamEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RedTeamEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("redTeam")
  private RedTeamEnum redTeam = null;

  /**
   * Blue team
   */
  @JsonAdapter(BlueTeamEnum.Adapter.class)
  public enum BlueTeamEnum {
    POLARS("POLARS"),
    
    GORILLAS("GORILLAS"),
    
    WOLVES("WOLVES"),
    
    RHINOS("RHINOS"),
    
    SHARKS("SHARKS");

    private String value;

    BlueTeamEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlueTeamEnum fromValue(String text) {
      for (BlueTeamEnum b : BlueTeamEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BlueTeamEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlueTeamEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlueTeamEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BlueTeamEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("blueTeam")
  private BlueTeamEnum blueTeam = null;

  @SerializedName("rankingRed")
  private Double rankingRed = null;

  @SerializedName("rankingBlue")
  private Double rankingBlue = null;

  @SerializedName("starsRed")
  private Double starsRed = null;

  @SerializedName("starsBlue")
  private Double starsBlue = null;

  /**
   * phase of the event
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    PREGAME("PREGAME"),
    
    INGAME("INGAME");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String text) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PhaseEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("phase")
  private PhaseEnum phase = null;

  @SerializedName("resultPointsPregameRed")
  private Integer resultPointsPregameRed = null;

  @SerializedName("resultPointsPregameBlue")
  private Integer resultPointsPregameBlue = null;

  public EvDataBasket matchesGroupId(Long matchesGroupId) {
    this.matchesGroupId = matchesGroupId;
    return this;
  }

   /**
   * Identifier basket matches group
   * @return matchesGroupId
  **/
  @ApiModelProperty(value = "Identifier basket matches group")
  public Long getMatchesGroupId() {
    return matchesGroupId;
  }

  public void setMatchesGroupId(Long matchesGroupId) {
    this.matchesGroupId = matchesGroupId;
  }

  public EvDataBasket matchOrder(Integer matchOrder) {
    this.matchOrder = matchOrder;
    return this;
  }

   /**
   * Order of the basket match
   * @return matchOrder
  **/
  @ApiModelProperty(value = "Order of the basket match")
  public Integer getMatchOrder() {
    return matchOrder;
  }

  public void setMatchOrder(Integer matchOrder) {
    this.matchOrder = matchOrder;
  }

  public EvDataBasket redTeam(RedTeamEnum redTeam) {
    this.redTeam = redTeam;
    return this;
  }

   /**
   * Red team
   * @return redTeam
  **/
  @ApiModelProperty(value = "Red team")
  public RedTeamEnum getRedTeam() {
    return redTeam;
  }

  public void setRedTeam(RedTeamEnum redTeam) {
    this.redTeam = redTeam;
  }

  public EvDataBasket blueTeam(BlueTeamEnum blueTeam) {
    this.blueTeam = blueTeam;
    return this;
  }

   /**
   * Blue team
   * @return blueTeam
  **/
  @ApiModelProperty(value = "Blue team")
  public BlueTeamEnum getBlueTeam() {
    return blueTeam;
  }

  public void setBlueTeam(BlueTeamEnum blueTeam) {
    this.blueTeam = blueTeam;
  }

  public EvDataBasket rankingRed(Double rankingRed) {
    this.rankingRed = rankingRed;
    return this;
  }

   /**
   * The number expected of basket of the red team.
   * @return rankingRed
  **/
  @ApiModelProperty(value = "The number expected of basket of the red team.")
  public Double getRankingRed() {
    return rankingRed;
  }

  public void setRankingRed(Double rankingRed) {
    this.rankingRed = rankingRed;
  }

  public EvDataBasket rankingBlue(Double rankingBlue) {
    this.rankingBlue = rankingBlue;
    return this;
  }

   /**
   * The number expected of basket of the blue team.
   * @return rankingBlue
  **/
  @ApiModelProperty(value = "The number expected of basket of the blue team.")
  public Double getRankingBlue() {
    return rankingBlue;
  }

  public void setRankingBlue(Double rankingBlue) {
    this.rankingBlue = rankingBlue;
  }

  public EvDataBasket starsRed(Double starsRed) {
    this.starsRed = starsRed;
    return this;
  }

   /**
   * Number of stars that depends of ranking of the red team.
   * @return starsRed
  **/
  @ApiModelProperty(value = "Number of stars that depends of ranking of the red team.")
  public Double getStarsRed() {
    return starsRed;
  }

  public void setStarsRed(Double starsRed) {
    this.starsRed = starsRed;
  }

  public EvDataBasket starsBlue(Double starsBlue) {
    this.starsBlue = starsBlue;
    return this;
  }

   /**
   * Number of stars that depends of ranking of the blue team.
   * @return starsBlue
  **/
  @ApiModelProperty(value = "Number of stars that depends of ranking of the blue team.")
  public Double getStarsBlue() {
    return starsBlue;
  }

  public void setStarsBlue(Double starsBlue) {
    this.starsBlue = starsBlue;
  }

  public EvDataBasket phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * phase of the event
   * @return phase
  **/
  @ApiModelProperty(value = "phase of the event")
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }

  public EvDataBasket resultPointsPregameRed(Integer resultPointsPregameRed) {
    this.resultPointsPregameRed = resultPointsPregameRed;
    return this;
  }

   /**
   * points of red team at pregame phase end.
   * @return resultPointsPregameRed
  **/
  @ApiModelProperty(value = "points of red team at pregame phase end.")
  public Integer getResultPointsPregameRed() {
    return resultPointsPregameRed;
  }

  public void setResultPointsPregameRed(Integer resultPointsPregameRed) {
    this.resultPointsPregameRed = resultPointsPregameRed;
  }

  public EvDataBasket resultPointsPregameBlue(Integer resultPointsPregameBlue) {
    this.resultPointsPregameBlue = resultPointsPregameBlue;
    return this;
  }

   /**
   * points of blue team at pregame phase end.
   * @return resultPointsPregameBlue
  **/
  @ApiModelProperty(value = "points of blue team at pregame phase end.")
  public Integer getResultPointsPregameBlue() {
    return resultPointsPregameBlue;
  }

  public void setResultPointsPregameBlue(Integer resultPointsPregameBlue) {
    this.resultPointsPregameBlue = resultPointsPregameBlue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvDataBasket evDataBasket = (EvDataBasket) o;
    return Objects.equals(this.matchesGroupId, evDataBasket.matchesGroupId) &&
        Objects.equals(this.matchOrder, evDataBasket.matchOrder) &&
        Objects.equals(this.redTeam, evDataBasket.redTeam) &&
        Objects.equals(this.blueTeam, evDataBasket.blueTeam) &&
        Objects.equals(this.rankingRed, evDataBasket.rankingRed) &&
        Objects.equals(this.rankingBlue, evDataBasket.rankingBlue) &&
        Objects.equals(this.starsRed, evDataBasket.starsRed) &&
        Objects.equals(this.starsBlue, evDataBasket.starsBlue) &&
        Objects.equals(this.phase, evDataBasket.phase) &&
        Objects.equals(this.resultPointsPregameRed, evDataBasket.resultPointsPregameRed) &&
        Objects.equals(this.resultPointsPregameBlue, evDataBasket.resultPointsPregameBlue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchesGroupId, matchOrder, redTeam, blueTeam, rankingRed, rankingBlue, starsRed, starsBlue, phase, resultPointsPregameRed, resultPointsPregameBlue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvDataBasket {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    matchesGroupId: ").append(toIndentedString(matchesGroupId)).append("\n");
    sb.append("    matchOrder: ").append(toIndentedString(matchOrder)).append("\n");
    sb.append("    redTeam: ").append(toIndentedString(redTeam)).append("\n");
    sb.append("    blueTeam: ").append(toIndentedString(blueTeam)).append("\n");
    sb.append("    rankingRed: ").append(toIndentedString(rankingRed)).append("\n");
    sb.append("    rankingBlue: ").append(toIndentedString(rankingBlue)).append("\n");
    sb.append("    starsRed: ").append(toIndentedString(starsRed)).append("\n");
    sb.append("    starsBlue: ").append(toIndentedString(starsBlue)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    resultPointsPregameRed: ").append(toIndentedString(resultPointsPregameRed)).append("\n");
    sb.append("    resultPointsPregameBlue: ").append(toIndentedString(resultPointsPregameBlue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

