/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Credential;
import com.panda.sport.rcs.virtual.third.client.model.EntityCredentialStatus;
import com.panda.sport.rcs.virtual.third.client.model.EntityCredentialVisibilityLevel;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Information about login information of an entity for a given role. 
 */
@ApiModel(description = "Information about login information of an entity for a given role. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class EntityCredential {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("key")
  private String key = null;

  /**
   * Role who can access with this entity credential 
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    API("API"),
    
    MANAGER("MANAGER"),
    
    ACCOUNT("ACCOUNT"),
    
    USER("USER");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String text) {
      for (RoleEnum b : RoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RoleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("role")
  private RoleEnum role = null;

  @SerializedName("status")
  private EntityCredentialStatus status = null;

  @SerializedName("lastLogin")
  private OffsetDateTime lastLogin = null;

  @SerializedName("validUntil")
  private OffsetDateTime validUntil = null;

  @SerializedName("trustedIps")
  private List<String> trustedIps = null;

  @SerializedName("bannedIps")
  private List<String> bannedIps = null;

  @SerializedName("credential")
  private Credential credential = null;

  @SerializedName("visibilityLevel")
  private EntityCredentialVisibilityLevel visibilityLevel = null;

  public EntityCredential id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Entity Credential Id 
   * @return id
  **/
  @ApiModelProperty(value = "Entity Credential Id ")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public EntityCredential key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Unique identifier of EntityCredential 
   * @return key
  **/
  @ApiModelProperty(value = "Unique identifier of EntityCredential ")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public EntityCredential role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * Role who can access with this entity credential 
   * @return role
  **/
  @ApiModelProperty(value = "Role who can access with this entity credential ")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public EntityCredential status(EntityCredentialStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public EntityCredentialStatus getStatus() {
    return status;
  }

  public void setStatus(EntityCredentialStatus status) {
    this.status = status;
  }

  public EntityCredential lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Date of last Login with this credential
   * @return lastLogin
  **/
  @ApiModelProperty(value = "Date of last Login with this credential")
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }

  public EntityCredential validUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Limit date for current credentials. If empty, never invalidates.
   * @return validUntil
  **/
  @ApiModelProperty(value = "Limit date for current credentials. If empty, never invalidates.")
  public OffsetDateTime getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(OffsetDateTime validUntil) {
    this.validUntil = validUntil;
  }

  public EntityCredential trustedIps(List<String> trustedIps) {
    this.trustedIps = trustedIps;
    return this;
  }

  public EntityCredential addTrustedIpsItem(String trustedIpsItem) {
    if (this.trustedIps == null) {
      this.trustedIps = new ArrayList<String>();
    }
    this.trustedIps.add(trustedIpsItem);
    return this;
  }

   /**
   * List of Ips with mask for subnet of ip ranges and maskt of bits. TODO. include link to rules supported
   * @return trustedIps
  **/
  @ApiModelProperty(value = "List of Ips with mask for subnet of ip ranges and maskt of bits. TODO. include link to rules supported")
  public List<String> getTrustedIps() {
    return trustedIps;
  }

  public void setTrustedIps(List<String> trustedIps) {
    this.trustedIps = trustedIps;
  }

  public EntityCredential bannedIps(List<String> bannedIps) {
    this.bannedIps = bannedIps;
    return this;
  }

  public EntityCredential addBannedIpsItem(String bannedIpsItem) {
    if (this.bannedIps == null) {
      this.bannedIps = new ArrayList<String>();
    }
    this.bannedIps.add(bannedIpsItem);
    return this;
  }

   /**
   * List of Ips with mask for subnet of ip ranges and maskt of bits. TODO. include link to rules supported
   * @return bannedIps
  **/
  @ApiModelProperty(value = "List of Ips with mask for subnet of ip ranges and maskt of bits. TODO. include link to rules supported")
  public List<String> getBannedIps() {
    return bannedIps;
  }

  public void setBannedIps(List<String> bannedIps) {
    this.bannedIps = bannedIps;
  }

  public EntityCredential credential(Credential credential) {
    this.credential = credential;
    return this;
  }

   /**
   * Get credential
   * @return credential
  **/
  @ApiModelProperty(value = "")
  public Credential getCredential() {
    return credential;
  }

  public void setCredential(Credential credential) {
    this.credential = credential;
  }

  public EntityCredential visibilityLevel(EntityCredentialVisibilityLevel visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
    return this;
  }

   /**
   * Get visibilityLevel
   * @return visibilityLevel
  **/
  @ApiModelProperty(value = "")
  public EntityCredentialVisibilityLevel getVisibilityLevel() {
    return visibilityLevel;
  }

  public void setVisibilityLevel(EntityCredentialVisibilityLevel visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityCredential entityCredential = (EntityCredential) o;
    return Objects.equals(this.id, entityCredential.id) &&
        Objects.equals(this.key, entityCredential.key) &&
        Objects.equals(this.role, entityCredential.role) &&
        Objects.equals(this.status, entityCredential.status) &&
        Objects.equals(this.lastLogin, entityCredential.lastLogin) &&
        Objects.equals(this.validUntil, entityCredential.validUntil) &&
        Objects.equals(this.trustedIps, entityCredential.trustedIps) &&
        Objects.equals(this.bannedIps, entityCredential.bannedIps) &&
        Objects.equals(this.credential, entityCredential.credential) &&
        Objects.equals(this.visibilityLevel, entityCredential.visibilityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, key, role, status, lastLogin, validUntil, trustedIps, bannedIps, credential, visibilityLevel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityCredential {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    trustedIps: ").append(toIndentedString(trustedIps)).append("\n");
    sb.append("    bannedIps: ").append(toIndentedString(bannedIps)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    visibilityLevel: ").append(toIndentedString(visibilityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

