/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.BasketTeamScore;
import com.panda.sport.rcs.virtual.third.client.model.BasketTimeInterval;
import com.panda.sport.rcs.virtual.third.client.model.BasketVideoHappening;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This class encapsulates all the necessary information so that a slot can be re-maintained by the front-end applications. 
 */
@ApiModel(description = "This class encapsulates all the necessary information so that a slot can be re-maintained by the front-end applications. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class BasketVideoSlot {
  @SerializedName("mediaId")
  private String mediaId = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("playersRedId")
  private List<Integer> playersRedId = null;

  @SerializedName("playersBlueId")
  private List<Integer> playersBlueId = null;

  @SerializedName("scoreMatchRed")
  private BasketTeamScore scoreMatchRed = null;

  @SerializedName("scoreMatchBlue")
  private BasketTeamScore scoreMatchBlue = null;

  @SerializedName("pointsStats")
  private List<Integer> pointsStats = null;

  @SerializedName("scoreExtraTimeRed")
  private BasketTeamScore scoreExtraTimeRed = null;

  @SerializedName("scoreExtraTimeBlue")
  private BasketTeamScore scoreExtraTimeBlue = null;

  @SerializedName("timeDuration")
  private Float timeDuration = null;

  @SerializedName("timePlayed")
  private Float timePlayed = null;

  @SerializedName("timeIntervals")
  private List<BasketTimeInterval> timeIntervals = null;

  @SerializedName("happenings")
  private List<BasketVideoHappening> happenings = null;

  public BasketVideoSlot mediaId(String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

   /**
   * Multimedia resource identifier associated with the OCV or HLS to be used in the ingame. This attribute will be used to generate the OCV or HLS video url. For OCV, this identifier is the same for both video and voice-over 
   * @return mediaId
  **/
  @ApiModelProperty(value = "Multimedia resource identifier associated with the OCV or HLS to be used in the ingame. This attribute will be used to generate the OCV or HLS video url. For OCV, this identifier is the same for both video and voice-over ")
  public String getMediaId() {
    return mediaId;
  }

  public void setMediaId(String mediaId) {
    this.mediaId = mediaId;
  }

  public BasketVideoSlot enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates if video can be used 
   * @return enabled
  **/
  @ApiModelProperty(value = "Indicates if video can be used ")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public BasketVideoSlot playersRedId(List<Integer> playersRedId) {
    this.playersRedId = playersRedId;
    return this;
  }

  public BasketVideoSlot addPlayersRedIdItem(Integer playersRedIdItem) {
    if (this.playersRedId == null) {
      this.playersRedId = new ArrayList<Integer>();
    }
    this.playersRedId.add(playersRedIdItem);
    return this;
  }

   /**
   * Numeric identifiers of the Red team players 
   * @return playersRedId
  **/
  @ApiModelProperty(value = "Numeric identifiers of the Red team players ")
  public List<Integer> getPlayersRedId() {
    return playersRedId;
  }

  public void setPlayersRedId(List<Integer> playersRedId) {
    this.playersRedId = playersRedId;
  }

  public BasketVideoSlot playersBlueId(List<Integer> playersBlueId) {
    this.playersBlueId = playersBlueId;
    return this;
  }

  public BasketVideoSlot addPlayersBlueIdItem(Integer playersBlueIdItem) {
    if (this.playersBlueId == null) {
      this.playersBlueId = new ArrayList<Integer>();
    }
    this.playersBlueId.add(playersBlueIdItem);
    return this;
  }

   /**
   * Numeric identifiers of the Blue team players 
   * @return playersBlueId
  **/
  @ApiModelProperty(value = "Numeric identifiers of the Blue team players ")
  public List<Integer> getPlayersBlueId() {
    return playersBlueId;
  }

  public void setPlayersBlueId(List<Integer> playersBlueId) {
    this.playersBlueId = playersBlueId;
  }

  public BasketVideoSlot scoreMatchRed(BasketTeamScore scoreMatchRed) {
    this.scoreMatchRed = scoreMatchRed;
    return this;
  }

   /**
   * Record the red team&#39;s score in the match 
   * @return scoreMatchRed
  **/
  @ApiModelProperty(value = "Record the red team's score in the match ")
  public BasketTeamScore getScoreMatchRed() {
    return scoreMatchRed;
  }

  public void setScoreMatchRed(BasketTeamScore scoreMatchRed) {
    this.scoreMatchRed = scoreMatchRed;
  }

  public BasketVideoSlot scoreMatchBlue(BasketTeamScore scoreMatchBlue) {
    this.scoreMatchBlue = scoreMatchBlue;
    return this;
  }

   /**
   * Record the blue team&#39;s score in the match 
   * @return scoreMatchBlue
  **/
  @ApiModelProperty(value = "Record the blue team's score in the match ")
  public BasketTeamScore getScoreMatchBlue() {
    return scoreMatchBlue;
  }

  public void setScoreMatchBlue(BasketTeamScore scoreMatchBlue) {
    this.scoreMatchBlue = scoreMatchBlue;
  }

  public BasketVideoSlot pointsStats(List<Integer> pointsStats) {
    this.pointsStats = pointsStats;
    return this;
  }

  public BasketVideoSlot addPointsStatsItem(Integer pointsStatsItem) {
    if (this.pointsStats == null) {
      this.pointsStats = new ArrayList<Integer>();
    }
    this.pointsStats.add(pointsStatsItem);
    return this;
  }

   /**
   * field goals done red, field goals total red, two points done red, two points total red, field goals done blue, field goals total blue, two points done blue, two points  total blue 
   * @return pointsStats
  **/
  @ApiModelProperty(value = "field goals done red, field goals total red, two points done red, two points total red, field goals done blue, field goals total blue, two points done blue, two points  total blue ")
  public List<Integer> getPointsStats() {
    return pointsStats;
  }

  public void setPointsStats(List<Integer> pointsStats) {
    this.pointsStats = pointsStats;
  }

  public BasketVideoSlot scoreExtraTimeRed(BasketTeamScore scoreExtraTimeRed) {
    this.scoreExtraTimeRed = scoreExtraTimeRed;
    return this;
  }

   /**
   * Record the red team&#39;s score in extra-time. Null if there is no extra-time 
   * @return scoreExtraTimeRed
  **/
  @ApiModelProperty(value = "Record the red team's score in extra-time. Null if there is no extra-time ")
  public BasketTeamScore getScoreExtraTimeRed() {
    return scoreExtraTimeRed;
  }

  public void setScoreExtraTimeRed(BasketTeamScore scoreExtraTimeRed) {
    this.scoreExtraTimeRed = scoreExtraTimeRed;
  }

  public BasketVideoSlot scoreExtraTimeBlue(BasketTeamScore scoreExtraTimeBlue) {
    this.scoreExtraTimeBlue = scoreExtraTimeBlue;
    return this;
  }

   /**
   * Record the blue team&#39;s score in extra-time. Null if there is no extra-time 
   * @return scoreExtraTimeBlue
  **/
  @ApiModelProperty(value = "Record the blue team's score in extra-time. Null if there is no extra-time ")
  public BasketTeamScore getScoreExtraTimeBlue() {
    return scoreExtraTimeBlue;
  }

  public void setScoreExtraTimeBlue(BasketTeamScore scoreExtraTimeBlue) {
    this.scoreExtraTimeBlue = scoreExtraTimeBlue;
  }

  public BasketVideoSlot timeDuration(Float timeDuration) {
    this.timeDuration = timeDuration;
    return this;
  }

   /**
   * Total video duration 
   * @return timeDuration
  **/
  @ApiModelProperty(value = "Total video duration ")
  public Float getTimeDuration() {
    return timeDuration;
  }

  public void setTimeDuration(Float timeDuration) {
    this.timeDuration = timeDuration;
  }

  public BasketVideoSlot timePlayed(Float timePlayed) {
    this.timePlayed = timePlayed;
    return this;
  }

   /**
   * Total duration played in the match (the match counter is running) 
   * @return timePlayed
  **/
  @ApiModelProperty(value = "Total duration played in the match (the match counter is running) ")
  public Float getTimePlayed() {
    return timePlayed;
  }

  public void setTimePlayed(Float timePlayed) {
    this.timePlayed = timePlayed;
  }

  public BasketVideoSlot timeIntervals(List<BasketTimeInterval> timeIntervals) {
    this.timeIntervals = timeIntervals;
    return this;
  }

  public BasketVideoSlot addTimeIntervalsItem(BasketTimeInterval timeIntervalsItem) {
    if (this.timeIntervals == null) {
      this.timeIntervals = new ArrayList<BasketTimeInterval>();
    }
    this.timeIntervals.add(timeIntervalsItem);
    return this;
  }

   /**
   * Descomposition of the time in which the match counter has been running 
   * @return timeIntervals
  **/
  @ApiModelProperty(value = "Descomposition of the time in which the match counter has been running ")
  public List<BasketTimeInterval> getTimeIntervals() {
    return timeIntervals;
  }

  public void setTimeIntervals(List<BasketTimeInterval> timeIntervals) {
    this.timeIntervals = timeIntervals;
  }

  public BasketVideoSlot happenings(List<BasketVideoHappening> happenings) {
    this.happenings = happenings;
    return this;
  }

  public BasketVideoSlot addHappeningsItem(BasketVideoHappening happeningsItem) {
    if (this.happenings == null) {
      this.happenings = new ArrayList<BasketVideoHappening>();
    }
    this.happenings.add(happeningsItem);
    return this;
  }

   /**
   * Array that stores all the events that happen in the slot 
   * @return happenings
  **/
  @ApiModelProperty(value = "Array that stores all the events that happen in the slot ")
  public List<BasketVideoHappening> getHappenings() {
    return happenings;
  }

  public void setHappenings(List<BasketVideoHappening> happenings) {
    this.happenings = happenings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasketVideoSlot basketVideoSlot = (BasketVideoSlot) o;
    return Objects.equals(this.mediaId, basketVideoSlot.mediaId) &&
        Objects.equals(this.enabled, basketVideoSlot.enabled) &&
        Objects.equals(this.playersRedId, basketVideoSlot.playersRedId) &&
        Objects.equals(this.playersBlueId, basketVideoSlot.playersBlueId) &&
        Objects.equals(this.scoreMatchRed, basketVideoSlot.scoreMatchRed) &&
        Objects.equals(this.scoreMatchBlue, basketVideoSlot.scoreMatchBlue) &&
        Objects.equals(this.pointsStats, basketVideoSlot.pointsStats) &&
        Objects.equals(this.scoreExtraTimeRed, basketVideoSlot.scoreExtraTimeRed) &&
        Objects.equals(this.scoreExtraTimeBlue, basketVideoSlot.scoreExtraTimeBlue) &&
        Objects.equals(this.timeDuration, basketVideoSlot.timeDuration) &&
        Objects.equals(this.timePlayed, basketVideoSlot.timePlayed) &&
        Objects.equals(this.timeIntervals, basketVideoSlot.timeIntervals) &&
        Objects.equals(this.happenings, basketVideoSlot.happenings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaId, enabled, playersRedId, playersBlueId, scoreMatchRed, scoreMatchBlue, pointsStats, scoreExtraTimeRed, scoreExtraTimeBlue, timeDuration, timePlayed, timeIntervals, happenings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasketVideoSlot {\n");
    
    sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    playersRedId: ").append(toIndentedString(playersRedId)).append("\n");
    sb.append("    playersBlueId: ").append(toIndentedString(playersBlueId)).append("\n");
    sb.append("    scoreMatchRed: ").append(toIndentedString(scoreMatchRed)).append("\n");
    sb.append("    scoreMatchBlue: ").append(toIndentedString(scoreMatchBlue)).append("\n");
    sb.append("    pointsStats: ").append(toIndentedString(pointsStats)).append("\n");
    sb.append("    scoreExtraTimeRed: ").append(toIndentedString(scoreExtraTimeRed)).append("\n");
    sb.append("    scoreExtraTimeBlue: ").append(toIndentedString(scoreExtraTimeBlue)).append("\n");
    sb.append("    timeDuration: ").append(toIndentedString(timeDuration)).append("\n");
    sb.append("    timePlayed: ").append(toIndentedString(timePlayed)).append("\n");
    sb.append("    timeIntervals: ").append(toIndentedString(timeIntervals)).append("\n");
    sb.append("    happenings: ").append(toIndentedString(happenings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

