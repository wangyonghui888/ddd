/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.FtpsReportTarget;
import com.panda.sport.rcs.virtual.third.client.model.ReportTarget;
import java.io.IOException;

/**
 * FTP Report Target
 */
@ApiModel(description = "FTP Report Target")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class FtpReportTarget extends ReportTarget {
  @SerializedName("serverHost")
  private String serverHost = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("account")
  private String account = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("createPath")
  private Boolean createPath = null;

  /**
   * Sets the mode of the connection. Only local modes are supported. Will be used as value \&quot;ACTIVE\&quot; if it isn&#39;t set. | Mode    | Description                                                                                                                                                                                                     | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | ACTIVE  | FTP session is expecting all transfers to occur between the client (local) and server and that the server should connect to the client&#39;s data port to initiate a data transfer.                                 | | PASSIVE | FTP session is expecting all transfers to occur between the client (local) and server and that the server is in passive mode, requiring the client to connect to the server&#39;s data port to initiate a transfer. | 
   */
  @JsonAdapter(ClientModeEnum.Adapter.class)
  public enum ClientModeEnum {
    ACTIVE("ACTIVE"),
    
    PASSIVE("PASSIVE");

    private String value;

    ClientModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientModeEnum fromValue(String text) {
      for (ClientModeEnum b : ClientModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ClientModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ClientModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("clientMode")
  private ClientModeEnum clientMode = null;

  @SerializedName("bufferSize")
  private Integer bufferSize = null;

  @SerializedName("connectTimeout")
  private Integer connectTimeout = null;

  @SerializedName("defaultTimeout")
  private Integer defaultTimeout = null;

  @SerializedName("dataTimeout")
  private Integer dataTimeout = null;

  @SerializedName("controlEncoding")
  private String controlEncoding = null;

  @SerializedName("isSecure")
  private Boolean isSecure = null;

  @SerializedName("ftpsParams")
  private FtpsReportTarget ftpsParams = null;

  public FtpReportTarget serverHost(String serverHost) {
    this.serverHost = serverHost;
    return this;
  }

   /**
   * FTP server host
   * @return serverHost
  **/
  @ApiModelProperty(required = true, value = "FTP server host")
  public String getServerHost() {
    return serverHost;
  }

  public void setServerHost(String serverHost) {
    this.serverHost = serverHost;
  }

  public FtpReportTarget port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * FTP server port
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @ApiModelProperty(required = true, value = "FTP server port")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public FtpReportTarget username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username credential to connect FTP
   * @return username
  **/
  @ApiModelProperty(required = true, value = "Username credential to connect FTP")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public FtpReportTarget password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password credential to connect FTP
   * @return password
  **/
  @ApiModelProperty(required = true, value = "Password credential to connect FTP")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public FtpReportTarget account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Account credential to connect FTP
   * @return account
  **/
  @ApiModelProperty(value = "Account credential to connect FTP")
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }

  public FtpReportTarget path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path where upload report. The generated report will be uploaded under the report ID subfolder in this path.
   * @return path
  **/
  @ApiModelProperty(required = true, value = "Path where upload report. The generated report will be uploaded under the report ID subfolder in this path.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public FtpReportTarget createPath(Boolean createPath) {
    this.createPath = createPath;
    return this;
  }

   /**
   * Create path where upload report. If it&#39;s empty or false, try to upload directly to path.
   * @return createPath
  **/
  @ApiModelProperty(value = "Create path where upload report. If it's empty or false, try to upload directly to path.")
  public Boolean isCreatePath() {
    return createPath;
  }

  public void setCreatePath(Boolean createPath) {
    this.createPath = createPath;
  }

  public FtpReportTarget clientMode(ClientModeEnum clientMode) {
    this.clientMode = clientMode;
    return this;
  }

   /**
   * Sets the mode of the connection. Only local modes are supported. Will be used as value \&quot;ACTIVE\&quot; if it isn&#39;t set. | Mode    | Description                                                                                                                                                                                                     | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | ACTIVE  | FTP session is expecting all transfers to occur between the client (local) and server and that the server should connect to the client&#39;s data port to initiate a data transfer.                                 | | PASSIVE | FTP session is expecting all transfers to occur between the client (local) and server and that the server is in passive mode, requiring the client to connect to the server&#39;s data port to initiate a transfer. | 
   * @return clientMode
  **/
  @ApiModelProperty(value = "Sets the mode of the connection. Only local modes are supported. Will be used as value \"ACTIVE\" if it isn't set. | Mode    | Description                                                                                                                                                                                                     | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | ACTIVE  | FTP session is expecting all transfers to occur between the client (local) and server and that the server should connect to the client's data port to initiate a data transfer.                                 | | PASSIVE | FTP session is expecting all transfers to occur between the client (local) and server and that the server is in passive mode, requiring the client to connect to the server's data port to initiate a transfer. | ")
  public ClientModeEnum getClientMode() {
    return clientMode;
  }

  public void setClientMode(ClientModeEnum clientMode) {
    this.clientMode = clientMode;
  }

  public FtpReportTarget bufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
    return this;
  }

   /**
   * Buffer size for buffered data streams. Will be used as value the report content length if it isn&#39;t set.
   * minimum: 0
   * @return bufferSize
  **/
  @ApiModelProperty(value = "Buffer size for buffered data streams. Will be used as value the report content length if it isn't set.")
  public Integer getBufferSize() {
    return bufferSize;
  }

  public void setBufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
  }

  public FtpReportTarget connectTimeout(Integer connectTimeout) {
    this.connectTimeout = connectTimeout;
    return this;
  }

   /**
   * The connection timeout in milliseconds. The value 0 means an infinite timeout. Will be used as value \&quot;0\&quot; if it isn&#39;t set.
   * minimum: 0
   * @return connectTimeout
  **/
  @ApiModelProperty(value = "The connection timeout in milliseconds. The value 0 means an infinite timeout. Will be used as value \"0\" if it isn't set.")
  public Integer getConnectTimeout() {
    return connectTimeout;
  }

  public void setConnectTimeout(Integer connectTimeout) {
    this.connectTimeout = connectTimeout;
  }

  public FtpReportTarget defaultTimeout(Integer defaultTimeout) {
    this.defaultTimeout = defaultTimeout;
    return this;
  }

   /**
   * Default timeout in milliseconds to use when opening a socket. The value 0 means an infinite timeout. Will be used as value \&quot;0\&quot; if it isn&#39;t set.
   * minimum: 0
   * @return defaultTimeout
  **/
  @ApiModelProperty(value = "Default timeout in milliseconds to use when opening a socket. The value 0 means an infinite timeout. Will be used as value \"0\" if it isn't set.")
  public Integer getDefaultTimeout() {
    return defaultTimeout;
  }

  public void setDefaultTimeout(Integer defaultTimeout) {
    this.defaultTimeout = defaultTimeout;
  }

  public FtpReportTarget dataTimeout(Integer dataTimeout) {
    this.dataTimeout = dataTimeout;
    return this;
  }

   /**
   * Timeout in milliseconds to use when reading from the data connection. The value 0 means an infinite timeout. Will be used as value \&quot;0\&quot; if it isn&#39;t set.
   * minimum: 0
   * @return dataTimeout
  **/
  @ApiModelProperty(value = "Timeout in milliseconds to use when reading from the data connection. The value 0 means an infinite timeout. Will be used as value \"0\" if it isn't set.")
  public Integer getDataTimeout() {
    return dataTimeout;
  }

  public void setDataTimeout(Integer dataTimeout) {
    this.dataTimeout = dataTimeout;
  }

  public FtpReportTarget controlEncoding(String controlEncoding) {
    this.controlEncoding = controlEncoding;
    return this;
  }

   /**
   * The character encoding to be used by the FTP control connection. Will be used as value \&quot;UTF-8\&quot; if it isn&#39;t set.
   * @return controlEncoding
  **/
  @ApiModelProperty(value = "The character encoding to be used by the FTP control connection. Will be used as value \"UTF-8\" if it isn't set.")
  public String getControlEncoding() {
    return controlEncoding;
  }

  public void setControlEncoding(String controlEncoding) {
    this.controlEncoding = controlEncoding;
  }

  public FtpReportTarget isSecure(Boolean isSecure) {
    this.isSecure = isSecure;
    return this;
  }

   /**
   * FTP is with secure connection. Will be used as value \&quot;false\&quot; if it isn&#39;t set.
   * @return isSecure
  **/
  @ApiModelProperty(value = "FTP is with secure connection. Will be used as value \"false\" if it isn't set.")
  public Boolean isIsSecure() {
    return isSecure;
  }

  public void setIsSecure(Boolean isSecure) {
    this.isSecure = isSecure;
  }

  public FtpReportTarget ftpsParams(FtpsReportTarget ftpsParams) {
    this.ftpsParams = ftpsParams;
    return this;
  }

   /**
   * Get ftpsParams
   * @return ftpsParams
  **/
  @ApiModelProperty(value = "")
  public FtpsReportTarget getFtpsParams() {
    return ftpsParams;
  }

  public void setFtpsParams(FtpsReportTarget ftpsParams) {
    this.ftpsParams = ftpsParams;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FtpReportTarget ftpReportTarget = (FtpReportTarget) o;
    return Objects.equals(this.serverHost, ftpReportTarget.serverHost) &&
        Objects.equals(this.port, ftpReportTarget.port) &&
        Objects.equals(this.username, ftpReportTarget.username) &&
        Objects.equals(this.password, ftpReportTarget.password) &&
        Objects.equals(this.account, ftpReportTarget.account) &&
        Objects.equals(this.path, ftpReportTarget.path) &&
        Objects.equals(this.createPath, ftpReportTarget.createPath) &&
        Objects.equals(this.clientMode, ftpReportTarget.clientMode) &&
        Objects.equals(this.bufferSize, ftpReportTarget.bufferSize) &&
        Objects.equals(this.connectTimeout, ftpReportTarget.connectTimeout) &&
        Objects.equals(this.defaultTimeout, ftpReportTarget.defaultTimeout) &&
        Objects.equals(this.dataTimeout, ftpReportTarget.dataTimeout) &&
        Objects.equals(this.controlEncoding, ftpReportTarget.controlEncoding) &&
        Objects.equals(this.isSecure, ftpReportTarget.isSecure) &&
        Objects.equals(this.ftpsParams, ftpReportTarget.ftpsParams) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverHost, port, username, password, account, path, createPath, clientMode, bufferSize, connectTimeout, defaultTimeout, dataTimeout, controlEncoding, isSecure, ftpsParams, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FtpReportTarget {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    serverHost: ").append(toIndentedString(serverHost)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    createPath: ").append(toIndentedString(createPath)).append("\n");
    sb.append("    clientMode: ").append(toIndentedString(clientMode)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    connectTimeout: ").append(toIndentedString(connectTimeout)).append("\n");
    sb.append("    defaultTimeout: ").append(toIndentedString(defaultTimeout)).append("\n");
    sb.append("    dataTimeout: ").append(toIndentedString(dataTimeout)).append("\n");
    sb.append("    controlEncoding: ").append(toIndentedString(controlEncoding)).append("\n");
    sb.append("    isSecure: ").append(toIndentedString(isSecure)).append("\n");
    sb.append("    ftpsParams: ").append(toIndentedString(ftpsParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

