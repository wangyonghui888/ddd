/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * See ContentDisplay and MatrixDisplay 
 */
@ApiModel(description = "See ContentDisplay and MatrixDisplay ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")




public class Display {
  @SerializedName("classType")
  private String classType = null;

  @SerializedName("displayId")
  private String displayId = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("priority")
  private Integer priority = null;

  public Display() {
    this.classType = this.getClass().getSimpleName();
  }
  public Display classType(String classType) {
    this.classType = classType;
    return this;
  }

   /**
   * Get classType
   * @return classType
  **/
  @ApiModelProperty(required = true, value = "")
  public String getClassType() {
    return classType;
  }

  public void setClassType(String classType) {
    this.classType = classType;
  }

  public Display displayId(String displayId) {
    this.displayId = displayId;
    return this;
  }

   /**
   * Custom display identifier to be used on monitor / container binding in viewers.
   * @return displayId
  **/
  @ApiModelProperty(required = true, value = "Custom display identifier to be used on monitor / container binding in viewers.")
  public String getDisplayId() {
    return displayId;
  }

  public void setDisplayId(String displayId) {
    this.displayId = displayId;
  }

  public Display enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Allows / to disable a display to be used.
   * @return enabled
  **/
  @ApiModelProperty(value = "Allows / to disable a display to be used.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Display priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Integer used to define the priority between displays. Positive values. With 0 being the lowest priority.  Used to order the display list, from highest to lowest priority. If several displays have the same priority, they will be ordered by playlistId. 
   * minimum: 0
   * @return priority
  **/
  @ApiModelProperty(value = "Integer used to define the priority between displays. Positive values. With 0 being the lowest priority.  Used to order the display list, from highest to lowest priority. If several displays have the same priority, they will be ordered by playlistId. ")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Display display = (Display) o;
    return Objects.equals(this.classType, display.classType) &&
        Objects.equals(this.displayId, display.displayId) &&
        Objects.equals(this.enabled, display.enabled) &&
        Objects.equals(this.priority, display.priority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classType, displayId, enabled, priority);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Display {\n");
    
    sb.append("    classType: ").append(toIndentedString(classType)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

