/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.ChEventBlockData;
import com.panda.sport.rcs.virtual.third.client.model.ChEventKnockoutClassificationEntry;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ChKnockoutClassificationEntry
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ChKnockoutClassificationEntry {
  @SerializedName("eventTime")
  private OffsetDateTime eventTime = null;

  @SerializedName("data")
  private ChEventBlockData data = null;

  @SerializedName("events")
  private List<ChEventKnockoutClassificationEntry> events = null;

  public ChKnockoutClassificationEntry eventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    return this;
  }

   /**
   * Date of the event
   * @return eventTime
  **/
  @ApiModelProperty(value = "Date of the event")
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  public void setEventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
  }

  public ChKnockoutClassificationEntry data(ChEventBlockData data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @ApiModelProperty(value = "")
  public ChEventBlockData getData() {
    return data;
  }

  public void setData(ChEventBlockData data) {
    this.data = data;
  }

  public ChKnockoutClassificationEntry events(List<ChEventKnockoutClassificationEntry> events) {
    this.events = events;
    return this;
  }

  public ChKnockoutClassificationEntry addEventsItem(ChEventKnockoutClassificationEntry eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<ChEventKnockoutClassificationEntry>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @ApiModelProperty(value = "")
  public List<ChEventKnockoutClassificationEntry> getEvents() {
    return events;
  }

  public void setEvents(List<ChEventKnockoutClassificationEntry> events) {
    this.events = events;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChKnockoutClassificationEntry chKnockoutClassificationEntry = (ChKnockoutClassificationEntry) o;
    return Objects.equals(this.eventTime, chKnockoutClassificationEntry.eventTime) &&
        Objects.equals(this.data, chKnockoutClassificationEntry.data) &&
        Objects.equals(this.events, chKnockoutClassificationEntry.events);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventTime, data, events);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChKnockoutClassificationEntry {\n");
    
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

