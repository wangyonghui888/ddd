/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.MobileProfileCategory;
import com.panda.sport.rcs.virtual.third.client.model.MobileProfileGameSettings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Mobile Profile Settings 
 */
@ApiModel(description = "Mobile Profile Settings ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class MobileProfileSettings {
  /**
   * Landing page style 
   */
  @JsonAdapter(LandingStyleEnum.Adapter.class)
  public enum LandingStyleEnum {
    CLASSIC("CLASSIC"),
    
    ICON_MENU("ICON_MENU");

    private String value;

    LandingStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LandingStyleEnum fromValue(String text) {
      for (LandingStyleEnum b : LandingStyleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LandingStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LandingStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LandingStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LandingStyleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("landingStyle")
  private LandingStyleEnum landingStyle = null;

  @SerializedName("hideUsernameAccount")
  private Boolean hideUsernameAccount = null;

  @SerializedName("hideCredit")
  private Boolean hideCredit = null;

  /**
   * Button type shown on the left side of Top App Bar         
   */
  @JsonAdapter(LeftButtonEnum.Adapter.class)
  public enum LeftButtonEnum {
    NAVIGATION_DRAWER("NAVIGATION_DRAWER"),
    
    CUSTOMER_HOME("CUSTOMER_HOME");

    private String value;

    LeftButtonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeftButtonEnum fromValue(String text) {
      for (LeftButtonEnum b : LeftButtonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LeftButtonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeftButtonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeftButtonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LeftButtonEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("leftButton")
  private LeftButtonEnum leftButton = null;

  @SerializedName("hideBetHistoryTop")
  private Boolean hideBetHistoryTop = null;

  @SerializedName("hideCreditTop")
  private Boolean hideCreditTop = null;

  @SerializedName("favouritePlaylist")
  private Boolean favouritePlaylist = null;

  @SerializedName("favouriteHeader")
  private Boolean favouriteHeader = null;

  @SerializedName("hideRules")
  private Boolean hideRules = null;

  /**
   * Style showing the total list of markets within the predefined grouping 
   */
  @JsonAdapter(MarketSelectorStyleEnum.Adapter.class)
  public enum MarketSelectorStyleEnum {
    DROPDOWN("DROPDOWN"),
    
    TABS("TABS");

    private String value;

    MarketSelectorStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketSelectorStyleEnum fromValue(String text) {
      for (MarketSelectorStyleEnum b : MarketSelectorStyleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MarketSelectorStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketSelectorStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketSelectorStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MarketSelectorStyleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("marketSelectorStyle")
  private MarketSelectorStyleEnum marketSelectorStyle = null;

  @SerializedName("allMarketsSelectionsDisplayed")
  private Boolean allMarketsSelectionsDisplayed = null;

  @SerializedName("hideBottomBanner")
  private Boolean hideBottomBanner = null;

  @SerializedName("bottomBannerPlaylist")
  private List<Integer> bottomBannerPlaylist = null;

  @SerializedName("hideCategoriesSelectorBar")
  private Boolean hideCategoriesSelectorBar = null;

  @SerializedName("gameSettings")
  private List<MobileProfileGameSettings> gameSettings = null;

  @SerializedName("categories")
  private List<MobileProfileCategory> categories = null;

  public MobileProfileSettings landingStyle(LandingStyleEnum landingStyle) {
    this.landingStyle = landingStyle;
    return this;
  }

   /**
   * Landing page style 
   * @return landingStyle
  **/
  @ApiModelProperty(value = "Landing page style ")
  public LandingStyleEnum getLandingStyle() {
    return landingStyle;
  }

  public void setLandingStyle(LandingStyleEnum landingStyle) {
    this.landingStyle = landingStyle;
  }

  public MobileProfileSettings hideUsernameAccount(Boolean hideUsernameAccount) {
    this.hideUsernameAccount = hideUsernameAccount;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show username account on Navigation Drawer Menu 
   * @return hideUsernameAccount
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show username account on Navigation Drawer Menu ")
  public Boolean isHideUsernameAccount() {
    return hideUsernameAccount;
  }

  public void setHideUsernameAccount(Boolean hideUsernameAccount) {
    this.hideUsernameAccount = hideUsernameAccount;
  }

  public MobileProfileSettings hideCredit(Boolean hideCredit) {
    this.hideCredit = hideCredit;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show credit on Navigation Drawer Menu 
   * @return hideCredit
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show credit on Navigation Drawer Menu ")
  public Boolean isHideCredit() {
    return hideCredit;
  }

  public void setHideCredit(Boolean hideCredit) {
    this.hideCredit = hideCredit;
  }

  public MobileProfileSettings leftButton(LeftButtonEnum leftButton) {
    this.leftButton = leftButton;
    return this;
  }

   /**
   * Button type shown on the left side of Top App Bar         
   * @return leftButton
  **/
  @ApiModelProperty(value = "Button type shown on the left side of Top App Bar         ")
  public LeftButtonEnum getLeftButton() {
    return leftButton;
  }

  public void setLeftButton(LeftButtonEnum leftButton) {
    this.leftButton = leftButton;
  }

  public MobileProfileSettings hideBetHistoryTop(Boolean hideBetHistoryTop) {
    this.hideBetHistoryTop = hideBetHistoryTop;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show bet History on Top App Bar 
   * @return hideBetHistoryTop
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show bet History on Top App Bar ")
  public Boolean isHideBetHistoryTop() {
    return hideBetHistoryTop;
  }

  public void setHideBetHistoryTop(Boolean hideBetHistoryTop) {
    this.hideBetHistoryTop = hideBetHistoryTop;
  }

  public MobileProfileSettings hideCreditTop(Boolean hideCreditTop) {
    this.hideCreditTop = hideCreditTop;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show credit on Top App Bar 
   * @return hideCreditTop
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show credit on Top App Bar ")
  public Boolean isHideCreditTop() {
    return hideCreditTop;
  }

  public void setHideCreditTop(Boolean hideCreditTop) {
    this.hideCreditTop = hideCreditTop;
  }

  public MobileProfileSettings favouritePlaylist(Boolean favouritePlaylist) {
    this.favouritePlaylist = favouritePlaylist;
    return this;
  }

   /**
   * Enabled to show or disabled to hide favourite button on Playlist preview list from Playlist Group 
   * @return favouritePlaylist
  **/
  @ApiModelProperty(value = "Enabled to show or disabled to hide favourite button on Playlist preview list from Playlist Group ")
  public Boolean isFavouritePlaylist() {
    return favouritePlaylist;
  }

  public void setFavouritePlaylist(Boolean favouritePlaylist) {
    this.favouritePlaylist = favouritePlaylist;
  }

  public MobileProfileSettings favouriteHeader(Boolean favouriteHeader) {
    this.favouriteHeader = favouriteHeader;
    return this;
  }

   /**
   * Enabled to show or disabled to hide favourite button on Playlists detail header 
   * @return favouriteHeader
  **/
  @ApiModelProperty(value = "Enabled to show or disabled to hide favourite button on Playlists detail header ")
  public Boolean isFavouriteHeader() {
    return favouriteHeader;
  }

  public void setFavouriteHeader(Boolean favouriteHeader) {
    this.favouriteHeader = favouriteHeader;
  }

  public MobileProfileSettings hideRules(Boolean hideRules) {
    this.hideRules = hideRules;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show rules button 
   * @return hideRules
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show rules button ")
  public Boolean isHideRules() {
    return hideRules;
  }

  public void setHideRules(Boolean hideRules) {
    this.hideRules = hideRules;
  }

  public MobileProfileSettings marketSelectorStyle(MarketSelectorStyleEnum marketSelectorStyle) {
    this.marketSelectorStyle = marketSelectorStyle;
    return this;
  }

   /**
   * Style showing the total list of markets within the predefined grouping 
   * @return marketSelectorStyle
  **/
  @ApiModelProperty(value = "Style showing the total list of markets within the predefined grouping ")
  public MarketSelectorStyleEnum getMarketSelectorStyle() {
    return marketSelectorStyle;
  }

  public void setMarketSelectorStyle(MarketSelectorStyleEnum marketSelectorStyle) {
    this.marketSelectorStyle = marketSelectorStyle;
  }

  public MobileProfileSettings allMarketsSelectionsDisplayed(Boolean allMarketsSelectionsDisplayed) {
    this.allMarketsSelectionsDisplayed = allMarketsSelectionsDisplayed;
    return this;
  }

   /**
   * Enabled to expand or disabled to collapse all markets and selections displayed on each playlist at first view 
   * @return allMarketsSelectionsDisplayed
  **/
  @ApiModelProperty(value = "Enabled to expand or disabled to collapse all markets and selections displayed on each playlist at first view ")
  public Boolean isAllMarketsSelectionsDisplayed() {
    return allMarketsSelectionsDisplayed;
  }

  public void setAllMarketsSelectionsDisplayed(Boolean allMarketsSelectionsDisplayed) {
    this.allMarketsSelectionsDisplayed = allMarketsSelectionsDisplayed;
  }

  public MobileProfileSettings hideBottomBanner(Boolean hideBottomBanner) {
    this.hideBottomBanner = hideBottomBanner;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show bottom banner menu 
   * @return hideBottomBanner
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show bottom banner menu ")
  public Boolean isHideBottomBanner() {
    return hideBottomBanner;
  }

  public void setHideBottomBanner(Boolean hideBottomBanner) {
    this.hideBottomBanner = hideBottomBanner;
  }

  public MobileProfileSettings bottomBannerPlaylist(List<Integer> bottomBannerPlaylist) {
    this.bottomBannerPlaylist = bottomBannerPlaylist;
    return this;
  }

  public MobileProfileSettings addBottomBannerPlaylistItem(Integer bottomBannerPlaylistItem) {
    if (this.bottomBannerPlaylist == null) {
      this.bottomBannerPlaylist = new ArrayList<Integer>();
    }
    this.bottomBannerPlaylist.add(bottomBannerPlaylistItem);
    return this;
  }

   /**
   * List of playlists to select to show on Bottom Banner. 
   * @return bottomBannerPlaylist
  **/
  @ApiModelProperty(value = "List of playlists to select to show on Bottom Banner. ")
  public List<Integer> getBottomBannerPlaylist() {
    return bottomBannerPlaylist;
  }

  public void setBottomBannerPlaylist(List<Integer> bottomBannerPlaylist) {
    this.bottomBannerPlaylist = bottomBannerPlaylist;
  }

  public MobileProfileSettings hideCategoriesSelectorBar(Boolean hideCategoriesSelectorBar) {
    this.hideCategoriesSelectorBar = hideCategoriesSelectorBar;
    return this;
  }

   /**
   * Enabled to Hide or disabled to show categories selector bar 
   * @return hideCategoriesSelectorBar
  **/
  @ApiModelProperty(value = "Enabled to Hide or disabled to show categories selector bar ")
  public Boolean isHideCategoriesSelectorBar() {
    return hideCategoriesSelectorBar;
  }

  public void setHideCategoriesSelectorBar(Boolean hideCategoriesSelectorBar) {
    this.hideCategoriesSelectorBar = hideCategoriesSelectorBar;
  }

  public MobileProfileSettings gameSettings(List<MobileProfileGameSettings> gameSettings) {
    this.gameSettings = gameSettings;
    return this;
  }

  public MobileProfileSettings addGameSettingsItem(MobileProfileGameSettings gameSettingsItem) {
    if (this.gameSettings == null) {
      this.gameSettings = new ArrayList<MobileProfileGameSettings>();
    }
    this.gameSettings.add(gameSettingsItem);
    return this;
  }

   /**
   * Specific mobile profile settings per game 
   * @return gameSettings
  **/
  @ApiModelProperty(value = "Specific mobile profile settings per game ")
  public List<MobileProfileGameSettings> getGameSettings() {
    return gameSettings;
  }

  public void setGameSettings(List<MobileProfileGameSettings> gameSettings) {
    this.gameSettings = gameSettings;
  }

  public MobileProfileSettings categories(List<MobileProfileCategory> categories) {
    this.categories = categories;
    return this;
  }

  public MobileProfileSettings addCategoriesItem(MobileProfileCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<MobileProfileCategory>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Game categories 
   * @return categories
  **/
  @ApiModelProperty(value = "Game categories ")
  public List<MobileProfileCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<MobileProfileCategory> categories) {
    this.categories = categories;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MobileProfileSettings mobileProfileSettings = (MobileProfileSettings) o;
    return Objects.equals(this.landingStyle, mobileProfileSettings.landingStyle) &&
        Objects.equals(this.hideUsernameAccount, mobileProfileSettings.hideUsernameAccount) &&
        Objects.equals(this.hideCredit, mobileProfileSettings.hideCredit) &&
        Objects.equals(this.leftButton, mobileProfileSettings.leftButton) &&
        Objects.equals(this.hideBetHistoryTop, mobileProfileSettings.hideBetHistoryTop) &&
        Objects.equals(this.hideCreditTop, mobileProfileSettings.hideCreditTop) &&
        Objects.equals(this.favouritePlaylist, mobileProfileSettings.favouritePlaylist) &&
        Objects.equals(this.favouriteHeader, mobileProfileSettings.favouriteHeader) &&
        Objects.equals(this.hideRules, mobileProfileSettings.hideRules) &&
        Objects.equals(this.marketSelectorStyle, mobileProfileSettings.marketSelectorStyle) &&
        Objects.equals(this.allMarketsSelectionsDisplayed, mobileProfileSettings.allMarketsSelectionsDisplayed) &&
        Objects.equals(this.hideBottomBanner, mobileProfileSettings.hideBottomBanner) &&
        Objects.equals(this.bottomBannerPlaylist, mobileProfileSettings.bottomBannerPlaylist) &&
        Objects.equals(this.hideCategoriesSelectorBar, mobileProfileSettings.hideCategoriesSelectorBar) &&
        Objects.equals(this.gameSettings, mobileProfileSettings.gameSettings) &&
        Objects.equals(this.categories, mobileProfileSettings.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(landingStyle, hideUsernameAccount, hideCredit, leftButton, hideBetHistoryTop, hideCreditTop, favouritePlaylist, favouriteHeader, hideRules, marketSelectorStyle, allMarketsSelectionsDisplayed, hideBottomBanner, bottomBannerPlaylist, hideCategoriesSelectorBar, gameSettings, categories);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileProfileSettings {\n");
    
    sb.append("    landingStyle: ").append(toIndentedString(landingStyle)).append("\n");
    sb.append("    hideUsernameAccount: ").append(toIndentedString(hideUsernameAccount)).append("\n");
    sb.append("    hideCredit: ").append(toIndentedString(hideCredit)).append("\n");
    sb.append("    leftButton: ").append(toIndentedString(leftButton)).append("\n");
    sb.append("    hideBetHistoryTop: ").append(toIndentedString(hideBetHistoryTop)).append("\n");
    sb.append("    hideCreditTop: ").append(toIndentedString(hideCreditTop)).append("\n");
    sb.append("    favouritePlaylist: ").append(toIndentedString(favouritePlaylist)).append("\n");
    sb.append("    favouriteHeader: ").append(toIndentedString(favouriteHeader)).append("\n");
    sb.append("    hideRules: ").append(toIndentedString(hideRules)).append("\n");
    sb.append("    marketSelectorStyle: ").append(toIndentedString(marketSelectorStyle)).append("\n");
    sb.append("    allMarketsSelectionsDisplayed: ").append(toIndentedString(allMarketsSelectionsDisplayed)).append("\n");
    sb.append("    hideBottomBanner: ").append(toIndentedString(hideBottomBanner)).append("\n");
    sb.append("    bottomBannerPlaylist: ").append(toIndentedString(bottomBannerPlaylist)).append("\n");
    sb.append("    hideCategoriesSelectorBar: ").append(toIndentedString(hideCategoriesSelectorBar)).append("\n");
    sb.append("    gameSettings: ").append(toIndentedString(gameSettings)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

