/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Betslip Profile Settings 
 */
@ApiModel(description = "Betslip Profile Settings ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class BetslipProfileSettings {
  /**
   * Selects the method that will be used to input the stake. 
   */
  @JsonAdapter(StakeInputEnum.Adapter.class)
  public enum StakeInputEnum {
    KEYPAD("KEYPAD"),
    
    KEYPAD_AND_TOKEN("KEYPAD_AND_TOKEN");

    private String value;

    StakeInputEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StakeInputEnum fromValue(String text) {
      for (StakeInputEnum b : StakeInputEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StakeInputEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StakeInputEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StakeInputEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StakeInputEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("stakeInput")
  private StakeInputEnum stakeInput = null;

  /**
   * Selects the betslip mode. 
   */
  @JsonAdapter(BetslipModeEnum.Adapter.class)
  public enum BetslipModeEnum {
    STANDARD("STANDARD"),
    
    TAB("TAB");

    private String value;

    BetslipModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BetslipModeEnum fromValue(String text) {
      for (BetslipModeEnum b : BetslipModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BetslipModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BetslipModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BetslipModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BetslipModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("betslipMode")
  private BetslipModeEnum betslipMode = null;

  /**
   * Selects the way that bets are placed when using STANDARD betslip mode. 
   */
  @JsonAdapter(StandardViewBetModeEnum.Adapter.class)
  public enum StandardViewBetModeEnum {
    LIST("LIST"),
    
    CHIPS("CHIPS");

    private String value;

    StandardViewBetModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StandardViewBetModeEnum fromValue(String text) {
      for (StandardViewBetModeEnum b : StandardViewBetModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StandardViewBetModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardViewBetModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StandardViewBetModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StandardViewBetModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("standardViewBetMode")
  private StandardViewBetModeEnum standardViewBetMode = null;

  /**
   * Selects the way that system bets are placed when using TAB betslip mode. 
   */
  @JsonAdapter(TabViewSystemModeEnum.Adapter.class)
  public enum TabViewSystemModeEnum {
    LIST("LIST"),
    
    RADIO("RADIO");

    private String value;

    TabViewSystemModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TabViewSystemModeEnum fromValue(String text) {
      for (TabViewSystemModeEnum b : TabViewSystemModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TabViewSystemModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TabViewSystemModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TabViewSystemModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TabViewSystemModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("tabViewSystemMode")
  private TabViewSystemModeEnum tabViewSystemMode = null;

  public BetslipProfileSettings stakeInput(StakeInputEnum stakeInput) {
    this.stakeInput = stakeInput;
    return this;
  }

   /**
   * Selects the method that will be used to input the stake. 
   * @return stakeInput
  **/
  @ApiModelProperty(value = "Selects the method that will be used to input the stake. ")
  public StakeInputEnum getStakeInput() {
    return stakeInput;
  }

  public void setStakeInput(StakeInputEnum stakeInput) {
    this.stakeInput = stakeInput;
  }

  public BetslipProfileSettings betslipMode(BetslipModeEnum betslipMode) {
    this.betslipMode = betslipMode;
    return this;
  }

   /**
   * Selects the betslip mode. 
   * @return betslipMode
  **/
  @ApiModelProperty(value = "Selects the betslip mode. ")
  public BetslipModeEnum getBetslipMode() {
    return betslipMode;
  }

  public void setBetslipMode(BetslipModeEnum betslipMode) {
    this.betslipMode = betslipMode;
  }

  public BetslipProfileSettings standardViewBetMode(StandardViewBetModeEnum standardViewBetMode) {
    this.standardViewBetMode = standardViewBetMode;
    return this;
  }

   /**
   * Selects the way that bets are placed when using STANDARD betslip mode. 
   * @return standardViewBetMode
  **/
  @ApiModelProperty(value = "Selects the way that bets are placed when using STANDARD betslip mode. ")
  public StandardViewBetModeEnum getStandardViewBetMode() {
    return standardViewBetMode;
  }

  public void setStandardViewBetMode(StandardViewBetModeEnum standardViewBetMode) {
    this.standardViewBetMode = standardViewBetMode;
  }

  public BetslipProfileSettings tabViewSystemMode(TabViewSystemModeEnum tabViewSystemMode) {
    this.tabViewSystemMode = tabViewSystemMode;
    return this;
  }

   /**
   * Selects the way that system bets are placed when using TAB betslip mode. 
   * @return tabViewSystemMode
  **/
  @ApiModelProperty(value = "Selects the way that system bets are placed when using TAB betslip mode. ")
  public TabViewSystemModeEnum getTabViewSystemMode() {
    return tabViewSystemMode;
  }

  public void setTabViewSystemMode(TabViewSystemModeEnum tabViewSystemMode) {
    this.tabViewSystemMode = tabViewSystemMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BetslipProfileSettings betslipProfileSettings = (BetslipProfileSettings) o;
    return Objects.equals(this.stakeInput, betslipProfileSettings.stakeInput) &&
        Objects.equals(this.betslipMode, betslipProfileSettings.betslipMode) &&
        Objects.equals(this.standardViewBetMode, betslipProfileSettings.standardViewBetMode) &&
        Objects.equals(this.tabViewSystemMode, betslipProfileSettings.tabViewSystemMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stakeInput, betslipMode, standardViewBetMode, tabViewSystemMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BetslipProfileSettings {\n");
    
    sb.append("    stakeInput: ").append(toIndentedString(stakeInput)).append("\n");
    sb.append("    betslipMode: ").append(toIndentedString(betslipMode)).append("\n");
    sb.append("    standardViewBetMode: ").append(toIndentedString(standardViewBetMode)).append("\n");
    sb.append("    tabViewSystemMode: ").append(toIndentedString(tabViewSystemMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

