/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.EventBlockData;
import java.io.IOException;

/**
 * Information about the event block 
 */
@ApiModel(description = "Information about the event block ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ChEventBlockData extends EventBlockData {
  @SerializedName("champId")
  private Integer champId = null;

  @SerializedName("weekDay")
  private Integer weekDay = null;

  @SerializedName("legOrder")
  private Integer legOrder = null;

  /**
   * Phase of the event block
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    GROUPS("GROUPS"),
    
    Q32("Q32"),
    
    Q16("Q16"),
    
    Q8("Q8"),
    
    Q4("Q4"),
    
    SEMIFINAL("SEMIFINAL"),
    
    FINAL("FINAL");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String text) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PhaseEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("phase")
  private PhaseEnum phase = null;

  @SerializedName("matchDay")
  private Integer matchDay = null;

  public ChEventBlockData champId(Integer champId) {
    this.champId = champId;
    return this;
  }

   /**
   * Unique competition ID
   * @return champId
  **/
  @ApiModelProperty(value = "Unique competition ID")
  public Integer getChampId() {
    return champId;
  }

  public void setChampId(Integer champId) {
    this.champId = champId;
  }

  public ChEventBlockData weekDay(Integer weekDay) {
    this.weekDay = weekDay;
    return this;
  }

   /**
   * Day of the matchday in which the match is played.           
   * @return weekDay
  **/
  @ApiModelProperty(value = "Day of the matchday in which the match is played.           ")
  public Integer getWeekDay() {
    return weekDay;
  }

  public void setWeekDay(Integer weekDay) {
    this.weekDay = weekDay;
  }

  public ChEventBlockData legOrder(Integer legOrder) {
    this.legOrder = legOrder;
    return this;
  }

   /**
   * If the knockout phase is a home-and-away basis, indicates first or second leg.    If not, always first.      
   * @return legOrder
  **/
  @ApiModelProperty(value = "If the knockout phase is a home-and-away basis, indicates first or second leg.    If not, always first.      ")
  public Integer getLegOrder() {
    return legOrder;
  }

  public void setLegOrder(Integer legOrder) {
    this.legOrder = legOrder;
  }

  public ChEventBlockData phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Phase of the event block
   * @return phase
  **/
  @ApiModelProperty(value = "Phase of the event block")
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }

  public ChEventBlockData matchDay(Integer matchDay) {
    this.matchDay = matchDay;
    return this;
  }

   /**
   * Match day of the event block
   * @return matchDay
  **/
  @ApiModelProperty(value = "Match day of the event block")
  public Integer getMatchDay() {
    return matchDay;
  }

  public void setMatchDay(Integer matchDay) {
    this.matchDay = matchDay;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChEventBlockData chEventBlockData = (ChEventBlockData) o;
    return Objects.equals(this.champId, chEventBlockData.champId) &&
        Objects.equals(this.weekDay, chEventBlockData.weekDay) &&
        Objects.equals(this.legOrder, chEventBlockData.legOrder) &&
        Objects.equals(this.phase, chEventBlockData.phase) &&
        Objects.equals(this.matchDay, chEventBlockData.matchDay) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(champId, weekDay, legOrder, phase, matchDay, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChEventBlockData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    champId: ").append(toIndentedString(champId)).append("\n");
    sb.append("    weekDay: ").append(toIndentedString(weekDay)).append("\n");
    sb.append("    legOrder: ").append(toIndentedString(legOrder)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    matchDay: ").append(toIndentedString(matchDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

