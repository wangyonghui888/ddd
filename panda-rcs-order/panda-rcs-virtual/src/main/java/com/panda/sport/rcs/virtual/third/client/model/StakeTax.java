/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.GenericTax;
import java.io.IOException;

/**
 * Specific tax for stake 
 */
@ApiModel(description = "Specific tax for stake ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class StakeTax extends GenericTax {
  /**
   * The formula used to calculate the coefficient to apply to gross amount is: INDIRECT  -&gt; 1 / (1 + taxPercent * 0.01) DIRECT    -&gt; 1 - taxPercent * 0.01 
   */
  @JsonAdapter(PercentageModeEnum.Adapter.class)
  public enum PercentageModeEnum {
    INDIRECT("INDIRECT"),
    
    DIRECT("DIRECT");

    private String value;

    PercentageModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PercentageModeEnum fromValue(String text) {
      for (PercentageModeEnum b : PercentageModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PercentageModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PercentageModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PercentageModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PercentageModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("percentageMode")
  private PercentageModeEnum percentageMode = null;

  public StakeTax percentageMode(PercentageModeEnum percentageMode) {
    this.percentageMode = percentageMode;
    return this;
  }

   /**
   * The formula used to calculate the coefficient to apply to gross amount is: INDIRECT  -&gt; 1 / (1 + taxPercent * 0.01) DIRECT    -&gt; 1 - taxPercent * 0.01 
   * @return percentageMode
  **/
  @ApiModelProperty(value = "The formula used to calculate the coefficient to apply to gross amount is: INDIRECT  -> 1 / (1 + taxPercent * 0.01) DIRECT    -> 1 - taxPercent * 0.01 ")
  public PercentageModeEnum getPercentageMode() {
    return percentageMode;
  }

  public void setPercentageMode(PercentageModeEnum percentageMode) {
    this.percentageMode = percentageMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StakeTax stakeTax = (StakeTax) o;
    return Objects.equals(this.percentageMode, stakeTax.percentageMode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentageMode, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StakeTax {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    percentageMode: ").append(toIndentedString(percentageMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

