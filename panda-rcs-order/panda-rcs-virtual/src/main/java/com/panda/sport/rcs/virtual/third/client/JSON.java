/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client;

import com.alibaba.fastjson.JSONObject;
import com.google.gson.*;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import com.panda.sport.rcs.virtual.third.client.model.*;
import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(Credential.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("APICredential".toUpperCase(), APICredential.class);
                classByDiscriminatorValue.put("GUIDCredential".toUpperCase(), GUIDCredential.class);
                classByDiscriminatorValue.put("OAuthCredential".toUpperCase(), OAuthCredential.class);
                classByDiscriminatorValue.put("UserPasswordCredential".toUpperCase(), UserPasswordCredential.class);
                classByDiscriminatorValue.put("Credential".toUpperCase(), Credential.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(CurrencyPolicy.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("AccumulatedRound".toUpperCase(), AccumulatedRound.class);
                classByDiscriminatorValue.put("NoAccumulatedTruncate".toUpperCase(), NoAccumulatedTruncate.class);
                classByDiscriminatorValue.put("CurrencyPolicy".toUpperCase(), CurrencyPolicy.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(TaxPolicy.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BalkansTaxPolicy".toUpperCase(), BalkansTaxPolicy.class);
                classByDiscriminatorValue.put("GenericTaxPolicy".toUpperCase(), GenericTaxPolicy.class);
                classByDiscriminatorValue.put("GreekTaxPolicy".toUpperCase(), GreekTaxPolicy.class);
                classByDiscriminatorValue.put("KenyaTaxPolicy".toUpperCase(), KenyaTaxPolicy.class);
                classByDiscriminatorValue.put("NoTaxPolicy".toUpperCase(), NoTaxPolicy.class);
                classByDiscriminatorValue.put("PolandTaxPolicy".toUpperCase(), PolandTaxPolicy.class);
                classByDiscriminatorValue.put("TaxPolicy".toUpperCase(), TaxPolicy.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(WalletResponse.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BaseWalletSellResponse".toUpperCase(), BaseWalletSellResponse.class);
                classByDiscriminatorValue.put("BaseWalletTransactionResponse".toUpperCase(), BaseWalletTransactionResponse.class);
                classByDiscriminatorValue.put("WalletResponse".toUpperCase(), WalletResponse.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerTypeSelector(Assets.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketAssets".toUpperCase(), BasketAssets.class);
                classByDiscriminatorValue.put("ChAssets".toUpperCase(), ChAssets.class);
                classByDiscriminatorValue.put("FightAssets".toUpperCase(), FightAssets.class);
                classByDiscriminatorValue.put("KnAssets".toUpperCase(), KnAssets.class);
                classByDiscriminatorValue.put("LlAssets".toUpperCase(), LlAssets.class);
                classByDiscriminatorValue.put("LottofiveAssets".toUpperCase(), LottofiveAssets.class);
                classByDiscriminatorValue.put("RacesAssets".toUpperCase(), RacesAssets.class);
                classByDiscriminatorValue.put("S2WAssets".toUpperCase(), S2WAssets.class);
                classByDiscriminatorValue.put("S7Assets".toUpperCase(), S7Assets.class);
                classByDiscriminatorValue.put("SnAssets".toUpperCase(), SnAssets.class);
                classByDiscriminatorValue.put("SxAssets".toUpperCase(), SxAssets.class);
                classByDiscriminatorValue.put("Assets".toUpperCase(), Assets.class);
                classByDiscriminatorValue.put("DogAssets".toUpperCase(), DogAssets.class);
                classByDiscriminatorValue.put("HorseAssets".toUpperCase(), HorseAssets.class);
                classByDiscriminatorValue.put("TrottingAssets".toUpperCase(), TrottingAssets.class);
                classByDiscriminatorValue.put("MotorbikeAssets".toUpperCase(), MotorbikeAssets.class);
                classByDiscriminatorValue.put("SpeedwayAssets".toUpperCase(), SpeedwayAssets.class);
                classByDiscriminatorValue.put("KartAssets".toUpperCase(), KartAssets.class);
                classByDiscriminatorValue.put("DirttrackAssets".toUpperCase(), DirttrackAssets.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EventBlockData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketEventBlockData".toUpperCase(), BasketEventBlockData.class);
                classByDiscriminatorValue.put("ChEventBlockData".toUpperCase(), ChEventBlockData.class);
                classByDiscriminatorValue.put("DirttrackEventBlockData".toUpperCase(), DirttrackEventBlockData.class);
                classByDiscriminatorValue.put("DogEventBlockData".toUpperCase(), DogEventBlockData.class);
                classByDiscriminatorValue.put("HorseEventBlockData".toUpperCase(), HorseEventBlockData.class);
                classByDiscriminatorValue.put("KartEventBlockData".toUpperCase(), KartEventBlockData.class);
                classByDiscriminatorValue.put("LlEventBlockData".toUpperCase(), LlEventBlockData.class);
                classByDiscriminatorValue.put("MotorbikeEventBlockData".toUpperCase(), MotorbikeEventBlockData.class);
                classByDiscriminatorValue.put("S2WEventBlockData".toUpperCase(), S2WEventBlockData.class);
                classByDiscriminatorValue.put("S7EventBlockData".toUpperCase(), S7EventBlockData.class);
                classByDiscriminatorValue.put("SpeedwayEventBlockData".toUpperCase(), SpeedwayEventBlockData.class);
                classByDiscriminatorValue.put("TrottingEventBlockData".toUpperCase(), TrottingEventBlockData.class);
                classByDiscriminatorValue.put("EventBlockData".toUpperCase(), EventBlockData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EventResultData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketEventResultData".toUpperCase(), BasketEventResultData.class);
                classByDiscriminatorValue.put("ChEventResultData".toUpperCase(), ChEventResultData.class);
                classByDiscriminatorValue.put("FightEventResultData".toUpperCase(), FightEventResultData.class);
                classByDiscriminatorValue.put("LlEventResultData".toUpperCase(), LlEventResultData.class);
                classByDiscriminatorValue.put("LottofiveEventResultData".toUpperCase(), LottofiveEventResultData.class);
                classByDiscriminatorValue.put("RaceEventResultData".toUpperCase(), RaceEventResultData.class);
                classByDiscriminatorValue.put("S2WEventResultData".toUpperCase(), S2WEventResultData.class);
                classByDiscriminatorValue.put("S7EventResultData".toUpperCase(), S7EventResultData.class);
                classByDiscriminatorValue.put("SxEventResultData".toUpperCase(), SxEventResultData.class);
                classByDiscriminatorValue.put("EventResultData".toUpperCase(), EventResultData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EventStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketEventStats".toUpperCase(), BasketEventStats.class);
                classByDiscriminatorValue.put("FootballEventStats".toUpperCase(), FootballEventStats.class);
                classByDiscriminatorValue.put("LlEventStats".toUpperCase(), LlEventStats.class);
                classByDiscriminatorValue.put("LottofiveEventStats".toUpperCase(), LottofiveEventStats.class);
                classByDiscriminatorValue.put("EventStats".toUpperCase(), EventStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(Filter.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketFilter".toUpperCase(), BasketFilter.class);
                classByDiscriminatorValue.put("ChFilter".toUpperCase(), ChFilter.class);
                classByDiscriminatorValue.put("FightFilter".toUpperCase(), FightFilter.class);
                classByDiscriminatorValue.put("KnFilter".toUpperCase(), KnFilter.class);
                classByDiscriminatorValue.put("LkFilter".toUpperCase(), LkFilter.class);
                classByDiscriminatorValue.put("LlFilter".toUpperCase(), LlFilter.class);
                classByDiscriminatorValue.put("LottofiveFilter".toUpperCase(), LottofiveFilter.class);
                classByDiscriminatorValue.put("RacesFilter".toUpperCase(), RacesFilter.class);
                classByDiscriminatorValue.put("S2WFilter".toUpperCase(), S2WFilter.class);
                classByDiscriminatorValue.put("S7Filter".toUpperCase(), S7Filter.class);
                classByDiscriminatorValue.put("SnFilter".toUpperCase(), SnFilter.class);
                classByDiscriminatorValue.put("SxFilter".toUpperCase(), SxFilter.class);
                classByDiscriminatorValue.put("Filter".toUpperCase(), Filter.class);
                classByDiscriminatorValue.put("DogFilter".toUpperCase(), DogFilter.class);
                classByDiscriminatorValue.put("HorseFilter".toUpperCase(), HorseFilter.class);
                classByDiscriminatorValue.put("TrottingFilter".toUpperCase(), TrottingFilter.class);
                classByDiscriminatorValue.put("MotorbikeFilter".toUpperCase(), MotorbikeFilter.class);
                classByDiscriminatorValue.put("SpeedwayFilter".toUpperCase(), SpeedwayFilter.class);
                classByDiscriminatorValue.put("KartFilter".toUpperCase(), KartFilter.class);
                classByDiscriminatorValue.put("DirttrackFilter".toUpperCase(), DirttrackFilter.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(GameEventData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketGameEventData".toUpperCase(), BasketGameEventData.class);
                classByDiscriminatorValue.put("FightGameEventData".toUpperCase(), FightGameEventData.class);
                classByDiscriminatorValue.put("LkGameEventData".toUpperCase(), LkGameEventData.class);
                classByDiscriminatorValue.put("LlGameEventData".toUpperCase(), LlGameEventData.class);
                classByDiscriminatorValue.put("LottofiveGameEventData".toUpperCase(), LottofiveGameEventData.class);
                classByDiscriminatorValue.put("RaceGameEventData".toUpperCase(), RaceGameEventData.class);
                classByDiscriminatorValue.put("S2WGameEventData".toUpperCase(), S2WGameEventData.class);
                classByDiscriminatorValue.put("S7GameEventData".toUpperCase(), S7GameEventData.class);
                classByDiscriminatorValue.put("GameEventData".toUpperCase(), GameEventData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(GameCashOutFixedOddSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketGameOddSettings".toUpperCase(), BasketGameOddSettings.class);
                classByDiscriminatorValue.put("GameCashOutFixedOddSettings".toUpperCase(), GameCashOutFixedOddSettings.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                return null;
            }
          })
          .registerTypeSelector(Participant.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketParticipant".toUpperCase(), BasketParticipant.class);
                classByDiscriminatorValue.put("EvDirttrackParticipant".toUpperCase(), EvDirttrackParticipant.class);
                classByDiscriminatorValue.put("EvDogParticipant".toUpperCase(), EvDogParticipant.class);
                classByDiscriminatorValue.put("EvHorseParticipant".toUpperCase(), EvHorseParticipant.class);
                classByDiscriminatorValue.put("EvKartParticipant".toUpperCase(), EvKartParticipant.class);
                classByDiscriminatorValue.put("EvMotorbikeParticipant".toUpperCase(), EvMotorbikeParticipant.class);
                classByDiscriminatorValue.put("EvSpeedwayParticipant".toUpperCase(), EvSpeedwayParticipant.class);
                classByDiscriminatorValue.put("EvTrottingParticipant".toUpperCase(), EvTrottingParticipant.class);
                classByDiscriminatorValue.put("FightParticipant".toUpperCase(), FightParticipant.class);
                classByDiscriminatorValue.put("FootballParticipant".toUpperCase(), FootballParticipant.class);
                classByDiscriminatorValue.put("RaceParticipant".toUpperCase(), RaceParticipant.class);
                classByDiscriminatorValue.put("Participant".toUpperCase(), Participant.class);
                classByDiscriminatorValue.put("KartParticipant".toUpperCase(), KartParticipant.class);
                classByDiscriminatorValue.put("DogParticipant".toUpperCase(), DogParticipant.class);
                classByDiscriminatorValue.put("HorseParticipant".toUpperCase(), HorseParticipant.class);
                classByDiscriminatorValue.put("TrottingParticipant".toUpperCase(), TrottingParticipant.class);
                classByDiscriminatorValue.put("MotorbikeParticipant".toUpperCase(), MotorbikeParticipant.class);
                classByDiscriminatorValue.put("SpeedwayParticipant".toUpperCase(), SpeedwayParticipant.class);
                classByDiscriminatorValue.put("KartParticipant".toUpperCase(), KartParticipant.class);
                classByDiscriminatorValue.put("DirttrackParticipant".toUpperCase(), DirttrackParticipant.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(TicketEventData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketTicketEventData".toUpperCase(), BasketTicketEventData.class);
                classByDiscriminatorValue.put("ChTicketEventData".toUpperCase(), ChTicketEventData.class);
                classByDiscriminatorValue.put("LottofiveTicketEventData".toUpperCase(), LottofiveTicketEventData.class);
                classByDiscriminatorValue.put("SxTicketEventData".toUpperCase(), SxTicketEventData.class);
                classByDiscriminatorValue.put("TicketEventData".toUpperCase(), TicketEventData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(ViewerProfileGameSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketViewerProfileGameSettings".toUpperCase(), BasketViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("ChViewerProfileGameSettings".toUpperCase(), ChViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("DirttrackViewerProfileGameSettings".toUpperCase(), DirttrackViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("DogViewerProfileGameSettings".toUpperCase(), DogViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("FightViewerProfileGameSettings".toUpperCase(), FightViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("HorseViewerProfileGameSettings".toUpperCase(), HorseViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("KartViewerProfileGameSettings".toUpperCase(), KartViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("KnViewerProfileGameSettings".toUpperCase(), KnViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("LkViewerProfileGameSettings".toUpperCase(), LkViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("LlViewerProfileGameSettings".toUpperCase(), LlViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("MotorbikeViewerProfileGameSettings".toUpperCase(), MotorbikeViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("S2WViewerProfileGameSettings".toUpperCase(), S2WViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("S7WViewerProfileGameSettings".toUpperCase(), S7WViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("SnViewerProfileGameSettings".toUpperCase(), SnViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("SpeedwayViewerProfileGameSettings".toUpperCase(), SpeedwayViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("SxViewerProfileGameSettings".toUpperCase(), SxViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("TrottingViewerProfileGameSettings".toUpperCase(), TrottingViewerProfileGameSettings.class);
                classByDiscriminatorValue.put("ViewerProfileGameSettings".toUpperCase(), ViewerProfileGameSettings.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(CashierProfileGameSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("ChCashierProfileGameSettings".toUpperCase(), ChCashierProfileGameSettings.class);
                classByDiscriminatorValue.put("LkCashierProfileGameSettings".toUpperCase(), LkCashierProfileGameSettings.class);
                classByDiscriminatorValue.put("SxCashierProfileGameSettings".toUpperCase(), SxCashierProfileGameSettings.class);
                classByDiscriminatorValue.put("CashierProfileGameSettings".toUpperCase(), CashierProfileGameSettings.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EventBlockStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("ChEventBlockStats".toUpperCase(), ChEventBlockStats.class);
                classByDiscriminatorValue.put("FightEventBlockStats".toUpperCase(), FightEventBlockStats.class);
                classByDiscriminatorValue.put("FootballEventBlockStats".toUpperCase(), FootballEventBlockStats.class);
                classByDiscriminatorValue.put("KnEventBlockStats".toUpperCase(), KnEventBlockStats.class);
                classByDiscriminatorValue.put("LkEventBlockStats".toUpperCase(), LkEventBlockStats.class);
                classByDiscriminatorValue.put("LlEventBlockStats".toUpperCase(), LlEventBlockStats.class);
                classByDiscriminatorValue.put("LottofiveEventBlockStats".toUpperCase(), LottofiveEventBlockStats.class);
                classByDiscriminatorValue.put("S2WEventBlockStats".toUpperCase(), S2WEventBlockStats.class);
                classByDiscriminatorValue.put("S7EventBlockStats".toUpperCase(), S7EventBlockStats.class);
                classByDiscriminatorValue.put("SnEventBlockStats".toUpperCase(), SnEventBlockStats.class);
                classByDiscriminatorValue.put("SxEventBlockStats".toUpperCase(), SxEventBlockStats.class);
                classByDiscriminatorValue.put("EventBlockStats".toUpperCase(), EventBlockStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(GameFixedOddSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("BasketGameOddSettings".toUpperCase(), BasketGameOddSettings.class);
                classByDiscriminatorValue.put("ChGameOddSettings".toUpperCase(), ChGameOddSettings.class);
                classByDiscriminatorValue.put("DirttrackGameOddSettings".toUpperCase(), DirttrackGameOddSettings.class);
                classByDiscriminatorValue.put("DogGameOddSettings".toUpperCase(), DogGameOddSettings.class);
                classByDiscriminatorValue.put("FightGameOddSettings".toUpperCase(), FightGameOddSettings.class);
                classByDiscriminatorValue.put("GameCashOutFixedOddSettings".toUpperCase(), GameCashOutFixedOddSettings.class);
                classByDiscriminatorValue.put("HorseGameOddSettings".toUpperCase(), HorseGameOddSettings.class);
                classByDiscriminatorValue.put("KartGameOddSettings".toUpperCase(), KartGameOddSettings.class);
                classByDiscriminatorValue.put("MotorbikeGameOddSettings".toUpperCase(), MotorbikeGameOddSettings.class);
                classByDiscriminatorValue.put("SpeedwayGameOddSettings".toUpperCase(), SpeedwayGameOddSettings.class);
                classByDiscriminatorValue.put("TrottingGameOddSettings".toUpperCase(), TrottingGameOddSettings.class);
                classByDiscriminatorValue.put("GameFixedOddSettings".toUpperCase(), GameFixedOddSettings.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                return null;
            }
          })
          .registerTypeSelector(MobileProfileGameSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("ChMobileProfileGameSettings".toUpperCase(), ChMobileProfileGameSettings.class);
                classByDiscriminatorValue.put("MobileProfileGameSettings".toUpperCase(), MobileProfileGameSettings.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(WebProfileGameSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("ChWebProfileGameSettings".toUpperCase(), ChWebProfileGameSettings.class);
                classByDiscriminatorValue.put("WebProfileGameSettings".toUpperCase(), WebProfileGameSettings.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(Context.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("CommissionContext".toUpperCase(), CommissionContext.class);
                classByDiscriminatorValue.put("ContactContext".toUpperCase(), ContactContext.class);
                classByDiscriminatorValue.put("GameContext".toUpperCase(), GameContext.class);
                classByDiscriminatorValue.put("InvoiceContext".toUpperCase(), InvoiceContext.class);
                classByDiscriminatorValue.put("JackpotContext".toUpperCase(), JackpotContext.class);
                classByDiscriminatorValue.put("LocalizationContext".toUpperCase(), LocalizationContext.class);
                classByDiscriminatorValue.put("LogContext".toUpperCase(), LogContext.class);
                classByDiscriminatorValue.put("LogispinProfilesContext".toUpperCase(), LogispinProfilesContext.class);
                classByDiscriminatorValue.put("ManagerContext".toUpperCase(), ManagerContext.class);
                classByDiscriminatorValue.put("OddContext".toUpperCase(), OddContext.class);
                classByDiscriminatorValue.put("ProfilesContext".toUpperCase(), ProfilesContext.class);
                classByDiscriminatorValue.put("RiskManagementContext".toUpperCase(), RiskManagementContext.class);
                classByDiscriminatorValue.put("TaxContext".toUpperCase(), TaxContext.class);
                classByDiscriminatorValue.put("TicketContext".toUpperCase(), TicketContext.class);
                classByDiscriminatorValue.put("UserLimitsContext".toUpperCase(), UserLimitsContext.class);
                classByDiscriminatorValue.put("WalletContext".toUpperCase(), WalletContext.class);
                classByDiscriminatorValue.put("Context".toUpperCase(), Context.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(Report.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("CommissionReport".toUpperCase(), CommissionReport.class);
                classByDiscriminatorValue.put("InvoiceReport".toUpperCase(), InvoiceReport.class);
                classByDiscriminatorValue.put("LottoResultReport".toUpperCase(), LottoResultReport.class);
                classByDiscriminatorValue.put("MoveEntityReport".toUpperCase(), MoveEntityReport.class);
                classByDiscriminatorValue.put("PosReport".toUpperCase(), PosReport.class);
                classByDiscriminatorValue.put("SettlementReport".toUpperCase(), SettlementReport.class);
                classByDiscriminatorValue.put("TurnoverReport".toUpperCase(), TurnoverReport.class);
                classByDiscriminatorValue.put("Report".toUpperCase(), Report.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(ReportData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("CommissionReportData".toUpperCase(), CommissionReportData.class);
                classByDiscriminatorValue.put("InvoiceReportData".toUpperCase(), InvoiceReportData.class);
                classByDiscriminatorValue.put("LottoResultReportData".toUpperCase(), LottoResultReportData.class);
                classByDiscriminatorValue.put("MoveEntityReportData".toUpperCase(), MoveEntityReportData.class);
                classByDiscriminatorValue.put("PosReportData".toUpperCase(), PosReportData.class);
                classByDiscriminatorValue.put("SettlementReportData".toUpperCase(), SettlementReportData.class);
                classByDiscriminatorValue.put("TurnoverReportData".toUpperCase(), TurnoverReportData.class);
                classByDiscriminatorValue.put("ReportData".toUpperCase(), ReportData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(ReportParams.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("CommissionReportParams".toUpperCase(), CommissionReportParams.class);
                classByDiscriminatorValue.put("InvoiceReportParams".toUpperCase(), InvoiceReportParams.class);
                classByDiscriminatorValue.put("LottoResultReportParams".toUpperCase(), LottoResultReportParams.class);
                classByDiscriminatorValue.put("MoveEntityReportParams".toUpperCase(), MoveEntityReportParams.class);
                classByDiscriminatorValue.put("PosReportParams".toUpperCase(), PosReportParams.class);
                classByDiscriminatorValue.put("SettlementReportParams".toUpperCase(), SettlementReportParams.class);
                classByDiscriminatorValue.put("TurnoverReportParams".toUpperCase(), TurnoverReportParams.class);
                classByDiscriminatorValue.put("ReportParams".toUpperCase(), ReportParams.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(BaseWalletCreditResponse.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("CreditResponse".toUpperCase(), CreditResponse.class);
                classByDiscriminatorValue.put("MultiWalletCreditResponse".toUpperCase(), MultiWalletCreditResponse.class);
                classByDiscriminatorValue.put("BaseWalletCreditResponse".toUpperCase(), BaseWalletCreditResponse.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerTypeSelector(BasicTax.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("CustomTax".toUpperCase(), CustomTax.class);
                classByDiscriminatorValue.put("CustomThresholdTax".toUpperCase(), CustomThresholdTax.class);
                classByDiscriminatorValue.put("BasicTax".toUpperCase(), BasicTax.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(Jackpot.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("DefaultJackpot".toUpperCase(), DefaultJackpot.class);
                classByDiscriminatorValue.put("Jackpot".toUpperCase(), Jackpot.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(ReportProcessStatus.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("DeliveringStatus".toUpperCase(), DeliveringStatus.class);
                classByDiscriminatorValue.put("GeneratingStatus".toUpperCase(), GeneratingStatus.class);
                classByDiscriminatorValue.put("RenderingStatus".toUpperCase(), RenderingStatus.class);
                classByDiscriminatorValue.put("ReportProcessStatus".toUpperCase(), ReportProcessStatus.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classtype"));
            }
          })
          .registerTypeSelector(RacesAssets.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("DirttrackAssets".toUpperCase(), DirttrackAssets.class);
                classByDiscriminatorValue.put("DogAssets".toUpperCase(), DogAssets.class);
                classByDiscriminatorValue.put("HorseAssets".toUpperCase(), HorseAssets.class);
                classByDiscriminatorValue.put("KartAssets".toUpperCase(), KartAssets.class);
                classByDiscriminatorValue.put("MotorbikeAssets".toUpperCase(), MotorbikeAssets.class);
                classByDiscriminatorValue.put("SpeedwayAssets".toUpperCase(), SpeedwayAssets.class);
                classByDiscriminatorValue.put("TrottingAssets".toUpperCase(), TrottingAssets.class);
                classByDiscriminatorValue.put("RacesAssets".toUpperCase(), RacesAssets.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                return null;
            }
          })
          .registerTypeSelector(RacesFilter.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("DirttrackFilter".toUpperCase(), DirttrackFilter.class);
                classByDiscriminatorValue.put("DogFilter".toUpperCase(), DogFilter.class);
                classByDiscriminatorValue.put("HorseFilter".toUpperCase(), HorseFilter.class);
                classByDiscriminatorValue.put("KartFilter".toUpperCase(), KartFilter.class);
                classByDiscriminatorValue.put("MotorbikeFilter".toUpperCase(), MotorbikeFilter.class);
                classByDiscriminatorValue.put("SpeedwayFilter".toUpperCase(), SpeedwayFilter.class);
                classByDiscriminatorValue.put("TrottingFilter".toUpperCase(), TrottingFilter.class);
                classByDiscriminatorValue.put("RacesFilter".toUpperCase(), RacesFilter.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
          .registerTypeSelector(RaceParticipant.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("DirttrackParticipant".toUpperCase(), DirttrackParticipant.class);
                classByDiscriminatorValue.put("DogParticipant".toUpperCase(), DogParticipant.class);
                classByDiscriminatorValue.put("HorseParticipant".toUpperCase(), HorseParticipant.class);
                classByDiscriminatorValue.put("KartParticipant".toUpperCase(), KartParticipant.class);
                classByDiscriminatorValue.put("MotorbikeParticipant".toUpperCase(), MotorbikeParticipant.class);
                classByDiscriminatorValue.put("SpeedwayParticipant".toUpperCase(), SpeedwayParticipant.class);
                classByDiscriminatorValue.put("TrottingParticipant".toUpperCase(), TrottingParticipant.class);
                classByDiscriminatorValue.put("RaceParticipant".toUpperCase(), RaceParticipant.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
          .registerTypeSelector(EbkData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EbkDataBasket".toUpperCase(), EbkDataBasket.class);
                classByDiscriminatorValue.put("EbkDataChampion".toUpperCase(), EbkDataChampion.class);
                classByDiscriminatorValue.put("EbkData".toUpperCase(), EbkData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EbkLiveStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EbkLiveStatsDirttrack".toUpperCase(), EbkLiveStatsDirttrack.class);
                classByDiscriminatorValue.put("EbkLiveStatsDog".toUpperCase(), EbkLiveStatsDog.class);
                classByDiscriminatorValue.put("EbkLiveStatsHorse".toUpperCase(), EbkLiveStatsHorse.class);
                classByDiscriminatorValue.put("EbkLiveStatsKart".toUpperCase(), EbkLiveStatsKart.class);
                classByDiscriminatorValue.put("EbkLiveStatsLiveLotto".toUpperCase(), EbkLiveStatsLiveLotto.class);
                classByDiscriminatorValue.put("EbkLiveStatsLottofive".toUpperCase(), EbkLiveStatsLottofive.class);
                classByDiscriminatorValue.put("EbkLiveStatsMotorbike".toUpperCase(), EbkLiveStatsMotorbike.class);
                classByDiscriminatorValue.put("EbkLiveStatsPerfectSix".toUpperCase(), EbkLiveStatsPerfectSix.class);
                classByDiscriminatorValue.put("EbkLiveStatsSpeedway".toUpperCase(), EbkLiveStatsSpeedway.class);
                classByDiscriminatorValue.put("EbkLiveStatsSpintowin".toUpperCase(), EbkLiveStatsSpintowin.class);
                classByDiscriminatorValue.put("EbkLiveStatsSuperSeven".toUpperCase(), EbkLiveStatsSuperSeven.class);
                classByDiscriminatorValue.put("EbkLiveStatsTrotting".toUpperCase(), EbkLiveStatsTrotting.class);
                classByDiscriminatorValue.put("EbkLiveStats".toUpperCase(), EbkLiveStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EbkStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EbkStatsChampion".toUpperCase(), EbkStatsChampion.class);
                classByDiscriminatorValue.put("EbkStatsFight".toUpperCase(), EbkStatsFight.class);
                classByDiscriminatorValue.put("EbkStatsHorse".toUpperCase(), EbkStatsHorse.class);
                classByDiscriminatorValue.put("EbkStatsKeno".toUpperCase(), EbkStatsKeno.class);
                classByDiscriminatorValue.put("EbkStatsLiveLotto".toUpperCase(), EbkStatsLiveLotto.class);
                classByDiscriminatorValue.put("EbkStatsLottofive".toUpperCase(), EbkStatsLottofive.class);
                classByDiscriminatorValue.put("EbkStatsPerfectSix".toUpperCase(), EbkStatsPerfectSix.class);
                classByDiscriminatorValue.put("EbkStatsSpin2Wheels".toUpperCase(), EbkStatsSpin2Wheels.class);
                classByDiscriminatorValue.put("EbkStatsSpintowin".toUpperCase(), EbkStatsSpintowin.class);
                classByDiscriminatorValue.put("EbkStatsSuperSeven".toUpperCase(), EbkStatsSuperSeven.class);
                classByDiscriminatorValue.put("EbkStats".toUpperCase(), EbkStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(ReportTarget.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EmailReportTarget".toUpperCase(), EmailReportTarget.class);
                classByDiscriminatorValue.put("FtpReportTarget".toUpperCase(), FtpReportTarget.class);
                classByDiscriminatorValue.put("ReportTarget".toUpperCase(), ReportTarget.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EntityInfo.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EntityChildren".toUpperCase(), EntityChildren.class);
                classByDiscriminatorValue.put("TreeItem".toUpperCase(), TreeItem.class);
                classByDiscriminatorValue.put("EntityInfo".toUpperCase(), EntityInfo.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
          .registerTypeSelector(EvData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EvDataBasket".toUpperCase(), EvDataBasket.class);
                classByDiscriminatorValue.put("EvDataChampion".toUpperCase(), EvDataChampion.class);
                classByDiscriminatorValue.put("EvDataDirttrack".toUpperCase(), EvDataDirttrack.class);
                classByDiscriminatorValue.put("EvDataDog".toUpperCase(), EvDataDog.class);
                classByDiscriminatorValue.put("EvDataFight".toUpperCase(), EvDataFight.class);
                classByDiscriminatorValue.put("EvDataHorse".toUpperCase(), EvDataHorse.class);
                classByDiscriminatorValue.put("EvDataKart".toUpperCase(), EvDataKart.class);
                classByDiscriminatorValue.put("EvDataKeno".toUpperCase(), EvDataKeno.class);
                classByDiscriminatorValue.put("EvDataLiveKeno".toUpperCase(), EvDataLiveKeno.class);
                classByDiscriminatorValue.put("EvDataLiveLotto".toUpperCase(), EvDataLiveLotto.class);
                classByDiscriminatorValue.put("EvDataLottofive".toUpperCase(), EvDataLottofive.class);
                classByDiscriminatorValue.put("EvDataMotorbike".toUpperCase(), EvDataMotorbike.class);
                classByDiscriminatorValue.put("EvDataPerfectSix".toUpperCase(), EvDataPerfectSix.class);
                classByDiscriminatorValue.put("EvDataSpeedway".toUpperCase(), EvDataSpeedway.class);
                classByDiscriminatorValue.put("EvDataSpin2Wheels".toUpperCase(), EvDataSpin2Wheels.class);
                classByDiscriminatorValue.put("EvDataSpintowin".toUpperCase(), EvDataSpintowin.class);
                classByDiscriminatorValue.put("EvDataSuperSeven".toUpperCase(), EvDataSuperSeven.class);
                classByDiscriminatorValue.put("EvDataTrotting".toUpperCase(), EvDataTrotting.class);
                classByDiscriminatorValue.put("EvData".toUpperCase(), EvData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EvLiveStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EvLiveStatsDirttrack".toUpperCase(), EvLiveStatsDirttrack.class);
                classByDiscriminatorValue.put("EvLiveStatsDog".toUpperCase(), EvLiveStatsDog.class);
                classByDiscriminatorValue.put("EvLiveStatsHorse".toUpperCase(), EvLiveStatsHorse.class);
                classByDiscriminatorValue.put("EvLiveStatsKart".toUpperCase(), EvLiveStatsKart.class);
                classByDiscriminatorValue.put("EvLiveStatsLiveKeno".toUpperCase(), EvLiveStatsLiveKeno.class);
                classByDiscriminatorValue.put("EvLiveStatsLottofive".toUpperCase(), EvLiveStatsLottofive.class);
                classByDiscriminatorValue.put("EvLiveStatsMotorbike".toUpperCase(), EvLiveStatsMotorbike.class);
                classByDiscriminatorValue.put("EvLiveStatsPerfectSix".toUpperCase(), EvLiveStatsPerfectSix.class);
                classByDiscriminatorValue.put("EvLiveStatsSpeedway".toUpperCase(), EvLiveStatsSpeedway.class);
                classByDiscriminatorValue.put("EvLiveStatsSpintowin".toUpperCase(), EvLiveStatsSpintowin.class);
                classByDiscriminatorValue.put("EvLiveStatsTrotting".toUpperCase(), EvLiveStatsTrotting.class);
                classByDiscriminatorValue.put("EvLiveStats".toUpperCase(), EvLiveStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EvResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EvResultBasket".toUpperCase(), EvResultBasket.class);
                classByDiscriminatorValue.put("EvResultChampion".toUpperCase(), EvResultChampion.class);
                classByDiscriminatorValue.put("EvResultFight".toUpperCase(), EvResultFight.class);
                classByDiscriminatorValue.put("EvResultKeno".toUpperCase(), EvResultKeno.class);
                classByDiscriminatorValue.put("EvResultLiveKeno".toUpperCase(), EvResultLiveKeno.class);
                classByDiscriminatorValue.put("EvResultLiveLotto".toUpperCase(), EvResultLiveLotto.class);
                classByDiscriminatorValue.put("EvResultLottofive".toUpperCase(), EvResultLottofive.class);
                classByDiscriminatorValue.put("EvResultPerfectSix".toUpperCase(), EvResultPerfectSix.class);
                classByDiscriminatorValue.put("EvResultRaces".toUpperCase(), EvResultRaces.class);
                classByDiscriminatorValue.put("EvResultSpin2Wheels".toUpperCase(), EvResultSpin2Wheels.class);
                classByDiscriminatorValue.put("EvResultSpintowin".toUpperCase(), EvResultSpintowin.class);
                classByDiscriminatorValue.put("EvResultSuperSeven".toUpperCase(), EvResultSuperSeven.class);
                classByDiscriminatorValue.put("EvResult".toUpperCase(), EvResult.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EvResultRaces.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EvResultDirttrack".toUpperCase(), EvResultDirttrack.class);
                classByDiscriminatorValue.put("EvResultDog".toUpperCase(), EvResultDog.class);
                classByDiscriminatorValue.put("EvResultHorse".toUpperCase(), EvResultHorse.class);
                classByDiscriminatorValue.put("EvResultKart".toUpperCase(), EvResultKart.class);
                classByDiscriminatorValue.put("EvResultMotorbike".toUpperCase(), EvResultMotorbike.class);
                classByDiscriminatorValue.put("EvResultSpeedway".toUpperCase(), EvResultSpeedway.class);
                classByDiscriminatorValue.put("EvResultTrotting".toUpperCase(), EvResultTrotting.class);
                classByDiscriminatorValue.put("EvResultRaces".toUpperCase(), EvResultRaces.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
          .registerTypeSelector(EvStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("EvStatsBasket".toUpperCase(), EvStatsBasket.class);
                classByDiscriminatorValue.put("EvStatsChampion".toUpperCase(), EvStatsChampion.class);
                classByDiscriminatorValue.put("EvStatsPerfectSix".toUpperCase(), EvStatsPerfectSix.class);
                classByDiscriminatorValue.put("EvStatsSpintowin".toUpperCase(), EvStatsSpintowin.class);
                classByDiscriminatorValue.put("EvStats".toUpperCase(), EvStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(AuthResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("ExternalAuthResult".toUpperCase(), ExternalAuthResult.class);
                classByDiscriminatorValue.put("AuthResult".toUpperCase(), AuthResult.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                return null;
            }
          })
          .registerTypeSelector(GameOddSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("GameFixedOddSettings".toUpperCase(), GameFixedOddSettings.class);
                classByDiscriminatorValue.put("KnGameOddSettings".toUpperCase(), KnGameOddSettings.class);
                classByDiscriminatorValue.put("LkGameOddSettings".toUpperCase(), LkGameOddSettings.class);
                classByDiscriminatorValue.put("LlGameOddSettings".toUpperCase(), LlGameOddSettings.class);
                classByDiscriminatorValue.put("LottofiveGameOddSettings".toUpperCase(), LottofiveGameOddSettings.class);
                classByDiscriminatorValue.put("S2WGameOddSettings".toUpperCase(), S2WGameOddSettings.class);
                classByDiscriminatorValue.put("S7GameOddSettings".toUpperCase(), S7GameOddSettings.class);
                classByDiscriminatorValue.put("SnGameOddSettings".toUpperCase(), SnGameOddSettings.class);
                classByDiscriminatorValue.put("SxGameOddSettings".toUpperCase(), SxGameOddSettings.class);
                classByDiscriminatorValue.put("GameOddSettings".toUpperCase(), GameOddSettings.class);
                classByDiscriminatorValue.put("ChGameOddSettings".toUpperCase(), ChGameOddSettings.class);
                classByDiscriminatorValue.put("BasketGameOddSettings".toUpperCase(), BasketGameOddSettings.class);
                classByDiscriminatorValue.put("KartGameOddSettings".toUpperCase(), KartGameOddSettings.class);
                classByDiscriminatorValue.put("HorseGameOddSettings".toUpperCase(), HorseGameOddSettings.class);
                classByDiscriminatorValue.put("GenericGameOddSettings".toUpperCase(), GameOddSettings.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(TicketPolicy.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("GenericTicketPolicy".toUpperCase(), GenericTicketPolicy.class);
                classByDiscriminatorValue.put("TicketPolicy".toUpperCase(), TicketPolicy.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(JackpotTypeSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("JackpotBonusSettings".toUpperCase(), JackpotBonusSettings.class);
                classByDiscriminatorValue.put("JackpotStandardSettings".toUpperCase(), JackpotStandardSettings.class);
                classByDiscriminatorValue.put("JackpotTypeSettings".toUpperCase(), JackpotTypeSettings.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EntityBodyMessage.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("JackpotInfoMessage".toUpperCase(), JackpotInfoMessage.class);
                classByDiscriminatorValue.put("OddSettingMessage".toUpperCase(), OddSettingMessage.class);
                classByDiscriminatorValue.put("PlaylistMessage".toUpperCase(), PlaylistMessage.class);
                classByDiscriminatorValue.put("ResetMessage".toUpperCase(), ResetMessage.class);
                classByDiscriminatorValue.put("EntityBodyMessage".toUpperCase(), EntityBodyMessage.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(JackpotTypeData.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("JackpotStandardData".toUpperCase(), JackpotStandardData.class);
                classByDiscriminatorValue.put("JackpotTypeData".toUpperCase(), JackpotTypeData.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(JackpotTypeStatus.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("JackpotStandardStatus".toUpperCase(), JackpotStandardStatus.class);
                classByDiscriminatorValue.put("JackpotTypeStatus".toUpperCase(), JackpotTypeStatus.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(JackpotViewTypeInfo.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("JackpotViewBonusInfo".toUpperCase(), JackpotViewBonusInfo.class);
                classByDiscriminatorValue.put("JackpotViewTypeInfo".toUpperCase(), JackpotViewTypeInfo.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(LimitSettings.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("LimitSingleSettings".toUpperCase(), LimitSingleSettings.class);
                classByDiscriminatorValue.put("LimitsBonusSetting".toUpperCase(), LimitsBonusSetting.class);
                classByDiscriminatorValue.put("LimitSettings".toUpperCase(), LimitSettings.class);
                return null;
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, "LimitSettings"));
            }
          })
          .registerTypeSelector(EventLiveStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("LkEventLiveStats".toUpperCase(), LkEventLiveStats.class);
                classByDiscriminatorValue.put("LlEventLiveStats".toUpperCase(), LlEventLiveStats.class);
                classByDiscriminatorValue.put("LottofiveEventLiveStats".toUpperCase(), LottofiveEventLiveStats.class);
                classByDiscriminatorValue.put("EventLiveStats".toUpperCase(), EventLiveStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(EventBlockLiveStats.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("LlEventBlockLiveStats".toUpperCase(), LlEventBlockLiveStats.class);
                classByDiscriminatorValue.put("LottofiveEventBlockLiveStats".toUpperCase(), LottofiveEventBlockLiveStats.class);
                classByDiscriminatorValue.put("S7EventBlockLiveStats".toUpperCase(), S7EventBlockLiveStats.class);
                classByDiscriminatorValue.put("EventBlockLiveStats".toUpperCase(), EventBlockLiveStats.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(Display.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("MatrixDisplay".toUpperCase(), MatrixDisplay.class);
                classByDiscriminatorValue.put("SingleDisplay".toUpperCase(), SingleDisplay.class);
                classByDiscriminatorValue.put("TripleDisplay".toUpperCase(), TripleDisplay.class);
                classByDiscriminatorValue.put("Display".toUpperCase(), Display.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(BaseWalletSellResponse.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("MultiWalletSellResponse".toUpperCase(), MultiWalletSellResponse.class);
                classByDiscriminatorValue.put("SellResponse".toUpperCase(), SellResponse.class);
                classByDiscriminatorValue.put("BaseWalletSellResponse".toUpperCase(), BaseWalletSellResponse.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
          .registerTypeSelector(BaseWalletTransactionResponse.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("MultiWalletTransactionResponse".toUpperCase(), MultiWalletTransactionResponse.class);
                classByDiscriminatorValue.put("WalletCreditResponse".toUpperCase(), WalletCreditResponse.class);
                classByDiscriminatorValue.put("BaseWalletTransactionResponse".toUpperCase(), BaseWalletTransactionResponse.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
          .registerTypeSelector(WalletRequest.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("PayoutRequest".toUpperCase(), PayoutRequest.class);
                classByDiscriminatorValue.put("SellRequest".toUpperCase(), SellRequest.class);
                classByDiscriminatorValue.put("SolveRequest".toUpperCase(), SolveRequest.class);
                classByDiscriminatorValue.put("WalletRequest".toUpperCase(), WalletRequest.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "type"));
            }
          })
          .registerTypeSelector(GenericTax.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("PayoutTax".toUpperCase(), PayoutTax.class);
                classByDiscriminatorValue.put("StakeTax".toUpperCase(), StakeTax.class);
                classByDiscriminatorValue.put("GenericTax".toUpperCase(), GenericTax.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(Content.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("PlaylistContent".toUpperCase(), PlaylistContent.class);
                classByDiscriminatorValue.put("RotatingPlaylistContent".toUpperCase(), RotatingPlaylistContent.class);
                classByDiscriminatorValue.put("WidgetContent".toUpperCase(), WidgetContent.class);
                classByDiscriminatorValue.put("Content".toUpperCase(), Content.class);
                return getClassByDiscriminator(
                                           classByDiscriminatorValue,
                                           getDiscriminatorValue(readElement, "classType"));
            }
          })
          .registerTypeSelector(OddContext.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
                Map classByDiscriminatorValue = new HashMap();
                classByDiscriminatorValue.put("UnitSessionStatus".toUpperCase(), UnitSessionStatus.class);
                classByDiscriminatorValue.put("OddContext".toUpperCase(), OddContext.class);
//                return getClassByDiscriminator(
//                                           classByDiscriminatorValue,
//                                           getDiscriminatorValue(readElement, ""));
                
                return null;
            }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
        	try {
        		return Class.forName("com.panda.sport.rcs.virtual.third.client.model." + discriminatorValue);
        	}catch (Exception e) {
        		
			}
//            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        	clazz = Object.class;
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(byte[].class, byteArrayAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                try {
                    return gson.fromJson(body, returnType);
                } catch (Exception e) {
                    return JSONObject.parseObject(body, returnType);
                }
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
