/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import com.panda.sport.rcs.virtual.third.client.model.Job;
import org.threeten.bp.OffsetDateTime;
import com.panda.sport.rcs.virtual.third.client.model.Report;
import com.panda.sport.rcs.virtual.third.client.model.ReportParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportApi {
    private ApiClient apiClient;

    public ReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for jobSetStatus
     * @param jobId Id of job which status will change.  (required)
     * @param status Status that will be set  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobSetStatusCall(Long jobId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/jobs/setStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jobId", jobId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jobSetStatusValidateBeforeCall(Long jobId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobSetStatus(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling jobSetStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = jobSetStatusCall(jobId, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method find and returns a list of reports according to the request parameters. 
     * @param jobId Id of job which status will change.  (required)
     * @param status Status that will be set  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void jobSetStatus(Long jobId, String status) throws ApiException {
        jobSetStatusWithHttpInfo(jobId, status);
    }

    /**
     * 
     * This method find and returns a list of reports according to the request parameters. 
     * @param jobId Id of job which status will change.  (required)
     * @param status Status that will be set  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> jobSetStatusWithHttpInfo(Long jobId, String status) throws ApiException {
        com.squareup.okhttp.Call call = jobSetStatusValidateBeforeCall(jobId, status, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * This method find and returns a list of reports according to the request parameters. 
     * @param jobId Id of job which status will change.  (required)
     * @param status Status that will be set  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jobSetStatusAsync(Long jobId, String status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobSetStatusValidateBeforeCall(jobId, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for jobsFind
     * @param entityId Root entity for generation of this job.  (required)
     * @param startTime Start time of period to find (&gt;&#x3D;). Jobs that are running in the period [start, end)  (required)
     * @param creatorId Id of entity which requested generation of this job.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limit of period to find(&lt;). Jobs that are running in the period [start, end)  (optional)
     * @param status  (optional)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsFindCall(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, List<String> status, Integer n, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/jobs/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (creatorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creatorId", creatorId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (classType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classType", classType));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jobsFindValidateBeforeCall(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, List<String> status, Integer n, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jobsFind(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling jobsFind(Async)");
        }
        

        com.squareup.okhttp.Call call = jobsFindCall(entityId, startTime, creatorId, classType, endTime, status, n, orderBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method find and returns a list of jobs according to the request parameters. 
     * @param entityId Root entity for generation of this job.  (required)
     * @param startTime Start time of period to find (&gt;&#x3D;). Jobs that are running in the period [start, end)  (required)
     * @param creatorId Id of entity which requested generation of this job.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limit of period to find(&lt;). Jobs that are running in the period [start, end)  (optional)
     * @param status  (optional)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @return List&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Job> jobsFind(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, List<String> status, Integer n, String orderBy) throws ApiException {
        ApiResponse<List<Job>> resp = jobsFindWithHttpInfo(entityId, startTime, creatorId, classType, endTime, status, n, orderBy);
        return resp.getData();
    }

    /**
     * 
     * This method find and returns a list of jobs according to the request parameters. 
     * @param entityId Root entity for generation of this job.  (required)
     * @param startTime Start time of period to find (&gt;&#x3D;). Jobs that are running in the period [start, end)  (required)
     * @param creatorId Id of entity which requested generation of this job.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limit of period to find(&lt;). Jobs that are running in the period [start, end)  (optional)
     * @param status  (optional)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @return ApiResponse&lt;List&lt;Job&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Job>> jobsFindWithHttpInfo(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, List<String> status, Integer n, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = jobsFindValidateBeforeCall(entityId, startTime, creatorId, classType, endTime, status, n, orderBy, null, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method find and returns a list of jobs according to the request parameters. 
     * @param entityId Root entity for generation of this job.  (required)
     * @param startTime Start time of period to find (&gt;&#x3D;). Jobs that are running in the period [start, end)  (required)
     * @param creatorId Id of entity which requested generation of this job.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limit of period to find(&lt;). Jobs that are running in the period [start, end)  (optional)
     * @param status  (optional)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jobsFindAsync(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, List<String> status, Integer n, String orderBy, final ApiCallback<List<Job>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsFindValidateBeforeCall(entityId, startTime, creatorId, classType, endTime, status, n, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jobsFindByEntityId
     * @param entityId Root entity for generation of this job.  (required)
     * @param withChildren If true, find jobs for the entity and his children. If false, find jobs only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsFindByEntityIdCall(Integer entityId, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/jobs/findByEntityId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jobsFindByEntityIdValidateBeforeCall(Integer entityId, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jobsFindByEntityId(Async)");
        }
        

        com.squareup.okhttp.Call call = jobsFindByEntityIdCall(entityId, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method find and returns a job by entity id. 
     * @param entityId Root entity for generation of this job.  (required)
     * @param withChildren If true, find jobs for the entity and his children. If false, find jobs only for the entity. (optional, default to true)
     * @return List&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Job> jobsFindByEntityId(Integer entityId, Boolean withChildren) throws ApiException {
        ApiResponse<List<Job>> resp = jobsFindByEntityIdWithHttpInfo(entityId, withChildren);
        return resp.getData();
    }

    /**
     * 
     * This method find and returns a job by entity id. 
     * @param entityId Root entity for generation of this job.  (required)
     * @param withChildren If true, find jobs for the entity and his children. If false, find jobs only for the entity. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Job&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Job>> jobsFindByEntityIdWithHttpInfo(Integer entityId, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = jobsFindByEntityIdValidateBeforeCall(entityId, withChildren, null, null);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method find and returns a job by entity id. 
     * @param entityId Root entity for generation of this job.  (required)
     * @param withChildren If true, find jobs for the entity and his children. If false, find jobs only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jobsFindByEntityIdAsync(Integer entityId, Boolean withChildren, final ApiCallback<List<Job>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsFindByEntityIdValidateBeforeCall(entityId, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Job>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jobsFindById
     * @param jobId Id of the job.  (required)
     * @param entityId Root entity for generation of this job.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsFindByIdCall(Long jobId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/jobs/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jobId", jobId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jobsFindByIdValidateBeforeCall(Long jobId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsFindById(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jobsFindById(Async)");
        }
        

        com.squareup.okhttp.Call call = jobsFindByIdCall(jobId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method find and returns a job by id. 
     * @param jobId Id of the job.  (required)
     * @param entityId Root entity for generation of this job.  (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Job jobsFindById(Long jobId, Integer entityId) throws ApiException {
        ApiResponse<Job> resp = jobsFindByIdWithHttpInfo(jobId, entityId);
        return resp.getData();
    }

    /**
     * 
     * This method find and returns a job by id. 
     * @param jobId Id of the job.  (required)
     * @param entityId Root entity for generation of this job.  (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Job> jobsFindByIdWithHttpInfo(Long jobId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = jobsFindByIdValidateBeforeCall(jobId, entityId, null, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method find and returns a job by id. 
     * @param jobId Id of the job.  (required)
     * @param entityId Root entity for generation of this job.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jobsFindByIdAsync(Long jobId, Integer entityId, final ApiCallback<Job> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsFindByIdValidateBeforeCall(jobId, entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jobsRegister
     * @param scheduleTime Beginning of schedule time trigger frequency in seconds from midnight  (required)
     * @param frequencyTime The unit of frequency time Ex. Seconds / Natural days / Natural Week / Natural month  (required)
     * @param frequencyTimeZone Timezone used to calculate natural calendar time. The timezone difference with UTC reference time  (required)
     * @param frequencyAmount Amount of frequency units between each schedule job check, and sice of each slice of time  (required)
     * @param startTime Start time of original data related to this job (&gt;&#x3D;).  (required)
     * @param reportType Identifies the type of the report params/data Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param entityId Root entity for generation of the report.  (required)
     * @param description Human readable description of current report.  (required)
     * @param extId ExternalId reference to jobId generator.  (optional)
     * @param extGroupId Id used for aggregated reports on same creatorId.  (optional)
     * @param endTime End time, non inclusive limt of original data related to this job (&lt;)  (optional)
     * @param reportParams Human readable description of each report generated.  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param deprecationDays When report could be purged from the system (optional).  (optional)
     * @param status Status that will be set  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsRegisterCall(Integer scheduleTime, String frequencyTime, String frequencyTimeZone, Integer frequencyAmount, OffsetDateTime startTime, String reportType, Integer entityId, String description, String extId, String extGroupId, OffsetDateTime endTime, ReportParams reportParams, String fileName, Integer deprecationDays, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reportParams;

        // create path and map variables
        String localVarPath = "/reports/jobs/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (extGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extGroupId", extGroupId));
        if (scheduleTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduleTime", scheduleTime));
        if (frequencyTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("frequencyTime", frequencyTime));
        if (frequencyTimeZone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("frequencyTimeZone", frequencyTimeZone));
        if (frequencyAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("frequencyAmount", frequencyAmount));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (reportType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reportType", reportType));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (fileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));
        if (deprecationDays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deprecationDays", deprecationDays));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jobsRegisterValidateBeforeCall(Integer scheduleTime, String frequencyTime, String frequencyTimeZone, Integer frequencyAmount, OffsetDateTime startTime, String reportType, Integer entityId, String description, String extId, String extGroupId, OffsetDateTime endTime, ReportParams reportParams, String fileName, Integer deprecationDays, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduleTime' is set
        if (scheduleTime == null) {
            throw new ApiException("Missing the required parameter 'scheduleTime' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'frequencyTime' is set
        if (frequencyTime == null) {
            throw new ApiException("Missing the required parameter 'frequencyTime' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'frequencyTimeZone' is set
        if (frequencyTimeZone == null) {
            throw new ApiException("Missing the required parameter 'frequencyTimeZone' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'frequencyAmount' is set
        if (frequencyAmount == null) {
            throw new ApiException("Missing the required parameter 'frequencyAmount' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'reportType' is set
        if (reportType == null) {
            throw new ApiException("Missing the required parameter 'reportType' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jobsRegister(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling jobsRegister(Async)");
        }
        

        com.squareup.okhttp.Call call = jobsRegisterCall(scheduleTime, frequencyTime, frequencyTimeZone, frequencyAmount, startTime, reportType, entityId, description, extId, extGroupId, endTime, reportParams, fileName, deprecationDays, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method register the request of the job generation returns the unique identifier of the registred job. 
     * @param scheduleTime Beginning of schedule time trigger frequency in seconds from midnight  (required)
     * @param frequencyTime The unit of frequency time Ex. Seconds / Natural days / Natural Week / Natural month  (required)
     * @param frequencyTimeZone Timezone used to calculate natural calendar time. The timezone difference with UTC reference time  (required)
     * @param frequencyAmount Amount of frequency units between each schedule job check, and sice of each slice of time  (required)
     * @param startTime Start time of original data related to this job (&gt;&#x3D;).  (required)
     * @param reportType Identifies the type of the report params/data Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param entityId Root entity for generation of the report.  (required)
     * @param description Human readable description of current report.  (required)
     * @param extId ExternalId reference to jobId generator.  (optional)
     * @param extGroupId Id used for aggregated reports on same creatorId.  (optional)
     * @param endTime End time, non inclusive limt of original data related to this job (&lt;)  (optional)
     * @param reportParams Human readable description of each report generated.  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param deprecationDays When report could be purged from the system (optional).  (optional)
     * @param status Status that will be set  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long jobsRegister(Integer scheduleTime, String frequencyTime, String frequencyTimeZone, Integer frequencyAmount, OffsetDateTime startTime, String reportType, Integer entityId, String description, String extId, String extGroupId, OffsetDateTime endTime, ReportParams reportParams, String fileName, Integer deprecationDays, String status) throws ApiException {
        ApiResponse<Long> resp = jobsRegisterWithHttpInfo(scheduleTime, frequencyTime, frequencyTimeZone, frequencyAmount, startTime, reportType, entityId, description, extId, extGroupId, endTime, reportParams, fileName, deprecationDays, status);
        return resp.getData();
    }

    /**
     * 
     * This method register the request of the job generation returns the unique identifier of the registred job. 
     * @param scheduleTime Beginning of schedule time trigger frequency in seconds from midnight  (required)
     * @param frequencyTime The unit of frequency time Ex. Seconds / Natural days / Natural Week / Natural month  (required)
     * @param frequencyTimeZone Timezone used to calculate natural calendar time. The timezone difference with UTC reference time  (required)
     * @param frequencyAmount Amount of frequency units between each schedule job check, and sice of each slice of time  (required)
     * @param startTime Start time of original data related to this job (&gt;&#x3D;).  (required)
     * @param reportType Identifies the type of the report params/data Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param entityId Root entity for generation of the report.  (required)
     * @param description Human readable description of current report.  (required)
     * @param extId ExternalId reference to jobId generator.  (optional)
     * @param extGroupId Id used for aggregated reports on same creatorId.  (optional)
     * @param endTime End time, non inclusive limt of original data related to this job (&lt;)  (optional)
     * @param reportParams Human readable description of each report generated.  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param deprecationDays When report could be purged from the system (optional).  (optional)
     * @param status Status that will be set  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> jobsRegisterWithHttpInfo(Integer scheduleTime, String frequencyTime, String frequencyTimeZone, Integer frequencyAmount, OffsetDateTime startTime, String reportType, Integer entityId, String description, String extId, String extGroupId, OffsetDateTime endTime, ReportParams reportParams, String fileName, Integer deprecationDays, String status) throws ApiException {
        com.squareup.okhttp.Call call = jobsRegisterValidateBeforeCall(scheduleTime, frequencyTime, frequencyTimeZone, frequencyAmount, startTime, reportType, entityId, description, extId, extGroupId, endTime, reportParams, fileName, deprecationDays, status, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method register the request of the job generation returns the unique identifier of the registred job. 
     * @param scheduleTime Beginning of schedule time trigger frequency in seconds from midnight  (required)
     * @param frequencyTime The unit of frequency time Ex. Seconds / Natural days / Natural Week / Natural month  (required)
     * @param frequencyTimeZone Timezone used to calculate natural calendar time. The timezone difference with UTC reference time  (required)
     * @param frequencyAmount Amount of frequency units between each schedule job check, and sice of each slice of time  (required)
     * @param startTime Start time of original data related to this job (&gt;&#x3D;).  (required)
     * @param reportType Identifies the type of the report params/data Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param entityId Root entity for generation of the report.  (required)
     * @param description Human readable description of current report.  (required)
     * @param extId ExternalId reference to jobId generator.  (optional)
     * @param extGroupId Id used for aggregated reports on same creatorId.  (optional)
     * @param endTime End time, non inclusive limt of original data related to this job (&lt;)  (optional)
     * @param reportParams Human readable description of each report generated.  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param deprecationDays When report could be purged from the system (optional).  (optional)
     * @param status Status that will be set  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jobsRegisterAsync(Integer scheduleTime, String frequencyTime, String frequencyTimeZone, Integer frequencyAmount, OffsetDateTime startTime, String reportType, Integer entityId, String description, String extId, String extGroupId, OffsetDateTime endTime, ReportParams reportParams, String fileName, Integer deprecationDays, String status, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsRegisterValidateBeforeCall(scheduleTime, frequencyTime, frequencyTimeZone, frequencyAmount, startTime, reportType, entityId, description, extId, extGroupId, endTime, reportParams, fileName, deprecationDays, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportDeliver
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportDeliverCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/deliver";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reportId", reportId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportDeliverValidateBeforeCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportDeliver(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportDeliver(Async)");
        }
        

        com.squareup.okhttp.Call call = reportDeliverCall(reportId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Change the report status in order to be delivered. Report must be rendered to allow this operation.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reportDeliver(Long reportId, Integer entityId) throws ApiException {
        reportDeliverWithHttpInfo(reportId, entityId);
    }

    /**
     * 
     * Change the report status in order to be delivered. Report must be rendered to allow this operation.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reportDeliverWithHttpInfo(Long reportId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = reportDeliverValidateBeforeCall(reportId, entityId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Change the report status in order to be delivered. Report must be rendered to allow this operation.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportDeliverAsync(Long reportId, Integer entityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportDeliverValidateBeforeCall(reportId, entityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reportFind
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param creatorId Id of entity wich requested generation of this report.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param includeData true return ReportData, false don&#39;t return ReportData  (optional, default to false)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportFindCall(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, Boolean includeData, Integer n, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (creatorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creatorId", creatorId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (classType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classType", classType));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (includeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeData", includeData));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportFindValidateBeforeCall(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, Boolean includeData, Integer n, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportFind(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling reportFind(Async)");
        }
        

        com.squareup.okhttp.Call call = reportFindCall(entityId, startTime, creatorId, classType, endTime, includeData, n, orderBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method find and returns a list of reports according to the request parameters. 
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param creatorId Id of entity wich requested generation of this report.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param includeData true return ReportData, false don&#39;t return ReportData  (optional, default to false)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @return List&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Report> reportFind(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, Boolean includeData, Integer n, String orderBy) throws ApiException {
        ApiResponse<List<Report>> resp = reportFindWithHttpInfo(entityId, startTime, creatorId, classType, endTime, includeData, n, orderBy);
        return resp.getData();
    }

    /**
     * 
     * This method find and returns a list of reports according to the request parameters. 
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param creatorId Id of entity wich requested generation of this report.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param includeData true return ReportData, false don&#39;t return ReportData  (optional, default to false)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @return ApiResponse&lt;List&lt;Report&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Report>> reportFindWithHttpInfo(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, Boolean includeData, Integer n, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = reportFindValidateBeforeCall(entityId, startTime, creatorId, classType, endTime, includeData, n, orderBy, null, null);
        Type localVarReturnType = new TypeToken<List<Report>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method find and returns a list of reports according to the request parameters. 
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param creatorId Id of entity wich requested generation of this report.  (optional)
     * @param classType The kind of report that the user want to find.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (optional)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param includeData true return ReportData, false don&#39;t return ReportData  (optional, default to false)
     * @param n Number of elements to return.  If 0, get 5000 elements.  (optional, default to 5000)
     * @param orderBy Define order ASC or DESC  (optional, default to DESC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportFindAsync(Integer entityId, OffsetDateTime startTime, Integer creatorId, String classType, OffsetDateTime endTime, Boolean includeData, Integer n, String orderBy, final ApiCallback<List<Report>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportFindValidateBeforeCall(entityId, startTime, creatorId, classType, endTime, includeData, n, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Report>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportFindById
     * @param reportId Id of the report.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param includeData true return ReporData, false don&#39;t return ReportData  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportFindByIdCall(Long reportId, Integer entityId, Boolean includeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reportId", reportId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (includeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeData", includeData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportFindByIdValidateBeforeCall(Long reportId, Integer entityId, Boolean includeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportFindById(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportFindById(Async)");
        }
        

        com.squareup.okhttp.Call call = reportFindByIdCall(reportId, entityId, includeData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method find and returns a report by id. 
     * @param reportId Id of the report.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param includeData true return ReporData, false don&#39;t return ReportData  (optional, default to false)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Report reportFindById(Long reportId, Integer entityId, Boolean includeData) throws ApiException {
        ApiResponse<Report> resp = reportFindByIdWithHttpInfo(reportId, entityId, includeData);
        return resp.getData();
    }

    /**
     * 
     * This method find and returns a report by id. 
     * @param reportId Id of the report.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param includeData true return ReporData, false don&#39;t return ReportData  (optional, default to false)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Report> reportFindByIdWithHttpInfo(Long reportId, Integer entityId, Boolean includeData) throws ApiException {
        com.squareup.okhttp.Call call = reportFindByIdValidateBeforeCall(reportId, entityId, includeData, null, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method find and returns a report by id. 
     * @param reportId Id of the report.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param includeData true return ReporData, false don&#39;t return ReportData  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportFindByIdAsync(Long reportId, Integer entityId, Boolean includeData, final ApiCallback<Report> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportFindByIdValidateBeforeCall(reportId, entityId, includeData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportGenerate
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportGenerateCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reportId", reportId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportGenerateValidateBeforeCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportGenerate(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportGenerate(Async)");
        }
        

        com.squareup.okhttp.Call call = reportGenerateCall(reportId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Change the report status in order to be generated.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reportGenerate(Long reportId, Integer entityId) throws ApiException {
        reportGenerateWithHttpInfo(reportId, entityId);
    }

    /**
     * 
     * Change the report status in order to be generated.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reportGenerateWithHttpInfo(Long reportId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = reportGenerateValidateBeforeCall(reportId, entityId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Change the report status in order to be generated.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportGenerateAsync(Long reportId, Integer entityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportGenerateValidateBeforeCall(reportId, entityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reportGetContent
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportGetContentCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/getContent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reportId", reportId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportGetContentValidateBeforeCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportGetContent(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportGetContent(Async)");
        }
        

        com.squareup.okhttp.Call call = reportGetContentCall(reportId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the content of a report file by the report unique identifier. The format of the returned file depends on a negotiation between  the accepted formats in the RequestHeader and the supported formats in server side
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] reportGetContent(Long reportId, Integer entityId) throws ApiException {
        ApiResponse<byte[]> resp = reportGetContentWithHttpInfo(reportId, entityId);
        return resp.getData();
    }

    /**
     * 
     * Get the content of a report file by the report unique identifier. The format of the returned file depends on a negotiation between  the accepted formats in the RequestHeader and the supported formats in server side
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> reportGetContentWithHttpInfo(Long reportId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = reportGetContentValidateBeforeCall(reportId, entityId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the content of a report file by the report unique identifier. The format of the returned file depends on a negotiation between  the accepted formats in the RequestHeader and the supported formats in server side
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportGetContentAsync(Long reportId, Integer entityId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportGetContentValidateBeforeCall(reportId, entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportRegister
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param description Human readable description of current report.  (required)
     * @param classType The kind of report that the user want to register.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param deprecationTime When report could be purged from the system (optional).  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param params  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportRegisterCall(Integer entityId, OffsetDateTime startTime, String description, String classType, OffsetDateTime endTime, OffsetDateTime deprecationTime, String fileName, ReportParams params, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = params;

        // create path and map variables
        String localVarPath = "/reports/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (deprecationTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deprecationTime", deprecationTime));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (classType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classType", classType));
        if (fileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileName", fileName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportRegisterValidateBeforeCall(Integer entityId, OffsetDateTime startTime, String description, String classType, OffsetDateTime endTime, OffsetDateTime deprecationTime, String fileName, ReportParams params, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportRegister(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling reportRegister(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling reportRegister(Async)");
        }
        
        // verify the required parameter 'classType' is set
        if (classType == null) {
            throw new ApiException("Missing the required parameter 'classType' when calling reportRegister(Async)");
        }
        

        com.squareup.okhttp.Call call = reportRegisterCall(entityId, startTime, description, classType, endTime, deprecationTime, fileName, params, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method register the request of the report generation returns the unique identifier of the registred report. 
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param description Human readable description of current report.  (required)
     * @param classType The kind of report that the user want to register.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param deprecationTime When report could be purged from the system (optional).  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param params  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long reportRegister(Integer entityId, OffsetDateTime startTime, String description, String classType, OffsetDateTime endTime, OffsetDateTime deprecationTime, String fileName, ReportParams params) throws ApiException {
        ApiResponse<Long> resp = reportRegisterWithHttpInfo(entityId, startTime, description, classType, endTime, deprecationTime, fileName, params);
        return resp.getData();
    }

    /**
     * 
     * This method register the request of the report generation returns the unique identifier of the registred report. 
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param description Human readable description of current report.  (required)
     * @param classType The kind of report that the user want to register.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param deprecationTime When report could be purged from the system (optional).  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param params  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> reportRegisterWithHttpInfo(Integer entityId, OffsetDateTime startTime, String description, String classType, OffsetDateTime endTime, OffsetDateTime deprecationTime, String fileName, ReportParams params) throws ApiException {
        com.squareup.okhttp.Call call = reportRegisterValidateBeforeCall(entityId, startTime, description, classType, endTime, deprecationTime, fileName, params, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method register the request of the report generation returns the unique identifier of the registred report. 
     * @param entityId Root entity for generation of this report.  (required)
     * @param startTime Start time of original data related to this report (&gt;&#x3D;).  (required)
     * @param description Human readable description of current report.  (required)
     * @param classType The kind of report that the user want to register.  Ex. \&quot;InvoiceReport\&quot;, \&quot;SettlementReport\&quot;, \&quot;Turnover\&quot;, ...  (required)
     * @param endTime End time, non inclusive limt of original data related to this report (&lt;)  (optional)
     * @param deprecationTime When report could be purged from the system (optional).  (optional)
     * @param fileName Filename of current report to be attached on target.  (optional)
     * @param params  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportRegisterAsync(Integer entityId, OffsetDateTime startTime, String description, String classType, OffsetDateTime endTime, OffsetDateTime deprecationTime, String fileName, ReportParams params, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportRegisterValidateBeforeCall(entityId, startTime, description, classType, endTime, deprecationTime, fileName, params, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reportRender
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportRenderCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/render";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reportId", reportId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportRenderValidateBeforeCall(Long reportId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportRender(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling reportRender(Async)");
        }
        

        com.squareup.okhttp.Call call = reportRenderCall(reportId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Change the report status in order to be rendered. Report data must be generated to allow this operation.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reportRender(Long reportId, Integer entityId) throws ApiException {
        reportRenderWithHttpInfo(reportId, entityId);
    }

    /**
     * 
     * Change the report status in order to be rendered. Report data must be generated to allow this operation.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reportRenderWithHttpInfo(Long reportId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = reportRenderValidateBeforeCall(reportId, entityId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Change the report status in order to be rendered. Report data must be generated to allow this operation.
     * @param reportId Report Id.  (required)
     * @param entityId Root entity for generation of this report.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportRenderAsync(Long reportId, Integer entityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportRenderValidateBeforeCall(reportId, entityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
