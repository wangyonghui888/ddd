/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Context;
import com.panda.sport.rcs.virtual.third.client.model.TicketCancellationSetting;
import com.panda.sport.rcs.virtual.third.client.model.TicketCurrencySetting;
import com.panda.sport.rcs.virtual.third.client.model.TicketPolicy;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Ticket Context Settings 
 */
@ApiModel(description = "Ticket Context Settings ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class TicketContext extends Context {
  @SerializedName("currencySetting")
  private List<TicketCurrencySetting> currencySetting = null;

  @SerializedName("ticketPolicy")
  private TicketPolicy ticketPolicy = null;

  @SerializedName("ticketCancellationSetting")
  private TicketCancellationSetting ticketCancellationSetting = null;

  @SerializedName("parentCanCheck")
  private Boolean parentCanCheck = null;

  @SerializedName("siblingCanCheck")
  private Boolean siblingCanCheck = null;

  @SerializedName("childCanCheck")
  private Boolean childCanCheck = null;

  /**
   * Enable automatic credit or payment of a ticket after ticket is solved. 
   */
  @JsonAdapter(OnSolveEnum.Adapter.class)
  public enum OnSolveEnum {
    NONE("NONE"),
    
    CREDIT("CREDIT"),
    
    PAY("PAY");

    private String value;

    OnSolveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnSolveEnum fromValue(String text) {
      for (OnSolveEnum b : OnSolveEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OnSolveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnSolveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnSolveEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OnSolveEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("onSolve")
  private OnSolveEnum onSolve = null;

  @SerializedName("testStatus")
  private Boolean testStatus = null;

  @SerializedName("hashCodeLenght")
  private Integer hashCodeLenght = null;

  public TicketContext currencySetting(List<TicketCurrencySetting> currencySetting) {
    this.currencySetting = currencySetting;
    return this;
  }

  public TicketContext addCurrencySettingItem(TicketCurrencySetting currencySettingItem) {
    if (this.currencySetting == null) {
      this.currencySetting = new ArrayList<TicketCurrencySetting>();
    }
    this.currencySetting.add(currencySettingItem);
    return this;
  }

   /**
   * Stake and payout limits, and currency policy rounding setting. 
   * @return currencySetting
  **/
  @ApiModelProperty(value = "Stake and payout limits, and currency policy rounding setting. ")
  public List<TicketCurrencySetting> getCurrencySetting() {
    return currencySetting;
  }

  public void setCurrencySetting(List<TicketCurrencySetting> currencySetting) {
    this.currencySetting = currencySetting;
  }

  public TicketContext ticketPolicy(TicketPolicy ticketPolicy) {
    this.ticketPolicy = ticketPolicy;
    return this;
  }

   /**
   * Get ticketPolicy
   * @return ticketPolicy
  **/
  @ApiModelProperty(value = "")
  public TicketPolicy getTicketPolicy() {
    return ticketPolicy;
  }

  public void setTicketPolicy(TicketPolicy ticketPolicy) {
    this.ticketPolicy = ticketPolicy;
  }

  public TicketContext ticketCancellationSetting(TicketCancellationSetting ticketCancellationSetting) {
    this.ticketCancellationSetting = ticketCancellationSetting;
    return this;
  }

   /**
   * Get ticketCancellationSetting
   * @return ticketCancellationSetting
  **/
  @ApiModelProperty(value = "")
  public TicketCancellationSetting getTicketCancellationSetting() {
    return ticketCancellationSetting;
  }

  public void setTicketCancellationSetting(TicketCancellationSetting ticketCancellationSetting) {
    this.ticketCancellationSetting = ticketCancellationSetting;
  }

  public TicketContext parentCanCheck(Boolean parentCanCheck) {
    this.parentCanCheck = parentCanCheck;
    return this;
  }

   /**
   * All parents can operate on the tickets, regardless of their level of descent. 
   * @return parentCanCheck
  **/
  @ApiModelProperty(value = "All parents can operate on the tickets, regardless of their level of descent. ")
  public Boolean isParentCanCheck() {
    return parentCanCheck;
  }

  public void setParentCanCheck(Boolean parentCanCheck) {
    this.parentCanCheck = parentCanCheck;
  }

  public TicketContext siblingCanCheck(Boolean siblingCanCheck) {
    this.siblingCanCheck = siblingCanCheck;
    return this;
  }

   /**
   * Indicates that all entities with the same parent can operate on the tickets. 
   * @return siblingCanCheck
  **/
  @ApiModelProperty(value = "Indicates that all entities with the same parent can operate on the tickets. ")
  public Boolean isSiblingCanCheck() {
    return siblingCanCheck;
  }

  public void setSiblingCanCheck(Boolean siblingCanCheck) {
    this.siblingCanCheck = siblingCanCheck;
  }

  public TicketContext childCanCheck(Boolean childCanCheck) {
    this.childCanCheck = childCanCheck;
    return this;
  }

   /**
   * All children can operate on the tickets, regardless of the level of descent. 
   * @return childCanCheck
  **/
  @ApiModelProperty(value = "All children can operate on the tickets, regardless of the level of descent. ")
  public Boolean isChildCanCheck() {
    return childCanCheck;
  }

  public void setChildCanCheck(Boolean childCanCheck) {
    this.childCanCheck = childCanCheck;
  }

  public TicketContext onSolve(OnSolveEnum onSolve) {
    this.onSolve = onSolve;
    return this;
  }

   /**
   * Enable automatic credit or payment of a ticket after ticket is solved. 
   * @return onSolve
  **/
  @ApiModelProperty(value = "Enable automatic credit or payment of a ticket after ticket is solved. ")
  public OnSolveEnum getOnSolve() {
    return onSolve;
  }

  public void setOnSolve(OnSolveEnum onSolve) {
    this.onSolve = onSolve;
  }

  public TicketContext testStatus(Boolean testStatus) {
    this.testStatus = testStatus;
    return this;
  }

   /**
   * Indicates that tickets made with this settings will be set as TEST. 
   * @return testStatus
  **/
  @ApiModelProperty(value = "Indicates that tickets made with this settings will be set as TEST. ")
  public Boolean isTestStatus() {
    return testStatus;
  }

  public void setTestStatus(Boolean testStatus) {
    this.testStatus = testStatus;
  }

  public TicketContext hashCodeLenght(Integer hashCodeLenght) {
    this.hashCodeLenght = hashCodeLenght;
    return this;
  }

   /**
   * Number of characters to generate and add to the ticket as a HashCode. The minimum is 0 (disabled) and the maximum is 4.
   * minimum: 0
   * maximum: 4
   * @return hashCodeLenght
  **/
  @ApiModelProperty(value = "Number of characters to generate and add to the ticket as a HashCode. The minimum is 0 (disabled) and the maximum is 4.")
  public Integer getHashCodeLenght() {
    return hashCodeLenght;
  }

  public void setHashCodeLenght(Integer hashCodeLenght) {
    this.hashCodeLenght = hashCodeLenght;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketContext ticketContext = (TicketContext) o;
    return Objects.equals(this.currencySetting, ticketContext.currencySetting) &&
        Objects.equals(this.ticketPolicy, ticketContext.ticketPolicy) &&
        Objects.equals(this.ticketCancellationSetting, ticketContext.ticketCancellationSetting) &&
        Objects.equals(this.parentCanCheck, ticketContext.parentCanCheck) &&
        Objects.equals(this.siblingCanCheck, ticketContext.siblingCanCheck) &&
        Objects.equals(this.childCanCheck, ticketContext.childCanCheck) &&
        Objects.equals(this.onSolve, ticketContext.onSolve) &&
        Objects.equals(this.testStatus, ticketContext.testStatus) &&
        Objects.equals(this.hashCodeLenght, ticketContext.hashCodeLenght) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencySetting, ticketPolicy, ticketCancellationSetting, parentCanCheck, siblingCanCheck, childCanCheck, onSolve, testStatus, hashCodeLenght, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketContext {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    currencySetting: ").append(toIndentedString(currencySetting)).append("\n");
    sb.append("    ticketPolicy: ").append(toIndentedString(ticketPolicy)).append("\n");
    sb.append("    ticketCancellationSetting: ").append(toIndentedString(ticketCancellationSetting)).append("\n");
    sb.append("    parentCanCheck: ").append(toIndentedString(parentCanCheck)).append("\n");
    sb.append("    siblingCanCheck: ").append(toIndentedString(siblingCanCheck)).append("\n");
    sb.append("    childCanCheck: ").append(toIndentedString(childCanCheck)).append("\n");
    sb.append("    onSolve: ").append(toIndentedString(onSolve)).append("\n");
    sb.append("    testStatus: ").append(toIndentedString(testStatus)).append("\n");
    sb.append("    hashCodeLenght: ").append(toIndentedString(hashCodeLenght)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

