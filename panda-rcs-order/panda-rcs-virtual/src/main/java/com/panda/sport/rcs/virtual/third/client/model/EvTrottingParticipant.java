/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Participant;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The trotting race participant information. 
 */
@ApiModel(description = "The trotting race participant information. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class EvTrottingParticipant extends Participant {
  @SerializedName("name")
  private String name = null;

  @SerializedName("jockey")
  private String jockey = null;

  @SerializedName("jockeyForecast")
  private List<String> jockeyForecast = null;

  @SerializedName("sex")
  private String sex = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("speed")
  private Float speed = null;

  @SerializedName("stamina")
  private Float stamina = null;

  @SerializedName("wins")
  private Float wins = null;

  @SerializedName("place")
  private Float place = null;

  @SerializedName("timeOff")
  private Integer timeOff = null;

  @SerializedName("art")
  private Float art = null;

  @SerializedName("ability")
  private Float ability = null;

  @SerializedName("star")
  private Integer star = null;

  @SerializedName("handicap")
  private Float handicap = null;

  @SerializedName("handicapPrev")
  private Float handicapPrev = null;

  @SerializedName("pace")
  private String pace = null;

  /**
   * Gets or Sets group
   */
  @JsonAdapter(GroupEnum.Adapter.class)
  public enum GroupEnum {
    NORMAL("NORMAL"),
    
    SLOW("SLOW");

    private String value;

    GroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupEnum fromValue(String text) {
      for (GroupEnum b : GroupEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("group")
  private GroupEnum group = null;

  public EvTrottingParticipant name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public EvTrottingParticipant jockey(String jockey) {
    this.jockey = jockey;
    return this;
  }

   /**
   * Get jockey
   * @return jockey
  **/
  @ApiModelProperty(value = "")
  public String getJockey() {
    return jockey;
  }

  public void setJockey(String jockey) {
    this.jockey = jockey;
  }

  public EvTrottingParticipant jockeyForecast(List<String> jockeyForecast) {
    this.jockeyForecast = jockeyForecast;
    return this;
  }

  public EvTrottingParticipant addJockeyForecastItem(String jockeyForecastItem) {
    if (this.jockeyForecast == null) {
      this.jockeyForecast = new ArrayList<String>();
    }
    this.jockeyForecast.add(jockeyForecastItem);
    return this;
  }

   /**
   * Points system: First position - 4 points. Second position 2 points. Third position 1 point.     
   * @return jockeyForecast
  **/
  @ApiModelProperty(value = "Points system: First position - 4 points. Second position 2 points. Third position 1 point.     ")
  public List<String> getJockeyForecast() {
    return jockeyForecast;
  }

  public void setJockeyForecast(List<String> jockeyForecast) {
    this.jockeyForecast = jockeyForecast;
  }

  public EvTrottingParticipant sex(String sex) {
    this.sex = sex;
    return this;
  }

   /**
   * Get sex
   * @return sex
  **/
  @ApiModelProperty(value = "")
  public String getSex() {
    return sex;
  }

  public void setSex(String sex) {
    this.sex = sex;
  }

  public EvTrottingParticipant color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @ApiModelProperty(value = "")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public EvTrottingParticipant speed(Float speed) {
    this.speed = speed;
    return this;
  }

   /**
   * Get speed
   * @return speed
  **/
  @ApiModelProperty(value = "")
  public Float getSpeed() {
    return speed;
  }

  public void setSpeed(Float speed) {
    this.speed = speed;
  }

  public EvTrottingParticipant stamina(Float stamina) {
    this.stamina = stamina;
    return this;
  }

   /**
   * Get stamina
   * @return stamina
  **/
  @ApiModelProperty(value = "")
  public Float getStamina() {
    return stamina;
  }

  public void setStamina(Float stamina) {
    this.stamina = stamina;
  }

  public EvTrottingParticipant wins(Float wins) {
    this.wins = wins;
    return this;
  }

   /**
   * Get wins
   * @return wins
  **/
  @ApiModelProperty(value = "")
  public Float getWins() {
    return wins;
  }

  public void setWins(Float wins) {
    this.wins = wins;
  }

  public EvTrottingParticipant place(Float place) {
    this.place = place;
    return this;
  }

   /**
   * Get place
   * @return place
  **/
  @ApiModelProperty(value = "")
  public Float getPlace() {
    return place;
  }

  public void setPlace(Float place) {
    this.place = place;
  }

  public EvTrottingParticipant timeOff(Integer timeOff) {
    this.timeOff = timeOff;
    return this;
  }

   /**
   * Get timeOff
   * @return timeOff
  **/
  @ApiModelProperty(value = "")
  public Integer getTimeOff() {
    return timeOff;
  }

  public void setTimeOff(Integer timeOff) {
    this.timeOff = timeOff;
  }

  public EvTrottingParticipant art(Float art) {
    this.art = art;
    return this;
  }

   /**
   * Get art
   * @return art
  **/
  @ApiModelProperty(value = "")
  public Float getArt() {
    return art;
  }

  public void setArt(Float art) {
    this.art = art;
  }

  public EvTrottingParticipant ability(Float ability) {
    this.ability = ability;
    return this;
  }

   /**
   * Get ability
   * @return ability
  **/
  @ApiModelProperty(value = "")
  public Float getAbility() {
    return ability;
  }

  public void setAbility(Float ability) {
    this.ability = ability;
  }

  public EvTrottingParticipant star(Integer star) {
    this.star = star;
    return this;
  }

   /**
   * Get star
   * @return star
  **/
  @ApiModelProperty(value = "")
  public Integer getStar() {
    return star;
  }

  public void setStar(Integer star) {
    this.star = star;
  }

  public EvTrottingParticipant handicap(Float handicap) {
    this.handicap = handicap;
    return this;
  }

   /**
   * Get handicap
   * @return handicap
  **/
  @ApiModelProperty(value = "")
  public Float getHandicap() {
    return handicap;
  }

  public void setHandicap(Float handicap) {
    this.handicap = handicap;
  }

  public EvTrottingParticipant handicapPrev(Float handicapPrev) {
    this.handicapPrev = handicapPrev;
    return this;
  }

   /**
   * Get handicapPrev
   * @return handicapPrev
  **/
  @ApiModelProperty(value = "")
  public Float getHandicapPrev() {
    return handicapPrev;
  }

  public void setHandicapPrev(Float handicapPrev) {
    this.handicapPrev = handicapPrev;
  }

  public EvTrottingParticipant pace(String pace) {
    this.pace = pace;
    return this;
  }

   /**
   * Get pace
   * @return pace
  **/
  @ApiModelProperty(value = "")
  public String getPace() {
    return pace;
  }

  public void setPace(String pace) {
    this.pace = pace;
  }

  public EvTrottingParticipant group(GroupEnum group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @ApiModelProperty(value = "")
  public GroupEnum getGroup() {
    return group;
  }

  public void setGroup(GroupEnum group) {
    this.group = group;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvTrottingParticipant evTrottingParticipant = (EvTrottingParticipant) o;
    return Objects.equals(this.name, evTrottingParticipant.name) &&
        Objects.equals(this.jockey, evTrottingParticipant.jockey) &&
        Objects.equals(this.jockeyForecast, evTrottingParticipant.jockeyForecast) &&
        Objects.equals(this.sex, evTrottingParticipant.sex) &&
        Objects.equals(this.color, evTrottingParticipant.color) &&
        Objects.equals(this.speed, evTrottingParticipant.speed) &&
        Objects.equals(this.stamina, evTrottingParticipant.stamina) &&
        Objects.equals(this.wins, evTrottingParticipant.wins) &&
        Objects.equals(this.place, evTrottingParticipant.place) &&
        Objects.equals(this.timeOff, evTrottingParticipant.timeOff) &&
        Objects.equals(this.art, evTrottingParticipant.art) &&
        Objects.equals(this.ability, evTrottingParticipant.ability) &&
        Objects.equals(this.star, evTrottingParticipant.star) &&
        Objects.equals(this.handicap, evTrottingParticipant.handicap) &&
        Objects.equals(this.handicapPrev, evTrottingParticipant.handicapPrev) &&
        Objects.equals(this.pace, evTrottingParticipant.pace) &&
        Objects.equals(this.group, evTrottingParticipant.group) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, jockey, jockeyForecast, sex, color, speed, stamina, wins, place, timeOff, art, ability, star, handicap, handicapPrev, pace, group, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvTrottingParticipant {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    jockey: ").append(toIndentedString(jockey)).append("\n");
    sb.append("    jockeyForecast: ").append(toIndentedString(jockeyForecast)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    stamina: ").append(toIndentedString(stamina)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    timeOff: ").append(toIndentedString(timeOff)).append("\n");
    sb.append("    art: ").append(toIndentedString(art)).append("\n");
    sb.append("    ability: ").append(toIndentedString(ability)).append("\n");
    sb.append("    star: ").append(toIndentedString(star)).append("\n");
    sb.append("    handicap: ").append(toIndentedString(handicap)).append("\n");
    sb.append("    handicapPrev: ").append(toIndentedString(handicapPrev)).append("\n");
    sb.append("    pace: ").append(toIndentedString(pace)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

