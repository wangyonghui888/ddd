/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.BasketEventBlockData;
import com.panda.sport.rcs.virtual.third.client.model.BasketParticipant;
import com.panda.sport.rcs.virtual.third.client.model.TicketEventData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Information about basket event in tickets. 
 */
@ApiModel(description = "Information about basket event in tickets. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class BasketTicketEventData extends TicketEventData {
  @SerializedName("participants")
  private List<BasketParticipant> participants = null;

  @SerializedName("data")
  private BasketEventBlockData data = null;

  @SerializedName("matchOrder")
  private Integer matchOrder = null;

  public BasketTicketEventData participants(List<BasketParticipant> participants) {
    this.participants = participants;
    return this;
  }

  public BasketTicketEventData addParticipantsItem(BasketParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<BasketParticipant>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Participants. Open for extensibility. 
   * @return participants
  **/
  @ApiModelProperty(value = "Participants. Open for extensibility. ")
  public List<BasketParticipant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<BasketParticipant> participants) {
    this.participants = participants;
  }

  public BasketTicketEventData data(BasketEventBlockData data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @ApiModelProperty(value = "")
  public BasketEventBlockData getData() {
    return data;
  }

  public void setData(BasketEventBlockData data) {
    this.data = data;
  }

  public BasketTicketEventData matchOrder(Integer matchOrder) {
    this.matchOrder = matchOrder;
    return this;
  }

   /**
   * Order of the basket match 
   * @return matchOrder
  **/
  @ApiModelProperty(value = "Order of the basket match ")
  public Integer getMatchOrder() {
    return matchOrder;
  }

  public void setMatchOrder(Integer matchOrder) {
    this.matchOrder = matchOrder;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasketTicketEventData basketTicketEventData = (BasketTicketEventData) o;
    return Objects.equals(this.participants, basketTicketEventData.participants) &&
        Objects.equals(this.data, basketTicketEventData.data) &&
        Objects.equals(this.matchOrder, basketTicketEventData.matchOrder) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participants, data, matchOrder, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasketTicketEventData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    matchOrder: ").append(toIndentedString(matchOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

