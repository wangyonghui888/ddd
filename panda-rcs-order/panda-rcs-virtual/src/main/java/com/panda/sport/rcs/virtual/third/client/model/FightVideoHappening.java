/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Information about happenings in a video 
 */
@ApiModel(description = "Information about happenings in a video ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class FightVideoHappening {
  /**
   * Listed indicating the type of happening; P &#x3D; This is a happening in which a punch has occurre K &#x3D; This is a happening in which there has been a kick B &#x3D; It is a happening in which the bell has been rung. This slot indicates the end of the ingame 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    P("P"),
    
    K("K"),
    
    B("B");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Indicates the author of the happening. It makes sense for type P and K. Values;  B &#x3D; Indicates that the participant is black  W &#x3D; Indicates that the participant is white 
   */
  @JsonAdapter(PlayerEnum.Adapter.class)
  public enum PlayerEnum {
    B("B"),
    
    W("W");

    private String value;

    PlayerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayerEnum fromValue(String text) {
      for (PlayerEnum b : PlayerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlayerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlayerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("player")
  private PlayerEnum player = null;

  @SerializedName("score")
  private Integer score = null;

  @SerializedName("sec")
  private Float sec = null;

  public FightVideoHappening type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Listed indicating the type of happening; P &#x3D; This is a happening in which a punch has occurre K &#x3D; This is a happening in which there has been a kick B &#x3D; It is a happening in which the bell has been rung. This slot indicates the end of the ingame 
   * @return type
  **/
  @ApiModelProperty(value = "Listed indicating the type of happening; P = This is a happening in which a punch has occurre K = This is a happening in which there has been a kick B = It is a happening in which the bell has been rung. This slot indicates the end of the ingame ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FightVideoHappening player(PlayerEnum player) {
    this.player = player;
    return this;
  }

   /**
   * Indicates the author of the happening. It makes sense for type P and K. Values;  B &#x3D; Indicates that the participant is black  W &#x3D; Indicates that the participant is white 
   * @return player
  **/
  @ApiModelProperty(value = "Indicates the author of the happening. It makes sense for type P and K. Values;  B = Indicates that the participant is black  W = Indicates that the participant is white ")
  public PlayerEnum getPlayer() {
    return player;
  }

  public void setPlayer(PlayerEnum player) {
    this.player = player;
  }

  public FightVideoHappening score(Integer score) {
    this.score = score;
    return this;
  }

   /**
   * Numerical value of the kick or punch force that occurs in the happening. The values can be 1,2,3. It is used to represent the force bar in front-end applications. It makes sense for happenings of type P and K 
   * @return score
  **/
  @ApiModelProperty(value = "Numerical value of the kick or punch force that occurs in the happening. The values can be 1,2,3. It is used to represent the force bar in front-end applications. It makes sense for happenings of type P and K ")
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }

  public FightVideoHappening sec(Float sec) {
    this.sec = sec;
    return this;
  }

   /**
   * Instant time in the slot in which the happening occurred. sec &lt;&#x3D; FightingVideo.duration 
   * @return sec
  **/
  @ApiModelProperty(value = "Instant time in the slot in which the happening occurred. sec <= FightingVideo.duration ")
  public Float getSec() {
    return sec;
  }

  public void setSec(Float sec) {
    this.sec = sec;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FightVideoHappening fightVideoHappening = (FightVideoHappening) o;
    return Objects.equals(this.type, fightVideoHappening.type) &&
        Objects.equals(this.player, fightVideoHappening.player) &&
        Objects.equals(this.score, fightVideoHappening.score) &&
        Objects.equals(this.sec, fightVideoHappening.sec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, player, score, sec);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FightVideoHappening {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    player: ").append(toIndentedString(player)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sec: ").append(toIndentedString(sec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

