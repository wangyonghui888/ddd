/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Participant;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The General Race participant information. 
 */
@ApiModel(description = "The General Race participant information. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class RaceParticipant extends Participant {
  @SerializedName("name")
  private String name = null;

  @SerializedName("forecast")
  private List<String> forecast = null;

  /**
   * Group of the participant   
   */
  @JsonAdapter(GroupEnum.Adapter.class)
  public enum GroupEnum {
    NORMAL("NORMAL"),
    
    SLOW("SLOW");

    private String value;

    GroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupEnum fromValue(String text) {
      for (GroupEnum b : GroupEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("group")
  private GroupEnum group = null;

  @SerializedName("prob")
  private Double prob = null;

  @SerializedName("risk")
  private Integer risk = null;

  @SerializedName("form")
  private Double form = null;

  public RaceParticipant name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the participant to view pourpose 
   * @return name
  **/
  @ApiModelProperty(value = "Name of the participant to view pourpose ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RaceParticipant forecast(List<String> forecast) {
    this.forecast = forecast;
    return this;
  }

  public RaceParticipant addForecastItem(String forecastItem) {
    if (this.forecast == null) {
      this.forecast = new ArrayList<String>();
    }
    this.forecast.add(forecastItem);
    return this;
  }

   /**
   * Last n positions of the participant  
   * @return forecast
  **/
  @ApiModelProperty(value = "Last n positions of the participant  ")
  public List<String> getForecast() {
    return forecast;
  }

  public void setForecast(List<String> forecast) {
    this.forecast = forecast;
  }

  public RaceParticipant group(GroupEnum group) {
    this.group = group;
    return this;
  }

   /**
   * Group of the participant   
   * @return group
  **/
  @ApiModelProperty(value = "Group of the participant   ")
  public GroupEnum getGroup() {
    return group;
  }

  public void setGroup(GroupEnum group) {
    this.group = group;
  }

  public RaceParticipant prob(Double prob) {
    this.prob = prob;
    return this;
  }

   /**
   * Prob of the participant  
   * @return prob
  **/
  @ApiModelProperty(value = "Prob of the participant  ")
  public Double getProb() {
    return prob;
  }

  public void setProb(Double prob) {
    this.prob = prob;
  }

  public RaceParticipant risk(Integer risk) {
    this.risk = risk;
    return this;
  }

   /**
   * Risk level of the participant 
   * @return risk
  **/
  @ApiModelProperty(value = "Risk level of the participant ")
  public Integer getRisk() {
    return risk;
  }

  public void setRisk(Integer risk) {
    this.risk = risk;
  }

  public RaceParticipant form(Double form) {
    this.form = form;
    return this;
  }

   /**
   * Form of the participant  
   * @return form
  **/
  @ApiModelProperty(value = "Form of the participant  ")
  public Double getForm() {
    return form;
  }

  public void setForm(Double form) {
    this.form = form;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RaceParticipant raceParticipant = (RaceParticipant) o;
    return Objects.equals(this.name, raceParticipant.name) &&
        Objects.equals(this.forecast, raceParticipant.forecast) &&
        Objects.equals(this.group, raceParticipant.group) &&
        Objects.equals(this.prob, raceParticipant.prob) &&
        Objects.equals(this.risk, raceParticipant.risk) &&
        Objects.equals(this.form, raceParticipant.form) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, forecast, group, prob, risk, form, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RaceParticipant {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    forecast: ").append(toIndentedString(forecast)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    prob: ").append(toIndentedString(prob)).append("\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

