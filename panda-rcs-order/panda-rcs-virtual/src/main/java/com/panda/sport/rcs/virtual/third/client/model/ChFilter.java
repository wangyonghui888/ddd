/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.ChCompetitionType;
import com.panda.sport.rcs.virtual.third.client.model.Filter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Filter for Champions competition 
 */
@ApiModel(description = "Filter for Champions competition ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ChFilter extends Filter {
  @SerializedName("id")
  private String id = null;

  /**
   * Competition type strategy (ranked, table_odds, stats)
   */
  @JsonAdapter(CompetitionTypeStrategyEnum.Adapter.class)
  public enum CompetitionTypeStrategyEnum {
    RANKED("RANKED"),
    
    TABLE_ODDS("TABLE_ODDS"),
    
    STATS("STATS");

    private String value;

    CompetitionTypeStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompetitionTypeStrategyEnum fromValue(String text) {
      for (CompetitionTypeStrategyEnum b : CompetitionTypeStrategyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CompetitionTypeStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompetitionTypeStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompetitionTypeStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CompetitionTypeStrategyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("competitionTypeStrategy")
  private CompetitionTypeStrategyEnum competitionTypeStrategy = null;

  @SerializedName("champCode")
  private String champCode = null;

  @SerializedName("assetsId")
  private String assetsId = null;

  @SerializedName("yellowProb")
  private Float yellowProb = null;

  @SerializedName("groups")
  private List<List<String>> groups = null;

  @SerializedName("numParticipants")
  private Integer numParticipants = null;

  @SerializedName("competitionType")
  private ChCompetitionType competitionType = null;

  @SerializedName("competitionSubType")
  private String competitionSubType = null;

  @SerializedName("weekDaysInGroupPhase")
  private Integer weekDaysInGroupPhase = null;

  @SerializedName("isTwoLegsGroup")
  private Boolean isTwoLegsGroup = null;

  @SerializedName("isTwoLegsKnockout")
  private Boolean isTwoLegsKnockout = null;

  @SerializedName("isTwoLegsFinal")
  private Boolean isTwoLegsFinal = null;

  @SerializedName("pairingConfig")
  private List<List<Integer>> pairingConfig = null;

  @SerializedName("incompatibleTeams")
  private List<List<String>> incompatibleTeams = null;

  @SerializedName("initialRanking")
  private List<String> initialRanking = null;

  @SerializedName("libraryId")
  private String libraryId = null;

  @SerializedName("contentLibrary")
  private String contentLibrary = null;

  public ChFilter id(String id) {
    this.id = id;
    return this;
  }

   /**
   * League id where participants are used
   * @return id
  **/
  @ApiModelProperty(value = "League id where participants are used")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ChFilter competitionTypeStrategy(CompetitionTypeStrategyEnum competitionTypeStrategy) {
    this.competitionTypeStrategy = competitionTypeStrategy;
    return this;
  }

   /**
   * Competition type strategy (ranked, table_odds, stats)
   * @return competitionTypeStrategy
  **/
  @ApiModelProperty(value = "Competition type strategy (ranked, table_odds, stats)")
  public CompetitionTypeStrategyEnum getCompetitionTypeStrategy() {
    return competitionTypeStrategy;
  }

  public void setCompetitionTypeStrategy(CompetitionTypeStrategyEnum competitionTypeStrategy) {
    this.competitionTypeStrategy = competitionTypeStrategy;
  }

  public ChFilter champCode(String champCode) {
    this.champCode = champCode;
    return this;
  }

   /**
   * Attribute for obtaining football shields in backoffice. Deprecated. 
   * @return champCode
  **/
  @ApiModelProperty(value = "Attribute for obtaining football shields in backoffice. Deprecated. ")
  public String getChampCode() {
    return champCode;
  }

  public void setChampCode(String champCode) {
    this.champCode = champCode;
  }

  public ChFilter assetsId(String assetsId) {
    this.assetsId = assetsId;
    return this;
  }

   /**
   * It is the univocal identifier of the assets of a playlist. This identifier will be used to obtain the badgets and emblems of teams, regardless of whether provisioning or gr-teams are used. 
   * @return assetsId
  **/
  @ApiModelProperty(value = "It is the univocal identifier of the assets of a playlist. This identifier will be used to obtain the badgets and emblems of teams, regardless of whether provisioning or gr-teams are used. ")
  public String getAssetsId() {
    return assetsId;
  }

  public void setAssetsId(String assetsId) {
    this.assetsId = assetsId;
  }

  public ChFilter yellowProb(Float yellowProb) {
    this.yellowProb = yellowProb;
    return this;
  }

   /**
   * Probability of generating a yellow card in a match
   * @return yellowProb
  **/
  @ApiModelProperty(value = "Probability of generating a yellow card in a match")
  public Float getYellowProb() {
    return yellowProb;
  }

  public void setYellowProb(Float yellowProb) {
    this.yellowProb = yellowProb;
  }

  public ChFilter groups(List<List<String>> groups) {
    this.groups = groups;
    return this;
  }

  public ChFilter addGroupsItem(List<String> groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<List<String>>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Default groups configuration, specified by team ids
   * @return groups
  **/
  @ApiModelProperty(value = "Default groups configuration, specified by team ids")
  public List<List<String>> getGroups() {
    return groups;
  }

  public void setGroups(List<List<String>> groups) {
    this.groups = groups;
  }

  public ChFilter numParticipants(Integer numParticipants) {
    this.numParticipants = numParticipants;
    return this;
  }

   /**
   * This field is used to indicate how many teams will participate in a league. This field will be used when the number of participants in a league is less than the total of participants declared in the groups filed. 
   * @return numParticipants
  **/
  @ApiModelProperty(value = "This field is used to indicate how many teams will participate in a league. This field will be used when the number of participants in a league is less than the total of participants declared in the groups filed. ")
  public Integer getNumParticipants() {
    return numParticipants;
  }

  public void setNumParticipants(Integer numParticipants) {
    this.numParticipants = numParticipants;
  }

  public ChFilter competitionType(ChCompetitionType competitionType) {
    this.competitionType = competitionType;
    return this;
  }

   /**
   * Get competitionType
   * @return competitionType
  **/
  @ApiModelProperty(value = "")
  public ChCompetitionType getCompetitionType() {
    return competitionType;
  }

  public void setCompetitionType(ChCompetitionType competitionType) {
    this.competitionType = competitionType;
  }

  public ChFilter competitionSubType(String competitionSubType) {
    this.competitionSubType = competitionSubType;
    return this;
  }

   /**
   * Identify the specific competition subType. The values are;   - LEAGUE   - CHAMPION   - CUP   - SOCCER   - LIBERTADORES   - WORLDCUP 
   * @return competitionSubType
  **/
  @ApiModelProperty(value = "Identify the specific competition subType. The values are;   - LEAGUE   - CHAMPION   - CUP   - SOCCER   - LIBERTADORES   - WORLDCUP ")
  public String getCompetitionSubType() {
    return competitionSubType;
  }

  public void setCompetitionSubType(String competitionSubType) {
    this.competitionSubType = competitionSubType;
  }

  public ChFilter weekDaysInGroupPhase(Integer weekDaysInGroupPhase) {
    this.weekDaysInGroupPhase = weekDaysInGroupPhase;
    return this;
  }

   /**
   * The number of days in each matchday of group phase. It has to be 1 or 2.
   * @return weekDaysInGroupPhase
  **/
  @ApiModelProperty(value = "The number of days in each matchday of group phase. It has to be 1 or 2.")
  public Integer getWeekDaysInGroupPhase() {
    return weekDaysInGroupPhase;
  }

  public void setWeekDaysInGroupPhase(Integer weekDaysInGroupPhase) {
    this.weekDaysInGroupPhase = weekDaysInGroupPhase;
  }

  public ChFilter isTwoLegsGroup(Boolean isTwoLegsGroup) {
    this.isTwoLegsGroup = isTwoLegsGroup;
    return this;
  }

   /**
   * If true the group phase is a home-and-away basis (two legs). If false, the group phase is played as one single match (one leg)
   * @return isTwoLegsGroup
  **/
  @ApiModelProperty(value = "If true the group phase is a home-and-away basis (two legs). If false, the group phase is played as one single match (one leg)")
  public Boolean isIsTwoLegsGroup() {
    return isTwoLegsGroup;
  }

  public void setIsTwoLegsGroup(Boolean isTwoLegsGroup) {
    this.isTwoLegsGroup = isTwoLegsGroup;
  }

  public ChFilter isTwoLegsKnockout(Boolean isTwoLegsKnockout) {
    this.isTwoLegsKnockout = isTwoLegsKnockout;
    return this;
  }

   /**
   * If true the knockout phase is a home-and-away basis (two legs). If false, the knockout phase is played as one single match (one leg)
   * @return isTwoLegsKnockout
  **/
  @ApiModelProperty(value = "If true the knockout phase is a home-and-away basis (two legs). If false, the knockout phase is played as one single match (one leg)")
  public Boolean isIsTwoLegsKnockout() {
    return isTwoLegsKnockout;
  }

  public void setIsTwoLegsKnockout(Boolean isTwoLegsKnockout) {
    this.isTwoLegsKnockout = isTwoLegsKnockout;
  }

  public ChFilter isTwoLegsFinal(Boolean isTwoLegsFinal) {
    this.isTwoLegsFinal = isTwoLegsFinal;
    return this;
  }

   /**
   * If true the final is a home-and-away basis (two legs). If false, the final is played as one single match (one leg)
   * @return isTwoLegsFinal
  **/
  @ApiModelProperty(value = "If true the final is a home-and-away basis (two legs). If false, the final is played as one single match (one leg)")
  public Boolean isIsTwoLegsFinal() {
    return isTwoLegsFinal;
  }

  public void setIsTwoLegsFinal(Boolean isTwoLegsFinal) {
    this.isTwoLegsFinal = isTwoLegsFinal;
  }

  public ChFilter pairingConfig(List<List<Integer>> pairingConfig) {
    this.pairingConfig = pairingConfig;
    return this;
  }

  public ChFilter addPairingConfigItem(List<Integer> pairingConfigItem) {
    if (this.pairingConfig == null) {
      this.pairingConfig = new ArrayList<List<Integer>>();
    }
    this.pairingConfig.add(pairingConfigItem);
    return this;
  }

   /**
   * Group phase pairing configuration, specified by the order of team in each group
   * @return pairingConfig
  **/
  @ApiModelProperty(value = "Group phase pairing configuration, specified by the order of team in each group")
  public List<List<Integer>> getPairingConfig() {
    return pairingConfig;
  }

  public void setPairingConfig(List<List<Integer>> pairingConfig) {
    this.pairingConfig = pairingConfig;
  }

  public ChFilter incompatibleTeams(List<List<String>> incompatibleTeams) {
    this.incompatibleTeams = incompatibleTeams;
    return this;
  }

  public ChFilter addIncompatibleTeamsItem(List<String> incompatibleTeamsItem) {
    if (this.incompatibleTeams == null) {
      this.incompatibleTeams = new ArrayList<List<String>>();
    }
    this.incompatibleTeams.add(incompatibleTeamsItem);
    return this;
  }

   /**
   * Array of teams group from the same association groupped by team ids
   * @return incompatibleTeams
  **/
  @ApiModelProperty(value = "Array of teams group from the same association groupped by team ids")
  public List<List<String>> getIncompatibleTeams() {
    return incompatibleTeams;
  }

  public void setIncompatibleTeams(List<List<String>> incompatibleTeams) {
    this.incompatibleTeams = incompatibleTeams;
  }

  public ChFilter initialRanking(List<String> initialRanking) {
    this.initialRanking = initialRanking;
    return this;
  }

  public ChFilter addInitialRankingItem(String initialRankingItem) {
    if (this.initialRanking == null) {
      this.initialRanking = new ArrayList<String>();
    }
    this.initialRanking.add(initialRankingItem);
    return this;
  }

   /**
   * Array of teams ordered by fifa or another association ranking
   * @return initialRanking
  **/
  @ApiModelProperty(value = "Array of teams ordered by fifa or another association ranking")
  public List<String> getInitialRanking() {
    return initialRanking;
  }

  public void setInitialRanking(List<String> initialRanking) {
    this.initialRanking = initialRanking;
  }

  public ChFilter libraryId(String libraryId) {
    this.libraryId = libraryId;
    return this;
  }

   /**
   * Identify the specific game path to obtain the HLS videos. The values are;   - libertadores   - champions   - turkey2019   - poland   - goldbetseriea2019_goldbet   - russia   - peru2019   - peru   - germany2019   - russia2019   - france2019   - euro202019   - eurochampions   - china2019   - belgium2019   - franceligue2018   - euro20   - seriea2019   - spain2019   - premier2018   - germany   - turkish   - italyseriea2018   - premier2019   - china2018   - spain2018   - germanybundesliga2018   - superturkey2018   - premier   - belgium   - china   - colombia   - franceligue   - nigeria   - goldbetseriea_goldbet   - seriea   - germanybundesliga   - turkey   - spain 
   * @return libraryId
  **/
  @ApiModelProperty(value = "Identify the specific game path to obtain the HLS videos. The values are;   - libertadores   - champions   - turkey2019   - poland   - goldbetseriea2019_goldbet   - russia   - peru2019   - peru   - germany2019   - russia2019   - france2019   - euro202019   - eurochampions   - china2019   - belgium2019   - franceligue2018   - euro20   - seriea2019   - spain2019   - premier2018   - germany   - turkish   - italyseriea2018   - premier2019   - china2018   - spain2018   - germanybundesliga2018   - superturkey2018   - premier   - belgium   - china   - colombia   - franceligue   - nigeria   - goldbetseriea_goldbet   - seriea   - germanybundesliga   - turkey   - spain ")
  public String getLibraryId() {
    return libraryId;
  }

  public void setLibraryId(String libraryId) {
    this.libraryId = libraryId;
  }

  public ChFilter contentLibrary(String contentLibrary) {
    this.contentLibrary = contentLibrary;
    return this;
  }

   /**
   * Specify the filename of the goals content. If it&#39;s empty, the default content will be used.
   * @return contentLibrary
  **/
  @ApiModelProperty(value = "Specify the filename of the goals content. If it's empty, the default content will be used.")
  public String getContentLibrary() {
    return contentLibrary;
  }

  public void setContentLibrary(String contentLibrary) {
    this.contentLibrary = contentLibrary;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChFilter chFilter = (ChFilter) o;
    return Objects.equals(this.id, chFilter.id) &&
        Objects.equals(this.competitionTypeStrategy, chFilter.competitionTypeStrategy) &&
        Objects.equals(this.champCode, chFilter.champCode) &&
        Objects.equals(this.assetsId, chFilter.assetsId) &&
        Objects.equals(this.yellowProb, chFilter.yellowProb) &&
        Objects.equals(this.groups, chFilter.groups) &&
        Objects.equals(this.numParticipants, chFilter.numParticipants) &&
        Objects.equals(this.competitionType, chFilter.competitionType) &&
        Objects.equals(this.competitionSubType, chFilter.competitionSubType) &&
        Objects.equals(this.weekDaysInGroupPhase, chFilter.weekDaysInGroupPhase) &&
        Objects.equals(this.isTwoLegsGroup, chFilter.isTwoLegsGroup) &&
        Objects.equals(this.isTwoLegsKnockout, chFilter.isTwoLegsKnockout) &&
        Objects.equals(this.isTwoLegsFinal, chFilter.isTwoLegsFinal) &&
        Objects.equals(this.pairingConfig, chFilter.pairingConfig) &&
        Objects.equals(this.incompatibleTeams, chFilter.incompatibleTeams) &&
        Objects.equals(this.initialRanking, chFilter.initialRanking) &&
        Objects.equals(this.libraryId, chFilter.libraryId) &&
        Objects.equals(this.contentLibrary, chFilter.contentLibrary) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, competitionTypeStrategy, champCode, assetsId, yellowProb, groups, numParticipants, competitionType, competitionSubType, weekDaysInGroupPhase, isTwoLegsGroup, isTwoLegsKnockout, isTwoLegsFinal, pairingConfig, incompatibleTeams, initialRanking, libraryId, contentLibrary, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChFilter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    competitionTypeStrategy: ").append(toIndentedString(competitionTypeStrategy)).append("\n");
    sb.append("    champCode: ").append(toIndentedString(champCode)).append("\n");
    sb.append("    assetsId: ").append(toIndentedString(assetsId)).append("\n");
    sb.append("    yellowProb: ").append(toIndentedString(yellowProb)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    numParticipants: ").append(toIndentedString(numParticipants)).append("\n");
    sb.append("    competitionType: ").append(toIndentedString(competitionType)).append("\n");
    sb.append("    competitionSubType: ").append(toIndentedString(competitionSubType)).append("\n");
    sb.append("    weekDaysInGroupPhase: ").append(toIndentedString(weekDaysInGroupPhase)).append("\n");
    sb.append("    isTwoLegsGroup: ").append(toIndentedString(isTwoLegsGroup)).append("\n");
    sb.append("    isTwoLegsKnockout: ").append(toIndentedString(isTwoLegsKnockout)).append("\n");
    sb.append("    isTwoLegsFinal: ").append(toIndentedString(isTwoLegsFinal)).append("\n");
    sb.append("    pairingConfig: ").append(toIndentedString(pairingConfig)).append("\n");
    sb.append("    incompatibleTeams: ").append(toIndentedString(incompatibleTeams)).append("\n");
    sb.append("    initialRanking: ").append(toIndentedString(initialRanking)).append("\n");
    sb.append("    libraryId: ").append(toIndentedString(libraryId)).append("\n");
    sb.append("    contentLibrary: ").append(toIndentedString(contentLibrary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

