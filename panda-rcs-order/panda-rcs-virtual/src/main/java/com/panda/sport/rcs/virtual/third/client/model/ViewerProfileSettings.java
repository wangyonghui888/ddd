/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.ViewerProfileGameSettings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Viewer Profile Settings 
 */
@ApiModel(description = "Viewer Profile Settings ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ViewerProfileSettings {
  /**
   * Position of the logo shown in the header 
   */
  @JsonAdapter(LogoPositionEnum.Adapter.class)
  public enum LogoPositionEnum {
    RIGHT("RIGHT");

    private String value;

    LogoPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogoPositionEnum fromValue(String text) {
      for (LogoPositionEnum b : LogoPositionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LogoPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogoPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogoPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LogoPositionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("logoPosition")
  private LogoPositionEnum logoPosition = null;

  /**
   * Display (show or hide) the time of absolute times. This is useful for using a panel independently of the time zone (as with satellite) 
   */
  @JsonAdapter(AbsolutTimeDisplayEnum.Adapter.class)
  public enum AbsolutTimeDisplayEnum {
    SHOW("SHOW"),
    
    HIDE("HIDE");

    private String value;

    AbsolutTimeDisplayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AbsolutTimeDisplayEnum fromValue(String text) {
      for (AbsolutTimeDisplayEnum b : AbsolutTimeDisplayEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AbsolutTimeDisplayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AbsolutTimeDisplayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AbsolutTimeDisplayEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AbsolutTimeDisplayEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("absolutTimeDisplay")
  private AbsolutTimeDisplayEnum absolutTimeDisplay = null;

  @SerializedName("allowStreaming")
  private Boolean allowStreaming = null;

  @SerializedName("autoRestart")
  private Integer autoRestart = null;

  /**
   * Select the type of local and network jackpot celebration representation. 2 possible values; DEFAULT -&gt; more intrusive than the compact occupying much of the screen. COMPACT -&gt; less intrusive than DEFAULT, occupying only the bottom of the screen 
   */
  @JsonAdapter(JackpotCelebrationTypeEnum.Adapter.class)
  public enum JackpotCelebrationTypeEnum {
    DEFAULT("DEFAULT"),
    
    COMPACT("COMPACT");

    private String value;

    JackpotCelebrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JackpotCelebrationTypeEnum fromValue(String text) {
      for (JackpotCelebrationTypeEnum b : JackpotCelebrationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<JackpotCelebrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JackpotCelebrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JackpotCelebrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return JackpotCelebrationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("jackpotCelebrationType")
  private JackpotCelebrationTypeEnum jackpotCelebrationType = null;

  @SerializedName("gameSettings")
  private List<ViewerProfileGameSettings> gameSettings = null;

  public ViewerProfileSettings logoPosition(LogoPositionEnum logoPosition) {
    this.logoPosition = logoPosition;
    return this;
  }

   /**
   * Position of the logo shown in the header 
   * @return logoPosition
  **/
  @ApiModelProperty(value = "Position of the logo shown in the header ")
  public LogoPositionEnum getLogoPosition() {
    return logoPosition;
  }

  public void setLogoPosition(LogoPositionEnum logoPosition) {
    this.logoPosition = logoPosition;
  }

  public ViewerProfileSettings absolutTimeDisplay(AbsolutTimeDisplayEnum absolutTimeDisplay) {
    this.absolutTimeDisplay = absolutTimeDisplay;
    return this;
  }

   /**
   * Display (show or hide) the time of absolute times. This is useful for using a panel independently of the time zone (as with satellite) 
   * @return absolutTimeDisplay
  **/
  @ApiModelProperty(value = "Display (show or hide) the time of absolute times. This is useful for using a panel independently of the time zone (as with satellite) ")
  public AbsolutTimeDisplayEnum getAbsolutTimeDisplay() {
    return absolutTimeDisplay;
  }

  public void setAbsolutTimeDisplay(AbsolutTimeDisplayEnum absolutTimeDisplay) {
    this.absolutTimeDisplay = absolutTimeDisplay;
  }

  public ViewerProfileSettings allowStreaming(Boolean allowStreaming) {
    this.allowStreaming = allowStreaming;
    return this;
  }

   /**
   * Allow to the entity downloads and streams the contents.
   * @return allowStreaming
  **/
  @ApiModelProperty(value = "Allow to the entity downloads and streams the contents.")
  public Boolean isAllowStreaming() {
    return allowStreaming;
  }

  public void setAllowStreaming(Boolean allowStreaming) {
    this.allowStreaming = allowStreaming;
  }

  public ViewerProfileSettings autoRestart(Integer autoRestart) {
    this.autoRestart = autoRestart;
    return this;
  }

   /**
   * Allows an auto reset of the viewer to a set time. The value entered determines the time of day at which the reset will take place.  This reset is considered a maintenance tool that improves the behavior of the viewers. Possible values 0 - 23 -&gt; represent the hours of the day.  Empty or -1 disables autoreset. 
   * minimum: -1
   * maximum: 23
   * @return autoRestart
  **/
  @ApiModelProperty(value = "Allows an auto reset of the viewer to a set time. The value entered determines the time of day at which the reset will take place.  This reset is considered a maintenance tool that improves the behavior of the viewers. Possible values 0 - 23 -> represent the hours of the day.  Empty or -1 disables autoreset. ")
  public Integer getAutoRestart() {
    return autoRestart;
  }

  public void setAutoRestart(Integer autoRestart) {
    this.autoRestart = autoRestart;
  }

  public ViewerProfileSettings jackpotCelebrationType(JackpotCelebrationTypeEnum jackpotCelebrationType) {
    this.jackpotCelebrationType = jackpotCelebrationType;
    return this;
  }

   /**
   * Select the type of local and network jackpot celebration representation. 2 possible values; DEFAULT -&gt; more intrusive than the compact occupying much of the screen. COMPACT -&gt; less intrusive than DEFAULT, occupying only the bottom of the screen 
   * @return jackpotCelebrationType
  **/
  @ApiModelProperty(value = "Select the type of local and network jackpot celebration representation. 2 possible values; DEFAULT -> more intrusive than the compact occupying much of the screen. COMPACT -> less intrusive than DEFAULT, occupying only the bottom of the screen ")
  public JackpotCelebrationTypeEnum getJackpotCelebrationType() {
    return jackpotCelebrationType;
  }

  public void setJackpotCelebrationType(JackpotCelebrationTypeEnum jackpotCelebrationType) {
    this.jackpotCelebrationType = jackpotCelebrationType;
  }

  public ViewerProfileSettings gameSettings(List<ViewerProfileGameSettings> gameSettings) {
    this.gameSettings = gameSettings;
    return this;
  }

  public ViewerProfileSettings addGameSettingsItem(ViewerProfileGameSettings gameSettingsItem) {
    if (this.gameSettings == null) {
      this.gameSettings = new ArrayList<ViewerProfileGameSettings>();
    }
    this.gameSettings.add(gameSettingsItem);
    return this;
  }

   /**
   * Specific viewer profile settings per game 
   * @return gameSettings
  **/
  @ApiModelProperty(value = "Specific viewer profile settings per game ")
  public List<ViewerProfileGameSettings> getGameSettings() {
    return gameSettings;
  }

  public void setGameSettings(List<ViewerProfileGameSettings> gameSettings) {
    this.gameSettings = gameSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewerProfileSettings viewerProfileSettings = (ViewerProfileSettings) o;
    return Objects.equals(this.logoPosition, viewerProfileSettings.logoPosition) &&
        Objects.equals(this.absolutTimeDisplay, viewerProfileSettings.absolutTimeDisplay) &&
        Objects.equals(this.allowStreaming, viewerProfileSettings.allowStreaming) &&
        Objects.equals(this.autoRestart, viewerProfileSettings.autoRestart) &&
        Objects.equals(this.jackpotCelebrationType, viewerProfileSettings.jackpotCelebrationType) &&
        Objects.equals(this.gameSettings, viewerProfileSettings.gameSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logoPosition, absolutTimeDisplay, allowStreaming, autoRestart, jackpotCelebrationType, gameSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewerProfileSettings {\n");
    
    sb.append("    logoPosition: ").append(toIndentedString(logoPosition)).append("\n");
    sb.append("    absolutTimeDisplay: ").append(toIndentedString(absolutTimeDisplay)).append("\n");
    sb.append("    allowStreaming: ").append(toIndentedString(allowStreaming)).append("\n");
    sb.append("    autoRestart: ").append(toIndentedString(autoRestart)).append("\n");
    sb.append("    jackpotCelebrationType: ").append(toIndentedString(jackpotCelebrationType)).append("\n");
    sb.append("    gameSettings: ").append(toIndentedString(gameSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

