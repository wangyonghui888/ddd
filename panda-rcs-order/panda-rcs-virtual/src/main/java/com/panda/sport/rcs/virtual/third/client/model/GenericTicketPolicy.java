/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.TicketPolicy;
import java.io.IOException;

/**
 * This is the Generic Ticket Policy with common properties. 
 */
@ApiModel(description = "This is the Generic Ticket Policy with common properties. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class GenericTicketPolicy extends TicketPolicy {
  @SerializedName("oneBetPerEvent")
  private Boolean oneBetPerEvent = null;

  @SerializedName("refuseIfExceedMaxPayout")
  private Boolean refuseIfExceedMaxPayout = null;

  @SerializedName("oneTicketPerEvent")
  private Boolean oneTicketPerEvent = null;

  @SerializedName("oneEventPerTicket")
  private Boolean oneEventPerTicket = null;

  public GenericTicketPolicy oneBetPerEvent(Boolean oneBetPerEvent) {
    this.oneBetPerEvent = oneBetPerEvent;
    return this;
  }

   /**
   * One bet per event 
   * @return oneBetPerEvent
  **/
  @ApiModelProperty(value = "One bet per event ")
  public Boolean isOneBetPerEvent() {
    return oneBetPerEvent;
  }

  public void setOneBetPerEvent(Boolean oneBetPerEvent) {
    this.oneBetPerEvent = oneBetPerEvent;
  }

  public GenericTicketPolicy refuseIfExceedMaxPayout(Boolean refuseIfExceedMaxPayout) {
    this.refuseIfExceedMaxPayout = refuseIfExceedMaxPayout;
    return this;
  }

   /**
   * If true, ticket won&#39;t be created if limit max payout has been exceeded 
   * @return refuseIfExceedMaxPayout
  **/
  @ApiModelProperty(value = "If true, ticket won't be created if limit max payout has been exceeded ")
  public Boolean isRefuseIfExceedMaxPayout() {
    return refuseIfExceedMaxPayout;
  }

  public void setRefuseIfExceedMaxPayout(Boolean refuseIfExceedMaxPayout) {
    this.refuseIfExceedMaxPayout = refuseIfExceedMaxPayout;
  }

  public GenericTicketPolicy oneTicketPerEvent(Boolean oneTicketPerEvent) {
    this.oneTicketPerEvent = oneTicketPerEvent;
    return this;
  }

   /**
   * One ticket per event only 
   * @return oneTicketPerEvent
  **/
  @ApiModelProperty(value = "One ticket per event only ")
  public Boolean isOneTicketPerEvent() {
    return oneTicketPerEvent;
  }

  public void setOneTicketPerEvent(Boolean oneTicketPerEvent) {
    this.oneTicketPerEvent = oneTicketPerEvent;
  }

  public GenericTicketPolicy oneEventPerTicket(Boolean oneEventPerTicket) {
    this.oneEventPerTicket = oneEventPerTicket;
    return this;
  }

   /**
   * One event per ticket only 
   * @return oneEventPerTicket
  **/
  @ApiModelProperty(value = "One event per ticket only ")
  public Boolean isOneEventPerTicket() {
    return oneEventPerTicket;
  }

  public void setOneEventPerTicket(Boolean oneEventPerTicket) {
    this.oneEventPerTicket = oneEventPerTicket;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericTicketPolicy genericTicketPolicy = (GenericTicketPolicy) o;
    return Objects.equals(this.oneBetPerEvent, genericTicketPolicy.oneBetPerEvent) &&
        Objects.equals(this.refuseIfExceedMaxPayout, genericTicketPolicy.refuseIfExceedMaxPayout) &&
        Objects.equals(this.oneTicketPerEvent, genericTicketPolicy.oneTicketPerEvent) &&
        Objects.equals(this.oneEventPerTicket, genericTicketPolicy.oneEventPerTicket) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oneBetPerEvent, refuseIfExceedMaxPayout, oneTicketPerEvent, oneEventPerTicket, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericTicketPolicy {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    oneBetPerEvent: ").append(toIndentedString(oneBetPerEvent)).append("\n");
    sb.append("    refuseIfExceedMaxPayout: ").append(toIndentedString(refuseIfExceedMaxPayout)).append("\n");
    sb.append("    oneTicketPerEvent: ").append(toIndentedString(oneTicketPerEvent)).append("\n");
    sb.append("    oneEventPerTicket: ").append(toIndentedString(oneEventPerTicket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

