/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This is the public view of a jackpot configuration. 
 */
@ApiModel(description = "This is the public view of a jackpot configuration. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class JackpotConfigurationView {
  @SerializedName("jackpotId")
  private String jackpotId = null;

  @SerializedName("jackpotName")
  private String jackpotName = null;

  @SerializedName("jackpotDesc")
  private String jackpotDesc = null;

  @SerializedName("targetId")
  private Integer targetId = null;

  /**
   * Defines how to calculate targetId, according to entity registering a ticket. Global, Local, Client,  Level1, Level2, Level3.   TargetType        | Description ------------------- | ---------------------------------   Global            | This is a custom jackpot.   Local             | The jackpot of the own entity.   Client            | The jackpot of the first client found.   Level1            | The jackpot of the great grandfather.   Level2            | The jackpot of the grandfather.   Level3            | The jackpot of the father. 
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    GLOBAL("GLOBAL"),
    
    CLIENT("CLIENT"),
    
    LOCAL("LOCAL"),
    
    LEVEL1("LEVEL1"),
    
    LEVEL2("LEVEL2"),
    
    LEVEL3("LEVEL3");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String text) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("targetType")
  private TargetTypeEnum targetType = null;

  @SerializedName("playlistFilter")
  private List<Integer> playlistFilter = null;

  @SerializedName("playlistBlocked")
  private List<Integer> playlistBlocked = null;

  public JackpotConfigurationView jackpotId(String jackpotId) {
    this.jackpotId = jackpotId;
    return this;
  }

   /**
   * Unique Id of Jackpot slot
   * @return jackpotId
  **/
  @ApiModelProperty(value = "Unique Id of Jackpot slot")
  public String getJackpotId() {
    return jackpotId;
  }

  public void setJackpotId(String jackpotId) {
    this.jackpotId = jackpotId;
  }

  public JackpotConfigurationView jackpotName(String jackpotName) {
    this.jackpotName = jackpotName;
    return this;
  }

   /**
   * The jackpot name
   * @return jackpotName
  **/
  @ApiModelProperty(value = "The jackpot name")
  public String getJackpotName() {
    return jackpotName;
  }

  public void setJackpotName(String jackpotName) {
    this.jackpotName = jackpotName;
  }

  public JackpotConfigurationView jackpotDesc(String jackpotDesc) {
    this.jackpotDesc = jackpotDesc;
    return this;
  }

   /**
   * Human description of current jackpot slot.
   * @return jackpotDesc
  **/
  @ApiModelProperty(value = "Human description of current jackpot slot.")
  public String getJackpotDesc() {
    return jackpotDesc;
  }

  public void setJackpotDesc(String jackpotDesc) {
    this.jackpotDesc = jackpotDesc;
  }

  public JackpotConfigurationView targetId(Integer targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * If Global, explicit targetId of JackpotStatus. If not global, it can optionally held the effective targetId, after evaluation of targetType. 
   * @return targetId
  **/
  @ApiModelProperty(value = "If Global, explicit targetId of JackpotStatus. If not global, it can optionally held the effective targetId, after evaluation of targetType. ")
  public Integer getTargetId() {
    return targetId;
  }

  public void setTargetId(Integer targetId) {
    this.targetId = targetId;
  }

  public JackpotConfigurationView targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

   /**
   * Defines how to calculate targetId, according to entity registering a ticket. Global, Local, Client,  Level1, Level2, Level3.   TargetType        | Description ------------------- | ---------------------------------   Global            | This is a custom jackpot.   Local             | The jackpot of the own entity.   Client            | The jackpot of the first client found.   Level1            | The jackpot of the great grandfather.   Level2            | The jackpot of the grandfather.   Level3            | The jackpot of the father. 
   * @return targetType
  **/
  @ApiModelProperty(value = "Defines how to calculate targetId, according to entity registering a ticket. Global, Local, Client,  Level1, Level2, Level3.   TargetType        | Description ------------------- | ---------------------------------   Global            | This is a custom jackpot.   Local             | The jackpot of the own entity.   Client            | The jackpot of the first client found.   Level1            | The jackpot of the great grandfather.   Level2            | The jackpot of the grandfather.   Level3            | The jackpot of the father. ")
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }

  public JackpotConfigurationView playlistFilter(List<Integer> playlistFilter) {
    this.playlistFilter = playlistFilter;
    return this;
  }

  public JackpotConfigurationView addPlaylistFilterItem(Integer playlistFilterItem) {
    if (this.playlistFilter == null) {
      this.playlistFilter = new ArrayList<Integer>();
    }
    this.playlistFilter.add(playlistFilterItem);
    return this;
  }

   /**
   * Filter of playlistId to apply jackpot. All if null.
   * @return playlistFilter
  **/
  @ApiModelProperty(value = "Filter of playlistId to apply jackpot. All if null.")
  public List<Integer> getPlaylistFilter() {
    return playlistFilter;
  }

  public void setPlaylistFilter(List<Integer> playlistFilter) {
    this.playlistFilter = playlistFilter;
  }

  public JackpotConfigurationView playlistBlocked(List<Integer> playlistBlocked) {
    this.playlistBlocked = playlistBlocked;
    return this;
  }

  public JackpotConfigurationView addPlaylistBlockedItem(Integer playlistBlockedItem) {
    if (this.playlistBlocked == null) {
      this.playlistBlocked = new ArrayList<Integer>();
    }
    this.playlistBlocked.add(playlistBlockedItem);
    return this;
  }

   /**
   * Explicit, excluded playlist of jackpot.
   * @return playlistBlocked
  **/
  @ApiModelProperty(value = "Explicit, excluded playlist of jackpot.")
  public List<Integer> getPlaylistBlocked() {
    return playlistBlocked;
  }

  public void setPlaylistBlocked(List<Integer> playlistBlocked) {
    this.playlistBlocked = playlistBlocked;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JackpotConfigurationView jackpotConfigurationView = (JackpotConfigurationView) o;
    return Objects.equals(this.jackpotId, jackpotConfigurationView.jackpotId) &&
        Objects.equals(this.jackpotName, jackpotConfigurationView.jackpotName) &&
        Objects.equals(this.jackpotDesc, jackpotConfigurationView.jackpotDesc) &&
        Objects.equals(this.targetId, jackpotConfigurationView.targetId) &&
        Objects.equals(this.targetType, jackpotConfigurationView.targetType) &&
        Objects.equals(this.playlistFilter, jackpotConfigurationView.playlistFilter) &&
        Objects.equals(this.playlistBlocked, jackpotConfigurationView.playlistBlocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jackpotId, jackpotName, jackpotDesc, targetId, targetType, playlistFilter, playlistBlocked);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JackpotConfigurationView {\n");
    
    sb.append("    jackpotId: ").append(toIndentedString(jackpotId)).append("\n");
    sb.append("    jackpotName: ").append(toIndentedString(jackpotName)).append("\n");
    sb.append("    jackpotDesc: ").append(toIndentedString(jackpotDesc)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    playlistFilter: ").append(toIndentedString(playlistFilter)).append("\n");
    sb.append("    playlistBlocked: ").append(toIndentedString(playlistBlocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

