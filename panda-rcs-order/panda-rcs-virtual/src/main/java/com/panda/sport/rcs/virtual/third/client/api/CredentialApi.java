/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.EntityCredential;
import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CredentialApi {
    private ApiClient apiClient;

    public CredentialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CredentialApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for credentialCreateApi
     * @param entityId The identifier of the entity of the Api credential to add.  (required)
     * @param domain The domain name of the range for this username.  (required)
     * @param apiId The username of the credential.  (required)
     * @param apiHash Hashed password, to be compared with apiHash sent by client.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialCreateApiCall(Integer entityId, String domain, String apiId, String apiHash, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/createAPI";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain", domain));
        if (apiId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiId", apiId));
        if (apiHash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiHash", apiHash));
        if (visibilityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("visibilityLevel", visibilityLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialCreateApiValidateBeforeCall(Integer entityId, String domain, String apiId, String apiHash, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling credentialCreateApi(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling credentialCreateApi(Async)");
        }
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling credentialCreateApi(Async)");
        }
        
        // verify the required parameter 'apiHash' is set
        if (apiHash == null) {
            throw new ApiException("Missing the required parameter 'apiHash' when calling credentialCreateApi(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialCreateApiCall(entityId, domain, apiId, apiHash, visibilityLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Assign an Api credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the Api credential to add.  (required)
     * @param domain The domain name of the range for this username.  (required)
     * @param apiId The username of the credential.  (required)
     * @param apiHash Hashed password, to be compared with apiHash sent by client.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialCreateApi(Integer entityId, String domain, String apiId, String apiHash, String visibilityLevel) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialCreateApiWithHttpInfo(entityId, domain, apiId, apiHash, visibilityLevel);
        return resp.getData();
    }

    /**
     * 
     * Assign an Api credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the Api credential to add.  (required)
     * @param domain The domain name of the range for this username.  (required)
     * @param apiId The username of the credential.  (required)
     * @param apiHash Hashed password, to be compared with apiHash sent by client.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialCreateApiWithHttpInfo(Integer entityId, String domain, String apiId, String apiHash, String visibilityLevel) throws ApiException {
        com.squareup.okhttp.Call call = credentialCreateApiValidateBeforeCall(entityId, domain, apiId, apiHash, visibilityLevel, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign an Api credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the Api credential to add.  (required)
     * @param domain The domain name of the range for this username.  (required)
     * @param apiId The username of the credential.  (required)
     * @param apiHash Hashed password, to be compared with apiHash sent by client.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialCreateApiAsync(Integer entityId, String domain, String apiId, String apiHash, String visibilityLevel, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialCreateApiValidateBeforeCall(entityId, domain, apiId, apiHash, visibilityLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialCreateGuid
     * @param entityId The identifier of the entity of the GUID credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param guid The unique GUID. If this field is empty, the system will genererate it.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialCreateGuidCall(Integer entityId, String role, String guid, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/createGUID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (guid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("guid", guid));
        if (visibilityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("visibilityLevel", visibilityLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialCreateGuidValidateBeforeCall(Integer entityId, String role, String guid, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling credentialCreateGuid(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling credentialCreateGuid(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialCreateGuidCall(entityId, role, guid, visibilityLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Assign role credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the GUID credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param guid The unique GUID. If this field is empty, the system will genererate it.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialCreateGuid(Integer entityId, String role, String guid, String visibilityLevel) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialCreateGuidWithHttpInfo(entityId, role, guid, visibilityLevel);
        return resp.getData();
    }

    /**
     * 
     * Assign role credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the GUID credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param guid The unique GUID. If this field is empty, the system will genererate it.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialCreateGuidWithHttpInfo(Integer entityId, String role, String guid, String visibilityLevel) throws ApiException {
        com.squareup.okhttp.Call call = credentialCreateGuidValidateBeforeCall(entityId, role, guid, visibilityLevel, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign role credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the GUID credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param guid The unique GUID. If this field is empty, the system will genererate it.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialCreateGuidAsync(Integer entityId, String role, String guid, String visibilityLevel, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialCreateGuidValidateBeforeCall(entityId, role, guid, visibilityLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialCreateOAuth
     * @param entityId The identifier of the entity of the OAuth credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param provider The provider of the Credential as Google, LinkedIn, Facebook  (required)
     * @param account The user or account for this Credential as an email account.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialCreateOAuthCall(Integer entityId, String role, String provider, String account, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/createOAuth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account", account));
        if (visibilityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("visibilityLevel", visibilityLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialCreateOAuthValidateBeforeCall(Integer entityId, String role, String provider, String account, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling credentialCreateOAuth(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling credentialCreateOAuth(Async)");
        }
        
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling credentialCreateOAuth(Async)");
        }
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling credentialCreateOAuth(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialCreateOAuthCall(entityId, role, provider, account, visibilityLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Assign an OAuth credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the OAuth credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param provider The provider of the Credential as Google, LinkedIn, Facebook  (required)
     * @param account The user or account for this Credential as an email account.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialCreateOAuth(Integer entityId, String role, String provider, String account, String visibilityLevel) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialCreateOAuthWithHttpInfo(entityId, role, provider, account, visibilityLevel);
        return resp.getData();
    }

    /**
     * 
     * Assign an OAuth credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the OAuth credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param provider The provider of the Credential as Google, LinkedIn, Facebook  (required)
     * @param account The user or account for this Credential as an email account.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialCreateOAuthWithHttpInfo(Integer entityId, String role, String provider, String account, String visibilityLevel) throws ApiException {
        com.squareup.okhttp.Call call = credentialCreateOAuthValidateBeforeCall(entityId, role, provider, account, visibilityLevel, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign an OAuth credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the OAuth credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param provider The provider of the Credential as Google, LinkedIn, Facebook  (required)
     * @param account The user or account for this Credential as an email account.  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialCreateOAuthAsync(Integer entityId, String role, String provider, String account, String visibilityLevel, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialCreateOAuthValidateBeforeCall(entityId, role, provider, account, visibilityLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialCreateUserPassword
     * @param entityId The identifier of the entity of the UserPassword credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param domain The domain name of the range for this username. domain and username are unique key  (required)
     * @param username The username of the credential. domain and username are unique key  (required)
     * @param password The password of the credential. It is recomended to use some type of encryption on the client size. domain and username are unique key  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialCreateUserPasswordCall(Integer entityId, String role, String domain, String username, String password, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/createUserPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain", domain));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));
        if (visibilityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("visibilityLevel", visibilityLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialCreateUserPasswordValidateBeforeCall(Integer entityId, String role, String domain, String username, String password, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling credentialCreateUserPassword(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling credentialCreateUserPassword(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling credentialCreateUserPassword(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling credentialCreateUserPassword(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling credentialCreateUserPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialCreateUserPasswordCall(entityId, role, domain, username, password, visibilityLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Assign an UserPassword credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the UserPassword credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param domain The domain name of the range for this username. domain and username are unique key  (required)
     * @param username The username of the credential. domain and username are unique key  (required)
     * @param password The password of the credential. It is recomended to use some type of encryption on the client size. domain and username are unique key  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialCreateUserPassword(Integer entityId, String role, String domain, String username, String password, String visibilityLevel) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialCreateUserPasswordWithHttpInfo(entityId, role, domain, username, password, visibilityLevel);
        return resp.getData();
    }

    /**
     * 
     * Assign an UserPassword credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the UserPassword credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param domain The domain name of the range for this username. domain and username are unique key  (required)
     * @param username The username of the credential. domain and username are unique key  (required)
     * @param password The password of the credential. It is recomended to use some type of encryption on the client size. domain and username are unique key  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialCreateUserPasswordWithHttpInfo(Integer entityId, String role, String domain, String username, String password, String visibilityLevel) throws ApiException {
        com.squareup.okhttp.Call call = credentialCreateUserPasswordValidateBeforeCall(entityId, role, domain, username, password, visibilityLevel, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign an UserPassword credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param entityId The identifier of the entity of the UserPassword credential to add. (required)
     * @param role Role who can access with this entity credential  (required)
     * @param domain The domain name of the range for this username. domain and username are unique key  (required)
     * @param username The username of the credential. domain and username are unique key  (required)
     * @param password The password of the credential. It is recomended to use some type of encryption on the client size. domain and username are unique key  (required)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialCreateUserPasswordAsync(Integer entityId, String role, String domain, String username, String password, String visibilityLevel, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialCreateUserPasswordValidateBeforeCall(entityId, role, domain, username, password, visibilityLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialFind
     * @param credentialKey The identifier of the credential to find. (optional)
     * @param entityId The identifier of the entity of the credential to find. (optional)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (optional)
     * @param credentialType The credential type to find. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialFindCall(String credentialKey, Integer entityId, String role, String credentialType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (credentialKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialKey", credentialKey));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (credentialType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialType", credentialType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialFindValidateBeforeCall(String credentialKey, Integer entityId, String role, String credentialType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = credentialFindCall(credentialKey, entityId, role, credentialType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Credentials by User Id 
     * @param credentialKey The identifier of the credential to find. (optional)
     * @param entityId The identifier of the entity of the credential to find. (optional)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (optional)
     * @param credentialType The credential type to find. (optional)
     * @return List&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EntityCredential> credentialFind(String credentialKey, Integer entityId, String role, String credentialType) throws ApiException {
        ApiResponse<List<EntityCredential>> resp = credentialFindWithHttpInfo(credentialKey, entityId, role, credentialType);
        return resp.getData();
    }

    /**
     * 
     * Get Credentials by User Id 
     * @param credentialKey The identifier of the credential to find. (optional)
     * @param entityId The identifier of the entity of the credential to find. (optional)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (optional)
     * @param credentialType The credential type to find. (optional)
     * @return ApiResponse&lt;List&lt;EntityCredential&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EntityCredential>> credentialFindWithHttpInfo(String credentialKey, Integer entityId, String role, String credentialType) throws ApiException {
        com.squareup.okhttp.Call call = credentialFindValidateBeforeCall(credentialKey, entityId, role, credentialType, null, null);
        Type localVarReturnType = new TypeToken<List<EntityCredential>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Credentials by User Id 
     * @param credentialKey The identifier of the credential to find. (optional)
     * @param entityId The identifier of the entity of the credential to find. (optional)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (optional)
     * @param credentialType The credential type to find. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialFindAsync(String credentialKey, Integer entityId, String role, String credentialType, final ApiCallback<List<EntityCredential>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialFindValidateBeforeCall(credentialKey, entityId, role, credentialType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EntityCredential>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialRemove
     * @param credentialKey The identifier of the credential to remove. (required)
     * @param credentialType The credential type to remove. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialRemoveCall(String credentialKey, String credentialType, String role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/removeCredential";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (credentialKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialKey", credentialKey));
        if (credentialType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialType", credentialType));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialRemoveValidateBeforeCall(String credentialKey, String credentialType, String role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentialKey' is set
        if (credentialKey == null) {
            throw new ApiException("Missing the required parameter 'credentialKey' when calling credentialRemove(Async)");
        }
        
        // verify the required parameter 'credentialType' is set
        if (credentialType == null) {
            throw new ApiException("Missing the required parameter 'credentialType' when calling credentialRemove(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling credentialRemove(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialRemoveCall(credentialKey, credentialType, role, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Remove the Credential for the entity id and role received as parameter. 
     * @param credentialKey The identifier of the credential to remove. (required)
     * @param credentialType The credential type to remove. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void credentialRemove(String credentialKey, String credentialType, String role) throws ApiException {
        credentialRemoveWithHttpInfo(credentialKey, credentialType, role);
    }

    /**
     * 
     * Remove the Credential for the entity id and role received as parameter. 
     * @param credentialKey The identifier of the credential to remove. (required)
     * @param credentialType The credential type to remove. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> credentialRemoveWithHttpInfo(String credentialKey, String credentialType, String role) throws ApiException {
        com.squareup.okhttp.Call call = credentialRemoveValidateBeforeCall(credentialKey, credentialType, role, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove the Credential for the entity id and role received as parameter. 
     * @param credentialKey The identifier of the credential to remove. (required)
     * @param credentialType The credential type to remove. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialRemoveAsync(String credentialKey, String credentialType, String role, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialRemoveValidateBeforeCall(credentialKey, credentialType, role, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for credentialSetAPIHashSettings
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param apiHash The password to be modified. It is recommend to send a password with encryption.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialSetAPIHashSettingsCall(String credentialKey, String apiHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/setAPIHashSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (credentialKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialKey", credentialKey));
        if (apiHash != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiHash", apiHash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialSetAPIHashSettingsValidateBeforeCall(String credentialKey, String apiHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentialKey' is set
        if (credentialKey == null) {
            throw new ApiException("Missing the required parameter 'credentialKey' when calling credentialSetAPIHashSettings(Async)");
        }
        
        // verify the required parameter 'apiHash' is set
        if (apiHash == null) {
            throw new ApiException("Missing the required parameter 'apiHash' when calling credentialSetAPIHashSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialSetAPIHashSettingsCall(credentialKey, apiHash, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Edit a credential with information that we receive 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param apiHash The password to be modified. It is recommend to send a password with encryption.  (required)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialSetAPIHashSettings(String credentialKey, String apiHash) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialSetAPIHashSettingsWithHttpInfo(credentialKey, apiHash);
        return resp.getData();
    }

    /**
     * 
     * Edit a credential with information that we receive 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param apiHash The password to be modified. It is recommend to send a password with encryption.  (required)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialSetAPIHashSettingsWithHttpInfo(String credentialKey, String apiHash) throws ApiException {
        com.squareup.okhttp.Call call = credentialSetAPIHashSettingsValidateBeforeCall(credentialKey, apiHash, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit a credential with information that we receive 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param apiHash The password to be modified. It is recommend to send a password with encryption.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialSetAPIHashSettingsAsync(String credentialKey, String apiHash, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialSetAPIHashSettingsValidateBeforeCall(credentialKey, apiHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialSetSettings
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param credentialType The credential type to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param status Status of the credential.  (optional)
     * @param validUntil The date until the credential is valid.                 (optional)
     * @param trustedIps Trusted Ips for the credentials.       (optional)
     * @param bannedIps Banned Ips for the credentials.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialSetSettingsCall(String credentialKey, String credentialType, String role, String status, OffsetDateTime validUntil, String trustedIps, String bannedIps, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/setSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (credentialKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialKey", credentialKey));
        if (credentialType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialType", credentialType));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (validUntil != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validUntil", validUntil));
        if (trustedIps != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trustedIps", trustedIps));
        if (bannedIps != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bannedIps", bannedIps));
        if (visibilityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("visibilityLevel", visibilityLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialSetSettingsValidateBeforeCall(String credentialKey, String credentialType, String role, String status, OffsetDateTime validUntil, String trustedIps, String bannedIps, String visibilityLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentialKey' is set
        if (credentialKey == null) {
            throw new ApiException("Missing the required parameter 'credentialKey' when calling credentialSetSettings(Async)");
        }
        
        // verify the required parameter 'credentialType' is set
        if (credentialType == null) {
            throw new ApiException("Missing the required parameter 'credentialType' when calling credentialSetSettings(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling credentialSetSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialSetSettingsCall(credentialKey, credentialType, role, status, validUntil, trustedIps, bannedIps, visibilityLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Edit status, valid until date, trusted and banned ips of the credential.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param credentialType The credential type to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param status Status of the credential.  (optional)
     * @param validUntil The date until the credential is valid.                 (optional)
     * @param trustedIps Trusted Ips for the credentials.       (optional)
     * @param bannedIps Banned Ips for the credentials.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialSetSettings(String credentialKey, String credentialType, String role, String status, OffsetDateTime validUntil, String trustedIps, String bannedIps, String visibilityLevel) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialSetSettingsWithHttpInfo(credentialKey, credentialType, role, status, validUntil, trustedIps, bannedIps, visibilityLevel);
        return resp.getData();
    }

    /**
     * 
     * Edit status, valid until date, trusted and banned ips of the credential.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param credentialType The credential type to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param status Status of the credential.  (optional)
     * @param validUntil The date until the credential is valid.                 (optional)
     * @param trustedIps Trusted Ips for the credentials.       (optional)
     * @param bannedIps Banned Ips for the credentials.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialSetSettingsWithHttpInfo(String credentialKey, String credentialType, String role, String status, OffsetDateTime validUntil, String trustedIps, String bannedIps, String visibilityLevel) throws ApiException {
        com.squareup.okhttp.Call call = credentialSetSettingsValidateBeforeCall(credentialKey, credentialType, role, status, validUntil, trustedIps, bannedIps, visibilityLevel, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit status, valid until date, trusted and banned ips of the credential.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param credentialType The credential type to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param status Status of the credential.  (optional)
     * @param validUntil The date until the credential is valid.                 (optional)
     * @param trustedIps Trusted Ips for the credentials.       (optional)
     * @param bannedIps Banned Ips for the credentials.  (optional)
     * @param visibilityLevel Visibility level for this credential  (optional, default to LEVEL_1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialSetSettingsAsync(String credentialKey, String credentialType, String role, String status, OffsetDateTime validUntil, String trustedIps, String bannedIps, String visibilityLevel, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialSetSettingsValidateBeforeCall(credentialKey, credentialType, role, status, validUntil, trustedIps, bannedIps, visibilityLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for credentialSetUserPasswordSettings
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param password The password to be modified. It is recommend to send a password with encryption.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call credentialSetUserPasswordSettingsCall(String credentialKey, String role, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credential/setUserPasswordSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (credentialKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialKey", credentialKey));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call credentialSetUserPasswordSettingsValidateBeforeCall(String credentialKey, String role, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'credentialKey' is set
        if (credentialKey == null) {
            throw new ApiException("Missing the required parameter 'credentialKey' when calling credentialSetUserPasswordSettings(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling credentialSetUserPasswordSettings(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling credentialSetUserPasswordSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = credentialSetUserPasswordSettingsCall(credentialKey, role, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Edit a credential with information that we receive 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param password The password to be modified. It is recommend to send a password with encryption.  (required)
     * @return EntityCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityCredential credentialSetUserPasswordSettings(String credentialKey, String role, String password) throws ApiException {
        ApiResponse<EntityCredential> resp = credentialSetUserPasswordSettingsWithHttpInfo(credentialKey, role, password);
        return resp.getData();
    }

    /**
     * 
     * Edit a credential with information that we receive 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param password The password to be modified. It is recommend to send a password with encryption.  (required)
     * @return ApiResponse&lt;EntityCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityCredential> credentialSetUserPasswordSettingsWithHttpInfo(String credentialKey, String role, String password) throws ApiException {
        com.squareup.okhttp.Call call = credentialSetUserPasswordSettingsValidateBeforeCall(credentialKey, role, password, null, null);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit a credential with information that we receive 
     * @param credentialKey The identifier of the credential to edit. (required)
     * @param role Role who can access with this entity credential.   If role is null we return the credentials of all the roles.  (required)
     * @param password The password to be modified. It is recommend to send a password with encryption.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call credentialSetUserPasswordSettingsAsync(String credentialKey, String role, String password, final ApiCallback<EntityCredential> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = credentialSetUserPasswordSettingsValidateBeforeCall(credentialKey, role, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityCredential>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
