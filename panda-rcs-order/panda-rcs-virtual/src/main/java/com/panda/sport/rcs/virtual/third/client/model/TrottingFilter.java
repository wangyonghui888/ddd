/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.RacesFilter;
import java.io.IOException;

/**
 * Configuration of Trotting Playlist 
 */
@ApiModel(description = "Configuration of Trotting Playlist ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class TrottingFilter extends RacesFilter {
  @SerializedName("stadiumCode")
  private String stadiumCode = null;

  @SerializedName("contextJockeys")
  private String contextJockeys = null;

  @SerializedName("resourcePathNameJockeys")
  private String resourcePathNameJockeys = null;

  /**
   * Odds level of the race (ALL-ONLY_GOLDBET-LIGHT-MEDIUM-HARD)
   */
  @JsonAdapter(RaceOddsLevelEnum.Adapter.class)
  public enum RaceOddsLevelEnum {
    ALL("ALL"),
    
    ONLY_GOLDBET("ONLY_GOLDBET"),
    
    LIGHT("LIGHT"),
    
    MEDIUM("MEDIUM"),
    
    HARD("HARD");

    private String value;

    RaceOddsLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RaceOddsLevelEnum fromValue(String text) {
      for (RaceOddsLevelEnum b : RaceOddsLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RaceOddsLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaceOddsLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaceOddsLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RaceOddsLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("raceOddsLevel")
  private RaceOddsLevelEnum raceOddsLevel = null;

  public TrottingFilter stadiumCode(String stadiumCode) {
    this.stadiumCode = stadiumCode;
    return this;
  }

   /**
   * Stadium code for race video.
   * @return stadiumCode
  **/
  @ApiModelProperty(value = "Stadium code for race video.")
  public String getStadiumCode() {
    return stadiumCode;
  }

  public void setStadiumCode(String stadiumCode) {
    this.stadiumCode = stadiumCode;
  }

  public TrottingFilter contextJockeys(String contextJockeys) {
    this.contextJockeys = contextJockeys;
    return this;
  }

   /**
   * Resource element used to load jockeys
   * @return contextJockeys
  **/
  @ApiModelProperty(value = "Resource element used to load jockeys")
  public String getContextJockeys() {
    return contextJockeys;
  }

  public void setContextJockeys(String contextJockeys) {
    this.contextJockeys = contextJockeys;
  }

  public TrottingFilter resourcePathNameJockeys(String resourcePathNameJockeys) {
    this.resourcePathNameJockeys = resourcePathNameJockeys;
    return this;
  }

   /**
   * Route where is the resource to load jockeys
   * @return resourcePathNameJockeys
  **/
  @ApiModelProperty(value = "Route where is the resource to load jockeys")
  public String getResourcePathNameJockeys() {
    return resourcePathNameJockeys;
  }

  public void setResourcePathNameJockeys(String resourcePathNameJockeys) {
    this.resourcePathNameJockeys = resourcePathNameJockeys;
  }

  public TrottingFilter raceOddsLevel(RaceOddsLevelEnum raceOddsLevel) {
    this.raceOddsLevel = raceOddsLevel;
    return this;
  }

   /**
   * Odds level of the race (ALL-ONLY_GOLDBET-LIGHT-MEDIUM-HARD)
   * @return raceOddsLevel
  **/
  @ApiModelProperty(value = "Odds level of the race (ALL-ONLY_GOLDBET-LIGHT-MEDIUM-HARD)")
  public RaceOddsLevelEnum getRaceOddsLevel() {
    return raceOddsLevel;
  }

  public void setRaceOddsLevel(RaceOddsLevelEnum raceOddsLevel) {
    this.raceOddsLevel = raceOddsLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrottingFilter trottingFilter = (TrottingFilter) o;
    return Objects.equals(this.stadiumCode, trottingFilter.stadiumCode) &&
        Objects.equals(this.contextJockeys, trottingFilter.contextJockeys) &&
        Objects.equals(this.resourcePathNameJockeys, trottingFilter.resourcePathNameJockeys) &&
        Objects.equals(this.raceOddsLevel, trottingFilter.raceOddsLevel) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stadiumCode, contextJockeys, resourcePathNameJockeys, raceOddsLevel, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrottingFilter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    stadiumCode: ").append(toIndentedString(stadiumCode)).append("\n");
    sb.append("    contextJockeys: ").append(toIndentedString(contextJockeys)).append("\n");
    sb.append("    resourcePathNameJockeys: ").append(toIndentedString(resourcePathNameJockeys)).append("\n");
    sb.append("    raceOddsLevel: ").append(toIndentedString(raceOddsLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

