/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.GameOddSettings;
import com.panda.sport.rcs.virtual.third.client.model.OddSettings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Game Odd Settings with fixed odds settings. 
 */
@ApiModel(description = "Game Odd Settings with fixed odds settings. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class GameFixedOddSettings extends GameOddSettings {
  @SerializedName("defaultMaxOdd")
  private Double defaultMaxOdd = null;

  @SerializedName("defaultOverround")
  private Double defaultOverround = null;

  @SerializedName("fixedOddSettings")
  private List<OddSettings> fixedOddSettings = null;

  public GameFixedOddSettings defaultMaxOdd(Double defaultMaxOdd) {
    this.defaultMaxOdd = defaultMaxOdd;
    return this;
  }

   /**
   * Max odd value for this odd setting. Odds calculation algorithm will ensure that no odd is higher than given max odd.  And event with 0% probability would be offered with provided max odd value. 
   * minimum: 1
   * @return defaultMaxOdd
  **/
  @ApiModelProperty(value = "Max odd value for this odd setting. Odds calculation algorithm will ensure that no odd is higher than given max odd.  And event with 0% probability would be offered with provided max odd value. ")
  public Double getDefaultMaxOdd() {
    return defaultMaxOdd;
  }

  public void setDefaultMaxOdd(Double defaultMaxOdd) {
    this.defaultMaxOdd = defaultMaxOdd;
  }

  public GameFixedOddSettings defaultOverround(Double defaultOverround) {
    this.defaultOverround = defaultOverround;
    return this;
  }

   /**
   * Overround for odd. Overround can be expressed as 1/payout.  Final odd can be calculated from probaility and overround, maxOdd. 
   * @return defaultOverround
  **/
  @ApiModelProperty(value = "Overround for odd. Overround can be expressed as 1/payout.  Final odd can be calculated from probaility and overround, maxOdd. ")
  public Double getDefaultOverround() {
    return defaultOverround;
  }

  public void setDefaultOverround(Double defaultOverround) {
    this.defaultOverround = defaultOverround;
  }

  public GameFixedOddSettings fixedOddSettings(List<OddSettings> fixedOddSettings) {
    this.fixedOddSettings = fixedOddSettings;
    return this;
  }

  public GameFixedOddSettings addFixedOddSettingsItem(OddSettings fixedOddSettingsItem) {
    if (this.fixedOddSettings == null) {
      this.fixedOddSettings = new ArrayList<OddSettings>();
    }
    this.fixedOddSettings.add(fixedOddSettingsItem);
    return this;
  }

   /**
   * Default overload fixed odds settings for current game. It can be customized / overloaded per market. For non defined values, global defaults per currency would be used. 
   * @return fixedOddSettings
  **/
  @ApiModelProperty(value = "Default overload fixed odds settings for current game. It can be customized / overloaded per market. For non defined values, global defaults per currency would be used. ")
  public List<OddSettings> getFixedOddSettings() {
    return fixedOddSettings;
  }

  public void setFixedOddSettings(List<OddSettings> fixedOddSettings) {
    this.fixedOddSettings = fixedOddSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameFixedOddSettings gameFixedOddSettings = (GameFixedOddSettings) o;
    return Objects.equals(this.defaultMaxOdd, gameFixedOddSettings.defaultMaxOdd) &&
        Objects.equals(this.defaultOverround, gameFixedOddSettings.defaultOverround) &&
        Objects.equals(this.fixedOddSettings, gameFixedOddSettings.fixedOddSettings) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultMaxOdd, defaultOverround, fixedOddSettings, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameFixedOddSettings {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    defaultMaxOdd: ").append(toIndentedString(defaultMaxOdd)).append("\n");
    sb.append("    defaultOverround: ").append(toIndentedString(defaultOverround)).append("\n");
    sb.append("    fixedOddSettings: ").append(toIndentedString(fixedOddSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

