/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Content;
import com.panda.sport.rcs.virtual.third.client.model.Display;
import java.io.IOException;

/**
 * Information about a single display component. 
 */
@ApiModel(description = "Information about a single display component. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class SingleDisplay extends Display {
  @SerializedName("monitor")
  private Integer monitor = null;

  @SerializedName("content")
  private Content content = null;

  public SingleDisplay monitor(Integer monitor) {
    this.monitor = monitor;
    return this;
  }

   /**
   * For multi-output content, allow to choose between different content offered by content.
   * minimum: 0
   * @return monitor
  **/
  @ApiModelProperty(value = "For multi-output content, allow to choose between different content offered by content.")
  public Integer getMonitor() {
    return monitor;
  }

  public void setMonitor(Integer monitor) {
    this.monitor = monitor;
  }

  public SingleDisplay content(Content content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @ApiModelProperty(value = "")
  public Content getContent() {
    return content;
  }

  public void setContent(Content content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleDisplay singleDisplay = (SingleDisplay) o;
    return Objects.equals(this.monitor, singleDisplay.monitor) &&
        Objects.equals(this.content, singleDisplay.content) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitor, content, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleDisplay {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

