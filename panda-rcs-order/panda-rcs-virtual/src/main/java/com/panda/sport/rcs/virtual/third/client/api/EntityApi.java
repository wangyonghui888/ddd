/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.CalculationContext;
import com.panda.sport.rcs.virtual.third.client.model.Entity;
import com.panda.sport.rcs.virtual.third.client.model.EntityBodyMessage;
import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import com.panda.sport.rcs.virtual.third.client.model.SettingValue;
import com.panda.sport.rcs.virtual.third.client.model.TreeInfo;
import com.panda.sport.rcs.virtual.third.client.model.TreeItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntityApi {
    private ApiClient apiClient;

    public EntityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for entityAdd
     * @param entityParentId The parent entity id.  (required)
     * @param entityName The name to be assigned to the entity.  (required)
     * @param status Status to be assigned to the entity (ENABLED, TEST, or DISABLED).  (required)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param extData Information in json format so that the client can store any type in information that requires for its use.  (optional)
     * @param client When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity.  (optional, default to false)
     * @param profiles List of names of the Right-Profile entities associated.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityAddCall(Integer entityParentId, String entityName, String status, String extId, String extData, Boolean client, List<String> profiles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = extData;

        // create path and map variables
        String localVarPath = "/entity/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityParentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityParentId", entityParentId));
        if (entityName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityName", entityName));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (client != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client", client));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (profiles != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "profiles", profiles));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityAddValidateBeforeCall(Integer entityParentId, String entityName, String status, String extId, String extData, Boolean client, List<String> profiles, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityParentId' is set
        if (entityParentId == null) {
            throw new ApiException("Missing the required parameter 'entityParentId' when calling entityAdd(Async)");
        }
        
        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling entityAdd(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling entityAdd(Async)");
        }
        

        com.squareup.okhttp.Call call = entityAddCall(entityParentId, entityName, status, extId, extData, client, profiles, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation of a new entity, whose name (entityName), its external id (extId),  the external information (extData), the id of the reference entity on which we want to create the new entity (parentId),  boolean for is client (client) and the status of the entity. - the entity parent id (*entityParentId*)  - the entity name (*entityName*),  - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - If it&#39;s client (client). When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity. - the status of the entity (enabled, test or disabled). 
     * @param entityParentId The parent entity id.  (required)
     * @param entityName The name to be assigned to the entity.  (required)
     * @param status Status to be assigned to the entity (ENABLED, TEST, or DISABLED).  (required)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param extData Information in json format so that the client can store any type in information that requires for its use.  (optional)
     * @param client When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity.  (optional, default to false)
     * @param profiles List of names of the Right-Profile entities associated.  (optional)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entity entityAdd(Integer entityParentId, String entityName, String status, String extId, String extData, Boolean client, List<String> profiles) throws ApiException {
        ApiResponse<Entity> resp = entityAddWithHttpInfo(entityParentId, entityName, status, extId, extData, client, profiles);
        return resp.getData();
    }

    /**
     * 
     * Creation of a new entity, whose name (entityName), its external id (extId),  the external information (extData), the id of the reference entity on which we want to create the new entity (parentId),  boolean for is client (client) and the status of the entity. - the entity parent id (*entityParentId*)  - the entity name (*entityName*),  - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - If it&#39;s client (client). When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity. - the status of the entity (enabled, test or disabled). 
     * @param entityParentId The parent entity id.  (required)
     * @param entityName The name to be assigned to the entity.  (required)
     * @param status Status to be assigned to the entity (ENABLED, TEST, or DISABLED).  (required)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param extData Information in json format so that the client can store any type in information that requires for its use.  (optional)
     * @param client When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity.  (optional, default to false)
     * @param profiles List of names of the Right-Profile entities associated.  (optional)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entity> entityAddWithHttpInfo(Integer entityParentId, String entityName, String status, String extId, String extData, Boolean client, List<String> profiles) throws ApiException {
        com.squareup.okhttp.Call call = entityAddValidateBeforeCall(entityParentId, entityName, status, extId, extData, client, profiles, null, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creation of a new entity, whose name (entityName), its external id (extId),  the external information (extData), the id of the reference entity on which we want to create the new entity (parentId),  boolean for is client (client) and the status of the entity. - the entity parent id (*entityParentId*)  - the entity name (*entityName*),  - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - If it&#39;s client (client). When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity. - the status of the entity (enabled, test or disabled). 
     * @param entityParentId The parent entity id.  (required)
     * @param entityName The name to be assigned to the entity.  (required)
     * @param status Status to be assigned to the entity (ENABLED, TEST, or DISABLED).  (required)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param extData Information in json format so that the client can store any type in information that requires for its use.  (optional)
     * @param client When true, entity is entitled as an invoicing entity. This affects to accountability in statistics and reports for every single ticket created on every child entity.  (optional, default to false)
     * @param profiles List of names of the Right-Profile entities associated.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityAddAsync(Integer entityParentId, String entityName, String status, String extId, String extData, Boolean client, List<String> profiles, final ApiCallback<Entity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityAddValidateBeforeCall(entityParentId, entityName, status, extId, extData, client, profiles, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entityAddMessage
     * @param entityId The entity id that will receive the message.  (required)
     * @param body Information in json format so that the message can store any type in information.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityAddMessageCall(Integer entityId, EntityBodyMessage body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/entity/addMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityAddMessageValidateBeforeCall(Integer entityId, EntityBodyMessage body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entityAddMessage(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling entityAddMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = entityAddMessageCall(entityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation of a new entity message. 
     * @param entityId The entity id that will receive the message.  (required)
     * @param body Information in json format so that the message can store any type in information.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entityAddMessage(Integer entityId, EntityBodyMessage body) throws ApiException {
        entityAddMessageWithHttpInfo(entityId, body);
    }

    /**
     * 
     * Creation of a new entity message. 
     * @param entityId The entity id that will receive the message.  (required)
     * @param body Information in json format so that the message can store any type in information.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entityAddMessageWithHttpInfo(Integer entityId, EntityBodyMessage body) throws ApiException {
        com.squareup.okhttp.Call call = entityAddMessageValidateBeforeCall(entityId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Creation of a new entity message. 
     * @param entityId The entity id that will receive the message.  (required)
     * @param body Information in json format so that the message can store any type in information.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityAddMessageAsync(Integer entityId, EntityBodyMessage body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityAddMessageValidateBeforeCall(entityId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for entityEdit
     * @param entityId The id of the entity.  (required)
     * @param status Status to be assigned to the entity (enabled, test, or disabled).  (required)
     * @param entityName The name to be assigned to the entity.   (optional)
     * @param client When true, entity is entitled as an invoicing entity.  This affects to accountability in statistics and reports  for every single ticket created on every child entity.  (optional)
     * @param extData Third party entities data.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityEditCall(Integer entityId, String status, String entityName, Boolean client, String extData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (entityName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityName", entityName));
        if (client != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client", client));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityEditValidateBeforeCall(Integer entityId, String status, String entityName, Boolean client, String extData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entityEdit(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling entityEdit(Async)");
        }
        

        com.squareup.okhttp.Call call = entityEditCall(entityId, status, entityName, client, extData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @param status Status to be assigned to the entity (enabled, test, or disabled).  (required)
     * @param entityName The name to be assigned to the entity.   (optional)
     * @param client When true, entity is entitled as an invoicing entity.  This affects to accountability in statistics and reports  for every single ticket created on every child entity.  (optional)
     * @param extData Third party entities data.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entityEdit(Integer entityId, String status, String entityName, Boolean client, String extData) throws ApiException {
        entityEditWithHttpInfo(entityId, status, entityName, client, extData);
    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @param status Status to be assigned to the entity (enabled, test, or disabled).  (required)
     * @param entityName The name to be assigned to the entity.   (optional)
     * @param client When true, entity is entitled as an invoicing entity.  This affects to accountability in statistics and reports  for every single ticket created on every child entity.  (optional)
     * @param extData Third party entities data.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entityEditWithHttpInfo(Integer entityId, String status, String entityName, Boolean client, String extData) throws ApiException {
        com.squareup.okhttp.Call call = entityEditValidateBeforeCall(entityId, status, entityName, client, extData, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId The id of the entity.  (required)
     * @param status Status to be assigned to the entity (enabled, test, or disabled).  (required)
     * @param entityName The name to be assigned to the entity.   (optional)
     * @param client When true, entity is entitled as an invoicing entity.  This affects to accountability in statistics and reports  for every single ticket created on every child entity.  (optional)
     * @param extData Third party entities data.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityEditAsync(Integer entityId, String status, String entityName, Boolean client, String extData, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityEditValidateBeforeCall(entityId, status, entityName, client, extData, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for entityFindById
     * @param entityId The id of the entity.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param parentId The id of the entity parent.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityFindByIdCall(Integer entityId, String extId, Integer parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityFindByIdValidateBeforeCall(Integer entityId, String extId, Integer parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = entityFindByIdCall(entityId, extId, parentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Finds an entity by unique global Id, under restriction of being under root entity Id. The combined use of the entityId and extId parameters will not be allowed. The search for the extId parameter will be performed in combination with the parentId parameter. In case of this parameter does not have a defined value, the identifier value of the request entity will be used
     * @param entityId The id of the entity.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param parentId The id of the entity parent.  (optional)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entity entityFindById(Integer entityId, String extId, Integer parentId) throws ApiException {
        ApiResponse<Entity> resp = entityFindByIdWithHttpInfo(entityId, extId, parentId);
        return resp.getData();
    }

    /**
     * 
     * Finds an entity by unique global Id, under restriction of being under root entity Id. The combined use of the entityId and extId parameters will not be allowed. The search for the extId parameter will be performed in combination with the parentId parameter. In case of this parameter does not have a defined value, the identifier value of the request entity will be used
     * @param entityId The id of the entity.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param parentId The id of the entity parent.  (optional)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entity> entityFindByIdWithHttpInfo(Integer entityId, String extId, Integer parentId) throws ApiException {
        com.squareup.okhttp.Call call = entityFindByIdValidateBeforeCall(entityId, extId, parentId, null, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Finds an entity by unique global Id, under restriction of being under root entity Id. The combined use of the entityId and extId parameters will not be allowed. The search for the extId parameter will be performed in combination with the parentId parameter. In case of this parameter does not have a defined value, the identifier value of the request entity will be used
     * @param entityId The id of the entity.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.  (optional)
     * @param parentId The id of the entity parent.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityFindByIdAsync(Integer entityId, String extId, Integer parentId, final ApiCallback<Entity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityFindByIdValidateBeforeCall(entityId, extId, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entityFindPath
     * @param entityParentId The parent entity id.  (required)
     * @param regExp Regular expression that is used to search for the entity name among all the entities to which we have access.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.    (optional)
     * @param entityId The id of the entity.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityFindPathCall(Integer entityParentId, String regExp, String extId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/findPath";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityParentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityParentId", entityParentId));
        if (regExp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regExp", regExp));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityFindPathValidateBeforeCall(Integer entityParentId, String regExp, String extId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityParentId' is set
        if (entityParentId == null) {
            throw new ApiException("Missing the required parameter 'entityParentId' when calling entityFindPath(Async)");
        }
        

        com.squareup.okhttp.Call call = entityFindPathCall(entityParentId, regExp, extId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityParentId The parent entity id.  (required)
     * @param regExp Regular expression that is used to search for the entity name among all the entities to which we have access.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.    (optional)
     * @param entityId The id of the entity.  (optional)
     * @return List&lt;TreeItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TreeItem> entityFindPath(Integer entityParentId, String regExp, String extId, Integer entityId) throws ApiException {
        ApiResponse<List<TreeItem>> resp = entityFindPathWithHttpInfo(entityParentId, regExp, extId, entityId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityParentId The parent entity id.  (required)
     * @param regExp Regular expression that is used to search for the entity name among all the entities to which we have access.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.    (optional)
     * @param entityId The id of the entity.  (optional)
     * @return ApiResponse&lt;List&lt;TreeItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TreeItem>> entityFindPathWithHttpInfo(Integer entityParentId, String regExp, String extId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = entityFindPathValidateBeforeCall(entityParentId, regExp, extId, entityId, null, null);
        Type localVarReturnType = new TypeToken<List<TreeItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityParentId The parent entity id.  (required)
     * @param regExp Regular expression that is used to search for the entity name among all the entities to which we have access.  (optional)
     * @param extId External unique id of account, for 3rd party integrations.    (optional)
     * @param entityId The id of the entity.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityFindPathAsync(Integer entityParentId, String regExp, String extId, Integer entityId, final ApiCallback<List<TreeItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityFindPathValidateBeforeCall(entityParentId, regExp, extId, entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TreeItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entityGetChildren
     * @param entityId The id of the entity.  (required)
     * @param n The number of entities to be displayed in the search to be performed.  (required)
     * @param first Indicates the first entity to be displayed in the list that will receive entities after the search to be performed.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityGetChildrenCall(Integer entityId, Integer n, Integer first, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/getChildren";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (first != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first", first));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityGetChildrenValidateBeforeCall(Integer entityId, Integer n, Integer first, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entityGetChildren(Async)");
        }
        
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling entityGetChildren(Async)");
        }
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling entityGetChildren(Async)");
        }
        

        com.squareup.okhttp.Call call = entityGetChildrenCall(entityId, n, first, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @param n The number of entities to be displayed in the search to be performed.  (required)
     * @param first Indicates the first entity to be displayed in the list that will receive entities after the search to be performed.  (required)
     * @return TreeInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TreeInfo entityGetChildren(Integer entityId, Integer n, Integer first) throws ApiException {
        ApiResponse<TreeInfo> resp = entityGetChildrenWithHttpInfo(entityId, n, first);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @param n The number of entities to be displayed in the search to be performed.  (required)
     * @param first Indicates the first entity to be displayed in the list that will receive entities after the search to be performed.  (required)
     * @return ApiResponse&lt;TreeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TreeInfo> entityGetChildrenWithHttpInfo(Integer entityId, Integer n, Integer first) throws ApiException {
        com.squareup.okhttp.Call call = entityGetChildrenValidateBeforeCall(entityId, n, first, null, null);
        Type localVarReturnType = new TypeToken<TreeInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId The id of the entity.  (required)
     * @param n The number of entities to be displayed in the search to be performed.  (required)
     * @param first Indicates the first entity to be displayed in the list that will receive entities after the search to be performed.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityGetChildrenAsync(Integer entityId, Integer n, Integer first, final ApiCallback<TreeInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityGetChildrenValidateBeforeCall(entityId, n, first, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entityRemove
     * @param entityId The id of the entity.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entityRemoveCall(Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entityRemoveValidateBeforeCall(Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entityRemove(Async)");
        }
        

        com.squareup.okhttp.Call call = entityRemoveCall(entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entityRemove(Integer entityId) throws ApiException {
        entityRemoveWithHttpInfo(entityId);
    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entityRemoveWithHttpInfo(Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = entityRemoveValidateBeforeCall(entityId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId The id of the entity.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entityRemoveAsync(Integer entityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entityRemoveValidateBeforeCall(entityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCalculationContextById
     * @param calculationId Calculation identifier of the CalculationContext that will be returned.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCalculationContextByIdCall(Integer calculationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/getCalculationContextById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (calculationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calculationId", calculationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCalculationContextByIdValidateBeforeCall(Integer calculationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'calculationId' is set
        if (calculationId == null) {
            throw new ApiException("Missing the required parameter 'calculationId' when calling getCalculationContextById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCalculationContextByIdCall(calculationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return the related CalculationContext of a calculationId. 
     * @param calculationId Calculation identifier of the CalculationContext that will be returned.  (required)
     * @return CalculationContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CalculationContext getCalculationContextById(Integer calculationId) throws ApiException {
        ApiResponse<CalculationContext> resp = getCalculationContextByIdWithHttpInfo(calculationId);
        return resp.getData();
    }

    /**
     * 
     * Return the related CalculationContext of a calculationId. 
     * @param calculationId Calculation identifier of the CalculationContext that will be returned.  (required)
     * @return ApiResponse&lt;CalculationContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CalculationContext> getCalculationContextByIdWithHttpInfo(Integer calculationId) throws ApiException {
        com.squareup.okhttp.Call call = getCalculationContextByIdValidateBeforeCall(calculationId, null, null);
        Type localVarReturnType = new TypeToken<CalculationContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the related CalculationContext of a calculationId. 
     * @param calculationId Calculation identifier of the CalculationContext that will be returned.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCalculationContextByIdAsync(Integer calculationId, final ApiCallback<CalculationContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCalculationContextByIdValidateBeforeCall(calculationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CalculationContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCalculationIdByEntityId
     * @param entityId The entity identifier that we want to know the actual calculationId.  (optional)
     * @param extId The external entity identifier that we want to know the actual calculationId.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCalculationIdByEntityIdCall(Integer entityId, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/getCalculationIdByEntityId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCalculationIdByEntityIdValidateBeforeCall(Integer entityId, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCalculationIdByEntityIdCall(entityId, extId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return an actual calculationId from an entity as the entity is logging at the moment of the request. 
     * @param entityId The entity identifier that we want to know the actual calculationId.  (optional)
     * @param extId The external entity identifier that we want to know the actual calculationId.  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer getCalculationIdByEntityId(Integer entityId, String extId) throws ApiException {
        ApiResponse<Integer> resp = getCalculationIdByEntityIdWithHttpInfo(entityId, extId);
        return resp.getData();
    }

    /**
     * 
     * Return an actual calculationId from an entity as the entity is logging at the moment of the request. 
     * @param entityId The entity identifier that we want to know the actual calculationId.  (optional)
     * @param extId The external entity identifier that we want to know the actual calculationId.  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> getCalculationIdByEntityIdWithHttpInfo(Integer entityId, String extId) throws ApiException {
        com.squareup.okhttp.Call call = getCalculationIdByEntityIdValidateBeforeCall(entityId, extId, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return an actual calculationId from an entity as the entity is logging at the moment of the request. 
     * @param entityId The entity identifier that we want to know the actual calculationId.  (optional)
     * @param extId The external entity identifier that we want to know the actual calculationId.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCalculationIdByEntityIdAsync(Integer entityId, String extId, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCalculationIdByEntityIdValidateBeforeCall(entityId, extId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContext
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param context The context we want to select from the following - **gameContext** - **jackpotContext** - **localizationContext** - **managerContext** - **oddContext** - **riskManagementContext** - **taxContext** - **ticketContext** - **profiles** If the context is not specify, we response all context  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContextCall(List<Integer> entitiesId, String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/getContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entitiesId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "entitiesId", entitiesId));
        if (context != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("context", context));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContextValidateBeforeCall(List<Integer> entitiesId, String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entitiesId' is set
        if (entitiesId == null) {
            throw new ApiException("Missing the required parameter 'entitiesId' when calling getContext(Async)");
        }
        

        com.squareup.okhttp.Call call = getContextCall(entitiesId, context, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Context about Entity. 
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param context The context we want to select from the following - **gameContext** - **jackpotContext** - **localizationContext** - **managerContext** - **oddContext** - **riskManagementContext** - **taxContext** - **ticketContext** - **profiles** If the context is not specify, we response all context  (optional)
     * @return List&lt;SettingValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SettingValue> getContext(List<Integer> entitiesId, String context) throws ApiException {
        ApiResponse<List<SettingValue>> resp = getContextWithHttpInfo(entitiesId, context);
        return resp.getData();
    }

    /**
     * 
     * Get Context about Entity. 
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param context The context we want to select from the following - **gameContext** - **jackpotContext** - **localizationContext** - **managerContext** - **oddContext** - **riskManagementContext** - **taxContext** - **ticketContext** - **profiles** If the context is not specify, we response all context  (optional)
     * @return ApiResponse&lt;List&lt;SettingValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SettingValue>> getContextWithHttpInfo(List<Integer> entitiesId, String context) throws ApiException {
        com.squareup.okhttp.Call call = getContextValidateBeforeCall(entitiesId, context, null, null);
        Type localVarReturnType = new TypeToken<List<SettingValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Context about Entity. 
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param context The context we want to select from the following - **gameContext** - **jackpotContext** - **localizationContext** - **managerContext** - **oddContext** - **riskManagementContext** - **taxContext** - **ticketContext** - **profiles** If the context is not specify, we response all context  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContextAsync(List<Integer> entitiesId, String context, final ApiCallback<List<SettingValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContextValidateBeforeCall(entitiesId, context, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SettingValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProfiles
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfilesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/getProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfilesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getProfilesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all existing Right Profiles in the system. 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getProfiles() throws ApiException {
        ApiResponse<List<String>> resp = getProfilesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get all existing Right Profiles in the system. 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getProfilesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getProfilesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all existing Right Profiles in the system. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfilesAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfilesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSessionSettingsId
     * @param sessionSettings A json External session settings configuration  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSessionSettingsIdCall(Object sessionSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sessionSettings;

        // create path and map variables
        String localVarPath = "/entity/getSessionSettingIdByEntityId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSessionSettingsIdValidateBeforeCall(Object sessionSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sessionSettings' is set
        if (sessionSettings == null) {
            throw new ApiException("Missing the required parameter 'sessionSettings' when calling getSessionSettingsId(Async)");
        }
        

        com.squareup.okhttp.Call call = getSessionSettingsIdCall(sessionSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return an actual sessionSettingId. 
     * @param sessionSettings A json External session settings configuration  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer getSessionSettingsId(Object sessionSettings) throws ApiException {
        ApiResponse<Integer> resp = getSessionSettingsIdWithHttpInfo(sessionSettings);
        return resp.getData();
    }

    /**
     * 
     * Return an actual sessionSettingId. 
     * @param sessionSettings A json External session settings configuration  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> getSessionSettingsIdWithHttpInfo(Object sessionSettings) throws ApiException {
        com.squareup.okhttp.Call call = getSessionSettingsIdValidateBeforeCall(sessionSettings, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return an actual sessionSettingId. 
     * @param sessionSettings A json External session settings configuration  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSessionSettingsIdAsync(Object sessionSettings, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSessionSettingsIdValidateBeforeCall(sessionSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setContext
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param contexts An array with context to save  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setContextCall(List<Integer> entitiesId, Object contexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contexts;

        // create path and map variables
        String localVarPath = "/entity/setContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entitiesId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "entitiesId", entitiesId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setContextValidateBeforeCall(List<Integer> entitiesId, Object contexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entitiesId' is set
        if (entitiesId == null) {
            throw new ApiException("Missing the required parameter 'entitiesId' when calling setContext(Async)");
        }
        
        // verify the required parameter 'contexts' is set
        if (contexts == null) {
            throw new ApiException("Missing the required parameter 'contexts' when calling setContext(Async)");
        }
        

        com.squareup.okhttp.Call call = setContextCall(entitiesId, contexts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set Context Setting about Entity. 
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param contexts An array with context to save  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setContext(List<Integer> entitiesId, Object contexts) throws ApiException {
        setContextWithHttpInfo(entitiesId, contexts);
    }

    /**
     * 
     * Set Context Setting about Entity. 
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param contexts An array with context to save  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setContextWithHttpInfo(List<Integer> entitiesId, Object contexts) throws ApiException {
        com.squareup.okhttp.Call call = setContextValidateBeforeCall(entitiesId, contexts, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set Context Setting about Entity. 
     * @param entitiesId List of ids of entities we want to display.  (required)
     * @param contexts An array with context to save  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setContextAsync(List<Integer> entitiesId, Object contexts, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setContextValidateBeforeCall(entitiesId, contexts, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
