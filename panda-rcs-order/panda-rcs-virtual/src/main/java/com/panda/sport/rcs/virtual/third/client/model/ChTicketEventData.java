/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.ChCompetitionType;
import com.panda.sport.rcs.virtual.third.client.model.ChEventBlockData;
import com.panda.sport.rcs.virtual.third.client.model.FootballParticipant;
import com.panda.sport.rcs.virtual.third.client.model.TicketEventData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Information about football event in tickets. 
 */
@ApiModel(description = "Information about football event in tickets. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ChTicketEventData extends TicketEventData {
  @SerializedName("participants")
  private List<FootballParticipant> participants = null;

  @SerializedName("competitionType")
  private ChCompetitionType competitionType = null;

  @SerializedName("data")
  private ChEventBlockData data = null;

  @SerializedName("eventNdx")
  private Integer eventNdx = null;

  @SerializedName("competitionSubType")
  private String competitionSubType = null;

  public ChTicketEventData participants(List<FootballParticipant> participants) {
    this.participants = participants;
    return this;
  }

  public ChTicketEventData addParticipantsItem(FootballParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<FootballParticipant>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Participants. Open for extensibility. 
   * @return participants
  **/
  @ApiModelProperty(value = "Participants. Open for extensibility. ")
  public List<FootballParticipant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<FootballParticipant> participants) {
    this.participants = participants;
  }

  public ChTicketEventData competitionType(ChCompetitionType competitionType) {
    this.competitionType = competitionType;
    return this;
  }

   /**
   * Get competitionType
   * @return competitionType
  **/
  @ApiModelProperty(value = "")
  public ChCompetitionType getCompetitionType() {
    return competitionType;
  }

  public void setCompetitionType(ChCompetitionType competitionType) {
    this.competitionType = competitionType;
  }

  public ChTicketEventData data(ChEventBlockData data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @ApiModelProperty(value = "")
  public ChEventBlockData getData() {
    return data;
  }

  public void setData(ChEventBlockData data) {
    this.data = data;
  }

  public ChTicketEventData eventNdx(Integer eventNdx) {
    this.eventNdx = eventNdx;
    return this;
  }

   /**
   * TicketEvent index within EventBlock event set 
   * @return eventNdx
  **/
  @ApiModelProperty(value = "TicketEvent index within EventBlock event set ")
  public Integer getEventNdx() {
    return eventNdx;
  }

  public void setEventNdx(Integer eventNdx) {
    this.eventNdx = eventNdx;
  }

  public ChTicketEventData competitionSubType(String competitionSubType) {
    this.competitionSubType = competitionSubType;
    return this;
  }

   /**
   * Identify the specific competition subType. The values are;   - LEAGUE   - CHAMPION   - CUP   - SOCCER   - LIBERTADORES 
   * @return competitionSubType
  **/
  @ApiModelProperty(value = "Identify the specific competition subType. The values are;   - LEAGUE   - CHAMPION   - CUP   - SOCCER   - LIBERTADORES ")
  public String getCompetitionSubType() {
    return competitionSubType;
  }

  public void setCompetitionSubType(String competitionSubType) {
    this.competitionSubType = competitionSubType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChTicketEventData chTicketEventData = (ChTicketEventData) o;
    return Objects.equals(this.participants, chTicketEventData.participants) &&
        Objects.equals(this.competitionType, chTicketEventData.competitionType) &&
        Objects.equals(this.data, chTicketEventData.data) &&
        Objects.equals(this.eventNdx, chTicketEventData.eventNdx) &&
        Objects.equals(this.competitionSubType, chTicketEventData.competitionSubType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participants, competitionType, data, eventNdx, competitionSubType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChTicketEventData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    competitionType: ").append(toIndentedString(competitionType)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    eventNdx: ").append(toIndentedString(eventNdx)).append("\n");
    sb.append("    competitionSubType: ").append(toIndentedString(competitionSubType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

