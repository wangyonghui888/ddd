/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.InvoiceContext;
import com.panda.sport.rcs.virtual.third.client.model.InvoiceReportCurrencyData;
import com.panda.sport.rcs.virtual.third.client.model.ReportData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Internal Invoice report data
 */
@ApiModel(description = "Internal Invoice report data")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class InvoiceReportData extends ReportData {
  @SerializedName("startTime")
  private OffsetDateTime startTime = null;

  @SerializedName("endTime")
  private OffsetDateTime endTime = null;

  @SerializedName("currenciesData")
  private List<InvoiceReportCurrencyData> currenciesData = null;

  @SerializedName("totalExchange")
  private Double totalExchange = null;

  @SerializedName("entitiesWithTickets")
  private Integer entitiesWithTickets = null;

  @SerializedName("totalEntities")
  private Integer totalEntities = null;

  @SerializedName("totalTickets")
  private Integer totalTickets = null;

  @SerializedName("softwareFee")
  private Double softwareFee = null;

  @SerializedName("invoiceContextBase")
  private InvoiceContext invoiceContextBase = null;

  @SerializedName("invoiceContextTarget")
  private InvoiceContext invoiceContextTarget = null;

  public InvoiceReportData startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Start time of original data related to this report (&gt;&#x3D;).
   * @return startTime
  **/
  @ApiModelProperty(value = "Start time of original data related to this report (>=).")
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }

  public InvoiceReportData endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * End time, non inclusive limt of original data related to this report (&lt;).
   * @return endTime
  **/
  @ApiModelProperty(value = "End time, non inclusive limt of original data related to this report (<).")
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }

  public InvoiceReportData currenciesData(List<InvoiceReportCurrencyData> currenciesData) {
    this.currenciesData = currenciesData;
    return this;
  }

  public InvoiceReportData addCurrenciesDataItem(InvoiceReportCurrencyData currenciesDataItem) {
    if (this.currenciesData == null) {
      this.currenciesData = new ArrayList<InvoiceReportCurrencyData>();
    }
    this.currenciesData.add(currenciesDataItem);
    return this;
  }

   /**
   * Array of balance accounts groupped by currency.
   * @return currenciesData
  **/
  @ApiModelProperty(value = "Array of balance accounts groupped by currency.")
  public List<InvoiceReportCurrencyData> getCurrenciesData() {
    return currenciesData;
  }

  public void setCurrenciesData(List<InvoiceReportCurrencyData> currenciesData) {
    this.currenciesData = currenciesData;
  }

  public InvoiceReportData totalExchange(Double totalExchange) {
    this.totalExchange = totalExchange;
    return this;
  }

   /**
   * Total amount of software licence fee to be remitted by output currency.
   * @return totalExchange
  **/
  @ApiModelProperty(value = "Total amount of software licence fee to be remitted by output currency.")
  public Double getTotalExchange() {
    return totalExchange;
  }

  public void setTotalExchange(Double totalExchange) {
    this.totalExchange = totalExchange;
  }

  public InvoiceReportData entitiesWithTickets(Integer entitiesWithTickets) {
    this.entitiesWithTickets = entitiesWithTickets;
    return this;
  }

   /**
   * Total of entities with played tickets.
   * @return entitiesWithTickets
  **/
  @ApiModelProperty(value = "Total of entities with played tickets.")
  public Integer getEntitiesWithTickets() {
    return entitiesWithTickets;
  }

  public void setEntitiesWithTickets(Integer entitiesWithTickets) {
    this.entitiesWithTickets = entitiesWithTickets;
  }

  public InvoiceReportData totalEntities(Integer totalEntities) {
    this.totalEntities = totalEntities;
    return this;
  }

   /**
   * Total of entities under the root entity for the generation of this report.
   * @return totalEntities
  **/
  @ApiModelProperty(value = "Total of entities under the root entity for the generation of this report.")
  public Integer getTotalEntities() {
    return totalEntities;
  }

  public void setTotalEntities(Integer totalEntities) {
    this.totalEntities = totalEntities;
  }

  public InvoiceReportData totalTickets(Integer totalTickets) {
    this.totalTickets = totalTickets;
    return this;
  }

   /**
   * Total of played tickets.
   * @return totalTickets
  **/
  @ApiModelProperty(value = "Total of played tickets.")
  public Integer getTotalTickets() {
    return totalTickets;
  }

  public void setTotalTickets(Integer totalTickets) {
    this.totalTickets = totalTickets;
  }

  public InvoiceReportData softwareFee(Double softwareFee) {
    this.softwareFee = softwareFee;
    return this;
  }

   /**
   * Software license fee percentage.
   * @return softwareFee
  **/
  @ApiModelProperty(value = "Software license fee percentage.")
  public Double getSoftwareFee() {
    return softwareFee;
  }

  public void setSoftwareFee(Double softwareFee) {
    this.softwareFee = softwareFee;
  }

  public InvoiceReportData invoiceContextBase(InvoiceContext invoiceContextBase) {
    this.invoiceContextBase = invoiceContextBase;
    return this;
  }

   /**
   * Get invoiceContextBase
   * @return invoiceContextBase
  **/
  @ApiModelProperty(value = "")
  public InvoiceContext getInvoiceContextBase() {
    return invoiceContextBase;
  }

  public void setInvoiceContextBase(InvoiceContext invoiceContextBase) {
    this.invoiceContextBase = invoiceContextBase;
  }

  public InvoiceReportData invoiceContextTarget(InvoiceContext invoiceContextTarget) {
    this.invoiceContextTarget = invoiceContextTarget;
    return this;
  }

   /**
   * Get invoiceContextTarget
   * @return invoiceContextTarget
  **/
  @ApiModelProperty(value = "")
  public InvoiceContext getInvoiceContextTarget() {
    return invoiceContextTarget;
  }

  public void setInvoiceContextTarget(InvoiceContext invoiceContextTarget) {
    this.invoiceContextTarget = invoiceContextTarget;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceReportData invoiceReportData = (InvoiceReportData) o;
    return Objects.equals(this.startTime, invoiceReportData.startTime) &&
        Objects.equals(this.endTime, invoiceReportData.endTime) &&
        Objects.equals(this.currenciesData, invoiceReportData.currenciesData) &&
        Objects.equals(this.totalExchange, invoiceReportData.totalExchange) &&
        Objects.equals(this.entitiesWithTickets, invoiceReportData.entitiesWithTickets) &&
        Objects.equals(this.totalEntities, invoiceReportData.totalEntities) &&
        Objects.equals(this.totalTickets, invoiceReportData.totalTickets) &&
        Objects.equals(this.softwareFee, invoiceReportData.softwareFee) &&
        Objects.equals(this.invoiceContextBase, invoiceReportData.invoiceContextBase) &&
        Objects.equals(this.invoiceContextTarget, invoiceReportData.invoiceContextTarget) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, endTime, currenciesData, totalExchange, entitiesWithTickets, totalEntities, totalTickets, softwareFee, invoiceContextBase, invoiceContextTarget, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceReportData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    currenciesData: ").append(toIndentedString(currenciesData)).append("\n");
    sb.append("    totalExchange: ").append(toIndentedString(totalExchange)).append("\n");
    sb.append("    entitiesWithTickets: ").append(toIndentedString(entitiesWithTickets)).append("\n");
    sb.append("    totalEntities: ").append(toIndentedString(totalEntities)).append("\n");
    sb.append("    totalTickets: ").append(toIndentedString(totalTickets)).append("\n");
    sb.append("    softwareFee: ").append(toIndentedString(softwareFee)).append("\n");
    sb.append("    invoiceContextBase: ").append(toIndentedString(invoiceContextBase)).append("\n");
    sb.append("    invoiceContextTarget: ").append(toIndentedString(invoiceContextTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

