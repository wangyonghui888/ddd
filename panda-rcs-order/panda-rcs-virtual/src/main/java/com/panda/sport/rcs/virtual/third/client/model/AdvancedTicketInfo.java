/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Advanced ticket info that contains general info, ticket status log, settings and odd settings. 
 */
@ApiModel(description = "Advanced ticket info that contains general info, ticket status log, settings and odd settings. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class AdvancedTicketInfo {
  @SerializedName("userTz")
  private Double userTz = null;

  @SerializedName("groupId")
  private Integer groupId = null;

  @SerializedName("locationCancelled")
  private String locationCancelled = null;

  @SerializedName("locationPayout")
  private String locationPayout = null;

  @SerializedName("autoPayment")
  private Boolean autoPayment = null;

  @SerializedName("testMode")
  private Boolean testMode = null;

  @SerializedName("paidOutOnSolve")
  private Boolean paidOutOnSolve = null;

  @SerializedName("sessionSettings")
  private String sessionSettings = null;

  @SerializedName("oddSettings")
  private String oddSettings = null;

  public AdvancedTicketInfo userTz(Double userTz) {
    this.userTz = userTz;
    return this;
  }

   /**
   * User timezone. 
   * @return userTz
  **/
  @ApiModelProperty(value = "User timezone. ")
  public Double getUserTz() {
    return userTz;
  }

  public void setUserTz(Double userTz) {
    this.userTz = userTz;
  }

  public AdvancedTicketInfo groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Client ID. First parent entity that&#39;s a client. 
   * @return groupId
  **/
  @ApiModelProperty(value = "Client ID. First parent entity that's a client. ")
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }

  public AdvancedTicketInfo locationCancelled(String locationCancelled) {
    this.locationCancelled = locationCancelled;
    return this;
  }

   /**
   * Where was the ticket cancelled. 
   * @return locationCancelled
  **/
  @ApiModelProperty(value = "Where was the ticket cancelled. ")
  public String getLocationCancelled() {
    return locationCancelled;
  }

  public void setLocationCancelled(String locationCancelled) {
    this.locationCancelled = locationCancelled;
  }

  public AdvancedTicketInfo locationPayout(String locationPayout) {
    this.locationPayout = locationPayout;
    return this;
  }

   /**
   * Where was the ticket paid. 
   * @return locationPayout
  **/
  @ApiModelProperty(value = "Where was the ticket paid. ")
  public String getLocationPayout() {
    return locationPayout;
  }

  public void setLocationPayout(String locationPayout) {
    this.locationPayout = locationPayout;
  }

  public AdvancedTicketInfo autoPayment(Boolean autoPayment) {
    this.autoPayment = autoPayment;
    return this;
  }

   /**
   * Indicate if the ticket be paid automatically. 
   * @return autoPayment
  **/
  @ApiModelProperty(value = "Indicate if the ticket be paid automatically. ")
  public Boolean isAutoPayment() {
    return autoPayment;
  }

  public void setAutoPayment(Boolean autoPayment) {
    this.autoPayment = autoPayment;
  }

  public AdvancedTicketInfo testMode(Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

   /**
   * Indicate if the ticket is in a test mode. 
   * @return testMode
  **/
  @ApiModelProperty(value = "Indicate if the ticket is in a test mode. ")
  public Boolean isTestMode() {
    return testMode;
  }

  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }

  public AdvancedTicketInfo paidOutOnSolve(Boolean paidOutOnSolve) {
    this.paidOutOnSolve = paidOutOnSolve;
    return this;
  }

   /**
   * Indicate if the ticket is paid out on solve or not. 
   * @return paidOutOnSolve
  **/
  @ApiModelProperty(value = "Indicate if the ticket is paid out on solve or not. ")
  public Boolean isPaidOutOnSolve() {
    return paidOutOnSolve;
  }

  public void setPaidOutOnSolve(Boolean paidOutOnSolve) {
    this.paidOutOnSolve = paidOutOnSolve;
  }

  public AdvancedTicketInfo sessionSettings(String sessionSettings) {
    this.sessionSettings = sessionSettings;
    return this;
  }

   /**
   * Settings at the time of the account login. 
   * @return sessionSettings
  **/
  @ApiModelProperty(value = "Settings at the time of the account login. ")
  public String getSessionSettings() {
    return sessionSettings;
  }

  public void setSessionSettings(String sessionSettings) {
    this.sessionSettings = sessionSettings;
  }

  public AdvancedTicketInfo oddSettings(String oddSettings) {
    this.oddSettings = oddSettings;
    return this;
  }

   /**
   * Odd settings for the ticket. 
   * @return oddSettings
  **/
  @ApiModelProperty(value = "Odd settings for the ticket. ")
  public String getOddSettings() {
    return oddSettings;
  }

  public void setOddSettings(String oddSettings) {
    this.oddSettings = oddSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedTicketInfo advancedTicketInfo = (AdvancedTicketInfo) o;
    return Objects.equals(this.userTz, advancedTicketInfo.userTz) &&
        Objects.equals(this.groupId, advancedTicketInfo.groupId) &&
        Objects.equals(this.locationCancelled, advancedTicketInfo.locationCancelled) &&
        Objects.equals(this.locationPayout, advancedTicketInfo.locationPayout) &&
        Objects.equals(this.autoPayment, advancedTicketInfo.autoPayment) &&
        Objects.equals(this.testMode, advancedTicketInfo.testMode) &&
        Objects.equals(this.paidOutOnSolve, advancedTicketInfo.paidOutOnSolve) &&
        Objects.equals(this.sessionSettings, advancedTicketInfo.sessionSettings) &&
        Objects.equals(this.oddSettings, advancedTicketInfo.oddSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userTz, groupId, locationCancelled, locationPayout, autoPayment, testMode, paidOutOnSolve, sessionSettings, oddSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedTicketInfo {\n");
    
    sb.append("    userTz: ").append(toIndentedString(userTz)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    locationCancelled: ").append(toIndentedString(locationCancelled)).append("\n");
    sb.append("    locationPayout: ").append(toIndentedString(locationPayout)).append("\n");
    sb.append("    autoPayment: ").append(toIndentedString(autoPayment)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    paidOutOnSolve: ").append(toIndentedString(paidOutOnSolve)).append("\n");
    sb.append("    sessionSettings: ").append(toIndentedString(sessionSettings)).append("\n");
    sb.append("    oddSettings: ").append(toIndentedString(oddSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

