/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Participant;
import java.io.IOException;

/**
 * The dog race participant information. 
 */
@ApiModel(description = "The dog race participant information. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class EvDogParticipant extends Participant {
  @SerializedName("name")
  private String name = null;

  @SerializedName("age")
  private Integer age = null;

  @SerializedName("sex")
  private String sex = null;

  @SerializedName("timeSinceSeason")
  private Integer timeSinceSeason = null;

  @SerializedName("art")
  private Float art = null;

  @SerializedName("aggressiveness")
  private Float aggressiveness = null;

  @SerializedName("bestTime")
  private Float bestTime = null;

  @SerializedName("currentWeight")
  private Float currentWeight = null;

  @SerializedName("idealWeight")
  private Float idealWeight = null;

  @SerializedName("racingLine")
  private String racingLine = null;

  @SerializedName("ability")
  private Float ability = null;

  @SerializedName("star")
  private Integer star = null;

  @SerializedName("pace")
  private String pace = null;

  /**
   * Gets or Sets group
   */
  @JsonAdapter(GroupEnum.Adapter.class)
  public enum GroupEnum {
    NORMAL("NORMAL"),
    
    SLOW("SLOW");

    private String value;

    GroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupEnum fromValue(String text) {
      for (GroupEnum b : GroupEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("group")
  private GroupEnum group = null;

  public EvDogParticipant name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public EvDogParticipant age(Integer age) {
    this.age = age;
    return this;
  }

   /**
   * Get age
   * @return age
  **/
  @ApiModelProperty(value = "")
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }

  public EvDogParticipant sex(String sex) {
    this.sex = sex;
    return this;
  }

   /**
   * Get sex
   * @return sex
  **/
  @ApiModelProperty(value = "")
  public String getSex() {
    return sex;
  }

  public void setSex(String sex) {
    this.sex = sex;
  }

  public EvDogParticipant timeSinceSeason(Integer timeSinceSeason) {
    this.timeSinceSeason = timeSinceSeason;
    return this;
  }

   /**
   * Get timeSinceSeason
   * @return timeSinceSeason
  **/
  @ApiModelProperty(value = "")
  public Integer getTimeSinceSeason() {
    return timeSinceSeason;
  }

  public void setTimeSinceSeason(Integer timeSinceSeason) {
    this.timeSinceSeason = timeSinceSeason;
  }

  public EvDogParticipant art(Float art) {
    this.art = art;
    return this;
  }

   /**
   * Get art
   * @return art
  **/
  @ApiModelProperty(value = "")
  public Float getArt() {
    return art;
  }

  public void setArt(Float art) {
    this.art = art;
  }

  public EvDogParticipant aggressiveness(Float aggressiveness) {
    this.aggressiveness = aggressiveness;
    return this;
  }

   /**
   * Get aggressiveness
   * @return aggressiveness
  **/
  @ApiModelProperty(value = "")
  public Float getAggressiveness() {
    return aggressiveness;
  }

  public void setAggressiveness(Float aggressiveness) {
    this.aggressiveness = aggressiveness;
  }

  public EvDogParticipant bestTime(Float bestTime) {
    this.bestTime = bestTime;
    return this;
  }

   /**
   * Get bestTime
   * @return bestTime
  **/
  @ApiModelProperty(value = "")
  public Float getBestTime() {
    return bestTime;
  }

  public void setBestTime(Float bestTime) {
    this.bestTime = bestTime;
  }

  public EvDogParticipant currentWeight(Float currentWeight) {
    this.currentWeight = currentWeight;
    return this;
  }

   /**
   * Get currentWeight
   * @return currentWeight
  **/
  @ApiModelProperty(value = "")
  public Float getCurrentWeight() {
    return currentWeight;
  }

  public void setCurrentWeight(Float currentWeight) {
    this.currentWeight = currentWeight;
  }

  public EvDogParticipant idealWeight(Float idealWeight) {
    this.idealWeight = idealWeight;
    return this;
  }

   /**
   * Get idealWeight
   * @return idealWeight
  **/
  @ApiModelProperty(value = "")
  public Float getIdealWeight() {
    return idealWeight;
  }

  public void setIdealWeight(Float idealWeight) {
    this.idealWeight = idealWeight;
  }

  public EvDogParticipant racingLine(String racingLine) {
    this.racingLine = racingLine;
    return this;
  }

   /**
   * Get racingLine
   * @return racingLine
  **/
  @ApiModelProperty(value = "")
  public String getRacingLine() {
    return racingLine;
  }

  public void setRacingLine(String racingLine) {
    this.racingLine = racingLine;
  }

  public EvDogParticipant ability(Float ability) {
    this.ability = ability;
    return this;
  }

   /**
   * Get ability
   * @return ability
  **/
  @ApiModelProperty(value = "")
  public Float getAbility() {
    return ability;
  }

  public void setAbility(Float ability) {
    this.ability = ability;
  }

  public EvDogParticipant star(Integer star) {
    this.star = star;
    return this;
  }

   /**
   * Get star
   * @return star
  **/
  @ApiModelProperty(value = "")
  public Integer getStar() {
    return star;
  }

  public void setStar(Integer star) {
    this.star = star;
  }

  public EvDogParticipant pace(String pace) {
    this.pace = pace;
    return this;
  }

   /**
   * Get pace
   * @return pace
  **/
  @ApiModelProperty(value = "")
  public String getPace() {
    return pace;
  }

  public void setPace(String pace) {
    this.pace = pace;
  }

  public EvDogParticipant group(GroupEnum group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @ApiModelProperty(value = "")
  public GroupEnum getGroup() {
    return group;
  }

  public void setGroup(GroupEnum group) {
    this.group = group;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvDogParticipant evDogParticipant = (EvDogParticipant) o;
    return Objects.equals(this.name, evDogParticipant.name) &&
        Objects.equals(this.age, evDogParticipant.age) &&
        Objects.equals(this.sex, evDogParticipant.sex) &&
        Objects.equals(this.timeSinceSeason, evDogParticipant.timeSinceSeason) &&
        Objects.equals(this.art, evDogParticipant.art) &&
        Objects.equals(this.aggressiveness, evDogParticipant.aggressiveness) &&
        Objects.equals(this.bestTime, evDogParticipant.bestTime) &&
        Objects.equals(this.currentWeight, evDogParticipant.currentWeight) &&
        Objects.equals(this.idealWeight, evDogParticipant.idealWeight) &&
        Objects.equals(this.racingLine, evDogParticipant.racingLine) &&
        Objects.equals(this.ability, evDogParticipant.ability) &&
        Objects.equals(this.star, evDogParticipant.star) &&
        Objects.equals(this.pace, evDogParticipant.pace) &&
        Objects.equals(this.group, evDogParticipant.group) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, age, sex, timeSinceSeason, art, aggressiveness, bestTime, currentWeight, idealWeight, racingLine, ability, star, pace, group, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvDogParticipant {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    timeSinceSeason: ").append(toIndentedString(timeSinceSeason)).append("\n");
    sb.append("    art: ").append(toIndentedString(art)).append("\n");
    sb.append("    aggressiveness: ").append(toIndentedString(aggressiveness)).append("\n");
    sb.append("    bestTime: ").append(toIndentedString(bestTime)).append("\n");
    sb.append("    currentWeight: ").append(toIndentedString(currentWeight)).append("\n");
    sb.append("    idealWeight: ").append(toIndentedString(idealWeight)).append("\n");
    sb.append("    racingLine: ").append(toIndentedString(racingLine)).append("\n");
    sb.append("    ability: ").append(toIndentedString(ability)).append("\n");
    sb.append("    star: ").append(toIndentedString(star)).append("\n");
    sb.append("    pace: ").append(toIndentedString(pace)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

