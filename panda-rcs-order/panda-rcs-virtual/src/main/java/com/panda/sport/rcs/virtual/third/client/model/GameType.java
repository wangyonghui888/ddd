/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Game types of all supported entities. Used for factories based on gameType. Specific game factory types - CH - Champions (Champions football league)       - DIRTTRACK - Dirt Track - DOG - Dog - HORSE - Horse - WC - World Cup - KART - Karts - KN - Keno - LOTTOFIVE - Lotto Five - LL - Live Lotto - MOTORBIKE - Motorbikes - S7 - Super Seven       - SPEEDWAY - Speedway - SN - Spin2win - SX - Perfect Six  - S2W - Spin 2 Wheels - TROTTING - Trotting - BASKET - Basket - FIGHT - Fight 
 */
@ApiModel(description = "Game types of all supported entities. Used for factories based on gameType. Specific game factory types - CH - Champions (Champions football league)       - DIRTTRACK - Dirt Track - DOG - Dog - HORSE - Horse - WC - World Cup - KART - Karts - KN - Keno - LOTTOFIVE - Lotto Five - LL - Live Lotto - MOTORBIKE - Motorbikes - S7 - Super Seven       - SPEEDWAY - Speedway - SN - Spin2win - SX - Perfect Six  - S2W - Spin 2 Wheels - TROTTING - Trotting - BASKET - Basket - FIGHT - Fight ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class GameType {
  /**
   * GameType value selected. 
   */
  @JsonAdapter(ValEnum.Adapter.class)
  public enum ValEnum {
    CH("CH"),
    
    DIRTTRACK("DIRTTRACK"),
    
    DOG("DOG"),
    
    HORSE("HORSE"),
    
    KART("KART"),
    
    KN("KN"),
    
    LOTTOFIVE("LOTTOFIVE"),
    
    LL("LL"),
    
    MOTORBIKE("MOTORBIKE"),
    
    S7("S7"),
    
    SN("SN"),
    
    SPEEDWAY("SPEEDWAY"),
    
    SX("SX"),
    
    S2W("S2W"),
    
    TROTTING("TROTTING"),
    
    BASKET("BASKET"),
    
    FIGHT("FIGHT");

    private String value;

    ValEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValEnum fromValue(String text) {
      for (ValEnum b : ValEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ValEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ValEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("val")
  private ValEnum val = null;

  public GameType val(ValEnum val) {
    this.val = val;
    return this;
  }

   /**
   * GameType value selected. 
   * @return val
  **/
  @ApiModelProperty(value = "GameType value selected. ")
  public ValEnum getVal() {
    return val;
  }

  public void setVal(ValEnum val) {
    this.val = val;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameType gameType = (GameType) o;
    return Objects.equals(this.val, gameType.val);
  }

  @Override
  public int hashCode() {
    return Objects.hash(val);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameType {\n");
    
    sb.append("    val: ").append(toIndentedString(val)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

