/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import com.panda.sport.rcs.virtual.third.client.model.JackpotMessage;
import com.panda.sport.rcs.virtual.third.client.model.JackpotStatus;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JackpotApi {
    private ApiClient apiClient;

    public JackpotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JackpotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for jackpotFindLog
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over timeSolve).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param ticketId The id of the ticket (optional)
     * @param jackpotId The jackpot id (optional)
     * @param targetId Id of target entity holder of jackpot status (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param isLast true for max(timeSolve) if a given targetId (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over timeSolve), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jackpotFindLogCall(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, Long ticketId, String jackpotId, Integer targetId, String currency, Boolean isLast, OffsetDateTime endTime, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jackpot/log/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (ticketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketId", ticketId));
        if (jackpotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jackpotId", jackpotId));
        if (targetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("targetId", targetId));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        if (isLast != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLast", isLast));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (first != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first", first));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jackpotFindLogValidateBeforeCall(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, Long ticketId, String jackpotId, Integer targetId, String currency, Boolean isLast, OffsetDateTime endTime, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jackpotFindLog(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling jackpotFindLog(Async)");
        }
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling jackpotFindLog(Async)");
        }
        
        // verify the required parameter 'orderBy' is set
        if (orderBy == null) {
            throw new ApiException("Missing the required parameter 'orderBy' when calling jackpotFindLog(Async)");
        }
        

        com.squareup.okhttp.Call call = jackpotFindLogCall(entityId, startTime, first, orderBy, ticketId, jackpotId, targetId, currency, isLast, endTime, n, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over timeSolve).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param ticketId The id of the ticket (optional)
     * @param jackpotId The jackpot id (optional)
     * @param targetId Id of target entity holder of jackpot status (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param isLast true for max(timeSolve) if a given targetId (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over timeSolve), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @return List&lt;JackpotMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JackpotMessage> jackpotFindLog(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, Long ticketId, String jackpotId, Integer targetId, String currency, Boolean isLast, OffsetDateTime endTime, Integer n) throws ApiException {
        ApiResponse<List<JackpotMessage>> resp = jackpotFindLogWithHttpInfo(entityId, startTime, first, orderBy, ticketId, jackpotId, targetId, currency, isLast, endTime, n);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over timeSolve).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param ticketId The id of the ticket (optional)
     * @param jackpotId The jackpot id (optional)
     * @param targetId Id of target entity holder of jackpot status (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param isLast true for max(timeSolve) if a given targetId (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over timeSolve), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @return ApiResponse&lt;List&lt;JackpotMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JackpotMessage>> jackpotFindLogWithHttpInfo(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, Long ticketId, String jackpotId, Integer targetId, String currency, Boolean isLast, OffsetDateTime endTime, Integer n) throws ApiException {
        com.squareup.okhttp.Call call = jackpotFindLogValidateBeforeCall(entityId, startTime, first, orderBy, ticketId, jackpotId, targetId, currency, isLast, endTime, n, null, null);
        Type localVarReturnType = new TypeToken<List<JackpotMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over timeSolve).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param ticketId The id of the ticket (optional)
     * @param jackpotId The jackpot id (optional)
     * @param targetId Id of target entity holder of jackpot status (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param isLast true for max(timeSolve) if a given targetId (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over timeSolve), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jackpotFindLogAsync(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, Long ticketId, String jackpotId, Integer targetId, String currency, Boolean isLast, OffsetDateTime endTime, Integer n, final ApiCallback<List<JackpotMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jackpotFindLogValidateBeforeCall(entityId, startTime, first, orderBy, ticketId, jackpotId, targetId, currency, isLast, endTime, n, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JackpotMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jackpotFindLogById
     * @param entityId Id of winning entity (required)
     * @param ticketId The id of the ticket (required)
     * @param jackpotId The jackpot id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jackpotFindLogByIdCall(Integer entityId, Long ticketId, String jackpotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jackpot/log/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (ticketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketId", ticketId));
        if (jackpotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jackpotId", jackpotId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jackpotFindLogByIdValidateBeforeCall(Integer entityId, Long ticketId, String jackpotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jackpotFindLogById(Async)");
        }
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling jackpotFindLogById(Async)");
        }
        
        // verify the required parameter 'jackpotId' is set
        if (jackpotId == null) {
            throw new ApiException("Missing the required parameter 'jackpotId' when calling jackpotFindLogById(Async)");
        }
        

        com.squareup.okhttp.Call call = jackpotFindLogByIdCall(entityId, ticketId, jackpotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId Id of winning entity (required)
     * @param ticketId The id of the ticket (required)
     * @param jackpotId The jackpot id (required)
     * @return JackpotMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JackpotMessage jackpotFindLogById(Integer entityId, Long ticketId, String jackpotId) throws ApiException {
        ApiResponse<JackpotMessage> resp = jackpotFindLogByIdWithHttpInfo(entityId, ticketId, jackpotId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId Id of winning entity (required)
     * @param ticketId The id of the ticket (required)
     * @param jackpotId The jackpot id (required)
     * @return ApiResponse&lt;JackpotMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JackpotMessage> jackpotFindLogByIdWithHttpInfo(Integer entityId, Long ticketId, String jackpotId) throws ApiException {
        com.squareup.okhttp.Call call = jackpotFindLogByIdValidateBeforeCall(entityId, ticketId, jackpotId, null, null);
        Type localVarReturnType = new TypeToken<JackpotMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId Id of winning entity (required)
     * @param ticketId The id of the ticket (required)
     * @param jackpotId The jackpot id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jackpotFindLogByIdAsync(Integer entityId, Long ticketId, String jackpotId, final ApiCallback<JackpotMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jackpotFindLogByIdValidateBeforeCall(entityId, ticketId, jackpotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JackpotMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jackpotFindStatus
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over lastChange).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param jackpotId The id of the jackpot (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over lastChange), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jackpotFindStatusCall(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, String jackpotId, String currency, OffsetDateTime endTime, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jackpot/status/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (jackpotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jackpotId", jackpotId));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (first != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first", first));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jackpotFindStatusValidateBeforeCall(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, String jackpotId, String currency, OffsetDateTime endTime, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jackpotFindStatus(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling jackpotFindStatus(Async)");
        }
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling jackpotFindStatus(Async)");
        }
        
        // verify the required parameter 'orderBy' is set
        if (orderBy == null) {
            throw new ApiException("Missing the required parameter 'orderBy' when calling jackpotFindStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = jackpotFindStatusCall(entityId, startTime, first, orderBy, jackpotId, currency, endTime, n, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over lastChange).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param jackpotId The id of the jackpot (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over lastChange), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @return List&lt;JackpotStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JackpotStatus> jackpotFindStatus(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, String jackpotId, String currency, OffsetDateTime endTime, Integer n) throws ApiException {
        ApiResponse<List<JackpotStatus>> resp = jackpotFindStatusWithHttpInfo(entityId, startTime, first, orderBy, jackpotId, currency, endTime, n);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over lastChange).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param jackpotId The id of the jackpot (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over lastChange), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @return ApiResponse&lt;List&lt;JackpotStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JackpotStatus>> jackpotFindStatusWithHttpInfo(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, String jackpotId, String currency, OffsetDateTime endTime, Integer n) throws ApiException {
        com.squareup.okhttp.Call call = jackpotFindStatusValidateBeforeCall(entityId, startTime, first, orderBy, jackpotId, currency, endTime, n, null, null);
        Type localVarReturnType = new TypeToken<List<JackpotStatus>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId Id of winning entity (required)
     * @param startTime Interval start timestamp in seconds from which the search will be performed (over lastChange).  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param jackpotId The id of the jackpot (optional)
     * @param currency ISO Currency code of balance awarded (optional)
     * @param endTime Interval end timestamp in seconds to which the search will be performed (over lastChange), upper endpoint of the date interval  (optional)
     * @param n Number of elements to return from query.If 0, get all elements.  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jackpotFindStatusAsync(Integer entityId, OffsetDateTime startTime, Integer first, String orderBy, String jackpotId, String currency, OffsetDateTime endTime, Integer n, final ApiCallback<List<JackpotStatus>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jackpotFindStatusValidateBeforeCall(entityId, startTime, first, orderBy, jackpotId, currency, endTime, n, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JackpotStatus>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jackpotFindStatusById
     * @param entityId The entity id. (required)
     * @param jackpotId The jackpot id. (required)
     * @param currency ISO Currency Code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jackpotFindStatusByIdCall(Integer entityId, String jackpotId, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jackpot/status/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (jackpotId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jackpotId", jackpotId));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jackpotFindStatusByIdValidateBeforeCall(Integer entityId, String jackpotId, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling jackpotFindStatusById(Async)");
        }
        
        // verify the required parameter 'jackpotId' is set
        if (jackpotId == null) {
            throw new ApiException("Missing the required parameter 'jackpotId' when calling jackpotFindStatusById(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling jackpotFindStatusById(Async)");
        }
        

        com.squareup.okhttp.Call call = jackpotFindStatusByIdCall(entityId, jackpotId, currency, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the jackpot message associated to a certain jackpot identifier. 
     * @param entityId The entity id. (required)
     * @param jackpotId The jackpot id. (required)
     * @param currency ISO Currency Code (required)
     * @return JackpotStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JackpotStatus jackpotFindStatusById(Integer entityId, String jackpotId, String currency) throws ApiException {
        ApiResponse<JackpotStatus> resp = jackpotFindStatusByIdWithHttpInfo(entityId, jackpotId, currency);
        return resp.getData();
    }

    /**
     * 
     * Get the jackpot message associated to a certain jackpot identifier. 
     * @param entityId The entity id. (required)
     * @param jackpotId The jackpot id. (required)
     * @param currency ISO Currency Code (required)
     * @return ApiResponse&lt;JackpotStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JackpotStatus> jackpotFindStatusByIdWithHttpInfo(Integer entityId, String jackpotId, String currency) throws ApiException {
        com.squareup.okhttp.Call call = jackpotFindStatusByIdValidateBeforeCall(entityId, jackpotId, currency, null, null);
        Type localVarReturnType = new TypeToken<JackpotStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the jackpot message associated to a certain jackpot identifier. 
     * @param entityId The entity id. (required)
     * @param jackpotId The jackpot id. (required)
     * @param currency ISO Currency Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jackpotFindStatusByIdAsync(Integer entityId, String jackpotId, String currency, final ApiCallback<JackpotStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jackpotFindStatusByIdValidateBeforeCall(entityId, jackpotId, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JackpotStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
