/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.CashOutSettings;
import com.panda.sport.rcs.virtual.third.client.model.GameFixedOddSettings;
import com.panda.sport.rcs.virtual.third.client.model.OddSettings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Game Odd Settings with cashout and fixed odds settings. 
 */
@ApiModel(description = "Game Odd Settings with cashout and fixed odds settings. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class GameCashOutFixedOddSettings extends GameFixedOddSettings {
  @SerializedName("defaultCashOutCommission")
  private Double defaultCashOutCommission = null;

  @SerializedName("cashOutOddSettings")
  private List<CashOutSettings> cashOutOddSettings = null;

  public GameCashOutFixedOddSettings defaultCashOutCommission(Double defaultCashOutCommission) {
    this.defaultCashOutCommission = defaultCashOutCommission;
    return this;
  }

   /**
   * Commission percentage for cashout options offered to the player from 0% to 15%. If 0 is selected, the final RTP for the action would be the original RTP offered in the initial stake. This cash out commission, would suppose an additional factor to original market RTP in case the player choose for cashout options. 
   * minimum: 0
   * maximum: 15
   * @return defaultCashOutCommission
  **/
  @ApiModelProperty(value = "Commission percentage for cashout options offered to the player from 0% to 15%. If 0 is selected, the final RTP for the action would be the original RTP offered in the initial stake. This cash out commission, would suppose an additional factor to original market RTP in case the player choose for cashout options. ")
  public Double getDefaultCashOutCommission() {
    return defaultCashOutCommission;
  }

  public void setDefaultCashOutCommission(Double defaultCashOutCommission) {
    this.defaultCashOutCommission = defaultCashOutCommission;
  }

  public GameCashOutFixedOddSettings cashOutOddSettings(List<CashOutSettings> cashOutOddSettings) {
    this.cashOutOddSettings = cashOutOddSettings;
    return this;
  }

  public GameCashOutFixedOddSettings addCashOutOddSettingsItem(CashOutSettings cashOutOddSettingsItem) {
    if (this.cashOutOddSettings == null) {
      this.cashOutOddSettings = new ArrayList<CashOutSettings>();
    }
    this.cashOutOddSettings.add(cashOutOddSettingsItem);
    return this;
  }

   /**
   * Custom definition of cashout commission per market for current game. 
   * @return cashOutOddSettings
  **/
  @ApiModelProperty(value = "Custom definition of cashout commission per market for current game. ")
  public List<CashOutSettings> getCashOutOddSettings() {
    return cashOutOddSettings;
  }

  public void setCashOutOddSettings(List<CashOutSettings> cashOutOddSettings) {
    this.cashOutOddSettings = cashOutOddSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameCashOutFixedOddSettings gameCashOutFixedOddSettings = (GameCashOutFixedOddSettings) o;
    return Objects.equals(this.defaultCashOutCommission, gameCashOutFixedOddSettings.defaultCashOutCommission) &&
        Objects.equals(this.cashOutOddSettings, gameCashOutFixedOddSettings.cashOutOddSettings) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultCashOutCommission, cashOutOddSettings, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameCashOutFixedOddSettings {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    defaultCashOutCommission: ").append(toIndentedString(defaultCashOutCommission)).append("\n");
    sb.append("    cashOutOddSettings: ").append(toIndentedString(cashOutOddSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

