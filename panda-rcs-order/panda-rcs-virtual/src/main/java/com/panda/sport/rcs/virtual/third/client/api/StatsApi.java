/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import org.threeten.bp.OffsetDateTime;
import com.panda.sport.rcs.virtual.third.client.model.Stat;
import com.panda.sport.rcs.virtual.third.client.model.StatDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApi {
    private ApiClient apiClient;

    public StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for statsEarning
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statsEarningCall(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, String entityLevel, Boolean groupByDate, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/getEarning";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (timeLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeLevel", timeLevel));
        if (entityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityLevel", entityLevel));
        if (groupByDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupByDate", groupByDate));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tags", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statsEarningValidateBeforeCall(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, String entityLevel, Boolean groupByDate, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling statsEarning(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling statsEarning(Async)");
        }
        
        // verify the required parameter 'timeLevel' is set
        if (timeLevel == null) {
            throw new ApiException("Missing the required parameter 'timeLevel' when calling statsEarning(Async)");
        }
        

        com.squareup.okhttp.Call call = statsEarningCall(entityId, startTime, timeLevel, endTime, entityLevel, groupByDate, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method returns accumulated totals for earnings between two time points. 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param tags Selected tags as a boolean equation  (optional)
     * @return List&lt;Stat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Stat> statsEarning(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, String entityLevel, Boolean groupByDate, String tags) throws ApiException {
        ApiResponse<List<Stat>> resp = statsEarningWithHttpInfo(entityId, startTime, timeLevel, endTime, entityLevel, groupByDate, tags);
        return resp.getData();
    }

    /**
     * 
     * This method returns accumulated totals for earnings between two time points. 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param tags Selected tags as a boolean equation  (optional)
     * @return ApiResponse&lt;List&lt;Stat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Stat>> statsEarningWithHttpInfo(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, String entityLevel, Boolean groupByDate, String tags) throws ApiException {
        com.squareup.okhttp.Call call = statsEarningValidateBeforeCall(entityId, startTime, timeLevel, endTime, entityLevel, groupByDate, tags, null, null);
        Type localVarReturnType = new TypeToken<List<Stat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns accumulated totals for earnings between two time points. 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statsEarningAsync(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, String entityLevel, Boolean groupByDate, String tags, final ApiCallback<List<Stat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statsEarningValidateBeforeCall(entityId, startTime, timeLevel, endTime, entityLevel, groupByDate, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Stat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statsEarningDetails
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param marketLevel Grouping order market level. (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param gameFilter Array of game code to filter the selection. (optional)
     * @param playlistFilter Array of playlist ids to filter the selection. (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statsEarningDetailsCall(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, List<String> marketLevel, String entityLevel, Boolean groupByDate, List<String> gameFilter, List<String> playlistFilter, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/getEarningDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (timeLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeLevel", timeLevel));
        if (marketLevel != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "marketLevel", marketLevel));
        if (entityLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityLevel", entityLevel));
        if (groupByDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupByDate", groupByDate));
        if (gameFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "gameFilter", gameFilter));
        if (playlistFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "playlistFilter", playlistFilter));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tags", tags));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statsEarningDetailsValidateBeforeCall(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, List<String> marketLevel, String entityLevel, Boolean groupByDate, List<String> gameFilter, List<String> playlistFilter, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling statsEarningDetails(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling statsEarningDetails(Async)");
        }
        
        // verify the required parameter 'timeLevel' is set
        if (timeLevel == null) {
            throw new ApiException("Missing the required parameter 'timeLevel' when calling statsEarningDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = statsEarningDetailsCall(entityId, startTime, timeLevel, endTime, marketLevel, entityLevel, groupByDate, gameFilter, playlistFilter, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method returns accumulated totals for earnings between two time points. 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param marketLevel Grouping order market level. (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param gameFilter Array of game code to filter the selection. (optional)
     * @param playlistFilter Array of playlist ids to filter the selection. (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @return List&lt;StatDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StatDetail> statsEarningDetails(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, List<String> marketLevel, String entityLevel, Boolean groupByDate, List<String> gameFilter, List<String> playlistFilter, String tags) throws ApiException {
        ApiResponse<List<StatDetail>> resp = statsEarningDetailsWithHttpInfo(entityId, startTime, timeLevel, endTime, marketLevel, entityLevel, groupByDate, gameFilter, playlistFilter, tags);
        return resp.getData();
    }

    /**
     * 
     * This method returns accumulated totals for earnings between two time points. 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param marketLevel Grouping order market level. (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param gameFilter Array of game code to filter the selection. (optional)
     * @param playlistFilter Array of playlist ids to filter the selection. (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @return ApiResponse&lt;List&lt;StatDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StatDetail>> statsEarningDetailsWithHttpInfo(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, List<String> marketLevel, String entityLevel, Boolean groupByDate, List<String> gameFilter, List<String> playlistFilter, String tags) throws ApiException {
        com.squareup.okhttp.Call call = statsEarningDetailsValidateBeforeCall(entityId, startTime, timeLevel, endTime, marketLevel, entityLevel, groupByDate, gameFilter, playlistFilter, tags, null, null);
        Type localVarReturnType = new TypeToken<List<StatDetail>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method returns accumulated totals for earnings between two time points. 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed. Miliseconds.  (required)
     * @param timeLevel Different kind of unit of time between HOURS, DAYS OR MONTHS. (required)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime. Miliseconds.  (optional)
     * @param marketLevel Grouping order market level. (optional)
     * @param entityLevel Grouping order entity level. (optional)
     * @param groupByDate Check this property if we want to group the information by date property. (optional, default to false)
     * @param gameFilter Array of game code to filter the selection. (optional)
     * @param playlistFilter Array of playlist ids to filter the selection. (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statsEarningDetailsAsync(Integer entityId, OffsetDateTime startTime, String timeLevel, OffsetDateTime endTime, List<String> marketLevel, String entityLevel, Boolean groupByDate, List<String> gameFilter, List<String> playlistFilter, String tags, final ApiCallback<List<StatDetail>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statsEarningDetailsValidateBeforeCall(entityId, startTime, timeLevel, endTime, marketLevel, entityLevel, groupByDate, gameFilter, playlistFilter, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StatDetail>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
