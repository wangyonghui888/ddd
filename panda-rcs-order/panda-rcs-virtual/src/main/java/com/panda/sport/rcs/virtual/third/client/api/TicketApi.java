/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import org.threeten.bp.OffsetDateTime;
import com.panda.sport.rcs.virtual.third.client.model.SellTicketExternal;
import com.panda.sport.rcs.virtual.third.client.model.ServerTicket;
import com.panda.sport.rcs.virtual.third.client.model.TicketTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TicketApi {
    private ApiClient apiClient;

    public TicketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TicketApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ticketCancel
     * @param ticketIds Array ids ticket  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketCancelCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ticketIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ticketIds", ticketIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketCancelValidateBeforeCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketIds' is set
        if (ticketIds == null) {
            throw new ApiException("Missing the required parameter 'ticketIds' when calling ticketCancel(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketCancelCall(ticketIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return List&lt;ServerTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ServerTicket> ticketCancel(List<Long> ticketIds) throws ApiException {
        ApiResponse<List<ServerTicket>> resp = ticketCancelWithHttpInfo(ticketIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return ApiResponse&lt;List&lt;ServerTicket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ServerTicket>> ticketCancelWithHttpInfo(List<Long> ticketIds) throws ApiException {
        com.squareup.okhttp.Call call = ticketCancelValidateBeforeCall(ticketIds, null, null);
        Type localVarReturnType = new TypeToken<List<ServerTicket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticketIds Array ids ticket  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketCancelAsync(List<Long> ticketIds, final ApiCallback<List<ServerTicket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketCancelValidateBeforeCall(ticketIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServerTicket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ticketChangePrintStatus
     * @param ticketId Ticket id to find (required)
     * @param ticketPrintedStatus Ticket Printed Status - PRINTED: ticket printed. - NOT_PRINTED: ticket not printed.   Response the printer ticket datetime or null if status is NOT PRINTER.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketChangePrintStatusCall(Long ticketId, String ticketPrintedStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/changePrintStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ticketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketId", ticketId));
        if (ticketPrintedStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketPrintedStatus", ticketPrintedStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketChangePrintStatusValidateBeforeCall(Long ticketId, String ticketPrintedStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketId' is set
        if (ticketId == null) {
            throw new ApiException("Missing the required parameter 'ticketId' when calling ticketChangePrintStatus(Async)");
        }
        
        // verify the required parameter 'ticketPrintedStatus' is set
        if (ticketPrintedStatus == null) {
            throw new ApiException("Missing the required parameter 'ticketPrintedStatus' when calling ticketChangePrintStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketChangePrintStatusCall(ticketId, ticketPrintedStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Method to change the status of impression of a ticket. 
     * @param ticketId Ticket id to find (required)
     * @param ticketPrintedStatus Ticket Printed Status - PRINTED: ticket printed. - NOT_PRINTED: ticket not printed.   Response the printer ticket datetime or null if status is NOT PRINTER.  (required)
     * @return ServerTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerTicket ticketChangePrintStatus(Long ticketId, String ticketPrintedStatus) throws ApiException {
        ApiResponse<ServerTicket> resp = ticketChangePrintStatusWithHttpInfo(ticketId, ticketPrintedStatus);
        return resp.getData();
    }

    /**
     * 
     * Method to change the status of impression of a ticket. 
     * @param ticketId Ticket id to find (required)
     * @param ticketPrintedStatus Ticket Printed Status - PRINTED: ticket printed. - NOT_PRINTED: ticket not printed.   Response the printer ticket datetime or null if status is NOT PRINTER.  (required)
     * @return ApiResponse&lt;ServerTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerTicket> ticketChangePrintStatusWithHttpInfo(Long ticketId, String ticketPrintedStatus) throws ApiException {
        com.squareup.okhttp.Call call = ticketChangePrintStatusValidateBeforeCall(ticketId, ticketPrintedStatus, null, null);
        Type localVarReturnType = new TypeToken<ServerTicket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method to change the status of impression of a ticket. 
     * @param ticketId Ticket id to find (required)
     * @param ticketPrintedStatus Ticket Printed Status - PRINTED: ticket printed. - NOT_PRINTED: ticket not printed.   Response the printer ticket datetime or null if status is NOT PRINTER.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketChangePrintStatusAsync(Long ticketId, String ticketPrintedStatus, final ApiCallback<ServerTicket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketChangePrintStatusValidateBeforeCall(ticketId, ticketPrintedStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerTicket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ticketCreate
     * @param ticket Ticket to save in server  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketCreateCall(SellTicketExternal ticket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ticket;

        // create path and map variables
        String localVarPath = "/ticket/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketCreateValidateBeforeCall(SellTicketExternal ticket, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticket' is set
        if (ticket == null) {
            throw new ApiException("Missing the required parameter 'ticket' when calling ticketCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketCreateCall(ticket, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticket Ticket to save in server  (required)
     * @return TicketTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TicketTransaction ticketCreate(SellTicketExternal ticket) throws ApiException {
        ApiResponse<TicketTransaction> resp = ticketCreateWithHttpInfo(ticket);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticket Ticket to save in server  (required)
     * @return ApiResponse&lt;TicketTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TicketTransaction> ticketCreateWithHttpInfo(SellTicketExternal ticket) throws ApiException {
        com.squareup.okhttp.Call call = ticketCreateValidateBeforeCall(ticket, null, null);
        Type localVarReturnType = new TypeToken<TicketTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticket Ticket to save in server  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketCreateAsync(SellTicketExternal ticket, final ApiCallback<TicketTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketCreateValidateBeforeCall(ticket, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TicketTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ticketFind
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param n Number of elements to return from query. If 0, get all elements.  (required)
     * @param levelDetails Indicates the level of details of the tickets found. The method allows values from 0 to 3. If levelDetails value is outside of this range, a 0 is used as default value. A levelDetail of 0 provides basic information about the tickets found (no information about events or tips). A levelDetail of 1 extends basic information provided by levelDetail 0, including events and tips information. A levelDetail of 2 extends basic information provided by levelDetail 0 (no information about events or tips). A levelDetail of 3 extends the information provided by levelDetail 1.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param status  (optional)
     * @param printed Status of impression of a ticket. Is printed or not.  (optional)
     * @param isJackpotWin Define if the ticket win a jackpot.  (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketFindCall(Integer entityId, OffsetDateTime startTime, Integer first, Integer n, Integer levelDetails, String orderBy, String extTicketId, OffsetDateTime endTime, List<String> status, Boolean printed, Boolean isJackpotWin, String tags, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (extTicketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTicketId", extTicketId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (first != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first", first));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (levelDetails != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("levelDetails", levelDetails));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (printed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("printed", printed));
        if (isJackpotWin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isJackpotWin", isJackpotWin));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tags", tags));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketFindValidateBeforeCall(Integer entityId, OffsetDateTime startTime, Integer first, Integer n, Integer levelDetails, String orderBy, String extTicketId, OffsetDateTime endTime, List<String> status, Boolean printed, Boolean isJackpotWin, String tags, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling ticketFind(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling ticketFind(Async)");
        }
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling ticketFind(Async)");
        }
        
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling ticketFind(Async)");
        }
        
        // verify the required parameter 'levelDetails' is set
        if (levelDetails == null) {
            throw new ApiException("Missing the required parameter 'levelDetails' when calling ticketFind(Async)");
        }
        
        // verify the required parameter 'orderBy' is set
        if (orderBy == null) {
            throw new ApiException("Missing the required parameter 'orderBy' when calling ticketFind(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketFindCall(entityId, startTime, first, n, levelDetails, orderBy, extTicketId, endTime, status, printed, isJackpotWin, tags, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param n Number of elements to return from query. If 0, get all elements.  (required)
     * @param levelDetails Indicates the level of details of the tickets found. The method allows values from 0 to 3. If levelDetails value is outside of this range, a 0 is used as default value. A levelDetail of 0 provides basic information about the tickets found (no information about events or tips). A levelDetail of 1 extends basic information provided by levelDetail 0, including events and tips information. A levelDetail of 2 extends basic information provided by levelDetail 0 (no information about events or tips). A levelDetail of 3 extends the information provided by levelDetail 1.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param status  (optional)
     * @param printed Status of impression of a ticket. Is printed or not.  (optional)
     * @param isJackpotWin Define if the ticket win a jackpot.  (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return List&lt;ServerTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ServerTicket> ticketFind(Integer entityId, OffsetDateTime startTime, Integer first, Integer n, Integer levelDetails, String orderBy, String extTicketId, OffsetDateTime endTime, List<String> status, Boolean printed, Boolean isJackpotWin, String tags, Boolean withChildren) throws ApiException {
        ApiResponse<List<ServerTicket>> resp = ticketFindWithHttpInfo(entityId, startTime, first, n, levelDetails, orderBy, extTicketId, endTime, status, printed, isJackpotWin, tags, withChildren);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param n Number of elements to return from query. If 0, get all elements.  (required)
     * @param levelDetails Indicates the level of details of the tickets found. The method allows values from 0 to 3. If levelDetails value is outside of this range, a 0 is used as default value. A levelDetail of 0 provides basic information about the tickets found (no information about events or tips). A levelDetail of 1 extends basic information provided by levelDetail 0, including events and tips information. A levelDetail of 2 extends basic information provided by levelDetail 0 (no information about events or tips). A levelDetail of 3 extends the information provided by levelDetail 1.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param status  (optional)
     * @param printed Status of impression of a ticket. Is printed or not.  (optional)
     * @param isJackpotWin Define if the ticket win a jackpot.  (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return ApiResponse&lt;List&lt;ServerTicket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ServerTicket>> ticketFindWithHttpInfo(Integer entityId, OffsetDateTime startTime, Integer first, Integer n, Integer levelDetails, String orderBy, String extTicketId, OffsetDateTime endTime, List<String> status, Boolean printed, Boolean isJackpotWin, String tags, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = ticketFindValidateBeforeCall(entityId, startTime, first, n, levelDetails, orderBy, extTicketId, endTime, status, printed, isJackpotWin, tags, withChildren, null, null);
        Type localVarReturnType = new TypeToken<List<ServerTicket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element.  (required)
     * @param n Number of elements to return from query. If 0, get all elements.  (required)
     * @param levelDetails Indicates the level of details of the tickets found. The method allows values from 0 to 3. If levelDetails value is outside of this range, a 0 is used as default value. A levelDetail of 0 provides basic information about the tickets found (no information about events or tips). A levelDetail of 1 extends basic information provided by levelDetail 0, including events and tips information. A levelDetail of 2 extends basic information provided by levelDetail 0 (no information about events or tips). A levelDetail of 3 extends the information provided by levelDetail 1.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param status  (optional)
     * @param printed Status of impression of a ticket. Is printed or not.  (optional)
     * @param isJackpotWin Define if the ticket win a jackpot.  (optional)
     * @param tags Selected tags as a boolean equation  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketFindAsync(Integer entityId, OffsetDateTime startTime, Integer first, Integer n, Integer levelDetails, String orderBy, String extTicketId, OffsetDateTime endTime, List<String> status, Boolean printed, Boolean isJackpotWin, String tags, Boolean withChildren, final ApiCallback<List<ServerTicket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketFindValidateBeforeCall(entityId, startTime, first, n, levelDetails, orderBy, extTicketId, endTime, status, printed, isJackpotWin, tags, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServerTicket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ticketFindById
     * @param entityId The id of the entity.  (required)
     * @param ticketId Ticket id to find (optional)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param advancedInfo Advanced ticket info. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketFindByIdCall(Integer entityId, Long ticketId, String extTicketId, Boolean advancedInfo, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (ticketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketId", ticketId));
        if (extTicketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTicketId", extTicketId));
        if (advancedInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("advancedInfo", advancedInfo));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketFindByIdValidateBeforeCall(Integer entityId, Long ticketId, String extTicketId, Boolean advancedInfo, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling ticketFindById(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketFindByIdCall(entityId, ticketId, extTicketId, advancedInfo, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Find a ticket by unique ticket Id, under a root entity. 
     * @param entityId The id of the entity.  (required)
     * @param ticketId Ticket id to find (optional)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param advancedInfo Advanced ticket info. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return ServerTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerTicket ticketFindById(Integer entityId, Long ticketId, String extTicketId, Boolean advancedInfo, Boolean withChildren) throws ApiException {
        ApiResponse<ServerTicket> resp = ticketFindByIdWithHttpInfo(entityId, ticketId, extTicketId, advancedInfo, withChildren);
        return resp.getData();
    }

    /**
     * 
     * Find a ticket by unique ticket Id, under a root entity. 
     * @param entityId The id of the entity.  (required)
     * @param ticketId Ticket id to find (optional)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param advancedInfo Advanced ticket info. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return ApiResponse&lt;ServerTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerTicket> ticketFindByIdWithHttpInfo(Integer entityId, Long ticketId, String extTicketId, Boolean advancedInfo, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = ticketFindByIdValidateBeforeCall(entityId, ticketId, extTicketId, advancedInfo, withChildren, null, null);
        Type localVarReturnType = new TypeToken<ServerTicket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find a ticket by unique ticket Id, under a root entity. 
     * @param entityId The id of the entity.  (required)
     * @param ticketId Ticket id to find (optional)
     * @param extTicketId External Ticket id (your own id) to find (optional)
     * @param advancedInfo Advanced ticket info. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketFindByIdAsync(Integer entityId, Long ticketId, String extTicketId, Boolean advancedInfo, Boolean withChildren, final ApiCallback<ServerTicket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketFindByIdValidateBeforeCall(entityId, ticketId, extTicketId, advancedInfo, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerTicket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ticketPayout
     * @param ticketIds Array ids ticket  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketPayoutCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/payout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ticketIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ticketIds", ticketIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketPayoutValidateBeforeCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketIds' is set
        if (ticketIds == null) {
            throw new ApiException("Missing the required parameter 'ticketIds' when calling ticketPayout(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketPayoutCall(ticketIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return List&lt;ServerTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ServerTicket> ticketPayout(List<Long> ticketIds) throws ApiException {
        ApiResponse<List<ServerTicket>> resp = ticketPayoutWithHttpInfo(ticketIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return ApiResponse&lt;List&lt;ServerTicket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ServerTicket>> ticketPayoutWithHttpInfo(List<Long> ticketIds) throws ApiException {
        com.squareup.okhttp.Call call = ticketPayoutValidateBeforeCall(ticketIds, null, null);
        Type localVarReturnType = new TypeToken<List<ServerTicket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticketIds Array ids ticket  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketPayoutAsync(List<Long> ticketIds, final ApiCallback<List<ServerTicket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketPayoutValidateBeforeCall(ticketIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServerTicket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ticketRequestSolve
     * @param extId Entity external id to request solve (required)
     * @param ticketId Ticket id to request solve (optional)
     * @param ticketExtId Ticket external id to request solve (optional)
     * @param entityParentId The parent entity id.  (optional)
     * @param staffParentId The staff parent entity id.  (optional)
     * @param staffExtId The staff external id.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ticketRequestSolveCall(Long extId, Long ticketId, Long ticketExtId, Integer entityParentId, Integer staffParentId, String staffExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ticket/requestSolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ticketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketId", ticketId));
        if (ticketExtId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketExtId", ticketExtId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (entityParentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityParentId", entityParentId));
        if (staffParentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("staffParentId", staffParentId));
        if (staffExtId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("staffExtId", staffExtId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ticketRequestSolveValidateBeforeCall(Long extId, Long ticketId, Long ticketExtId, Integer entityParentId, Integer staffParentId, String staffExtId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'extId' is set
        if (extId == null) {
            throw new ApiException("Missing the required parameter 'extId' when calling ticketRequestSolve(Async)");
        }
        

        com.squareup.okhttp.Call call = ticketRequestSolveCall(extId, ticketId, ticketExtId, entityParentId, staffParentId, staffExtId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Method to request the resolution of  the ticket by id. 
     * @param extId Entity external id to request solve (required)
     * @param ticketId Ticket id to request solve (optional)
     * @param ticketExtId Ticket external id to request solve (optional)
     * @param entityParentId The parent entity id.  (optional)
     * @param staffParentId The staff parent entity id.  (optional)
     * @param staffExtId The staff external id.  (optional)
     * @return ServerTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServerTicket ticketRequestSolve(Long extId, Long ticketId, Long ticketExtId, Integer entityParentId, Integer staffParentId, String staffExtId) throws ApiException {
        ApiResponse<ServerTicket> resp = ticketRequestSolveWithHttpInfo(extId, ticketId, ticketExtId, entityParentId, staffParentId, staffExtId);
        return resp.getData();
    }

    /**
     * 
     * Method to request the resolution of  the ticket by id. 
     * @param extId Entity external id to request solve (required)
     * @param ticketId Ticket id to request solve (optional)
     * @param ticketExtId Ticket external id to request solve (optional)
     * @param entityParentId The parent entity id.  (optional)
     * @param staffParentId The staff parent entity id.  (optional)
     * @param staffExtId The staff external id.  (optional)
     * @return ApiResponse&lt;ServerTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServerTicket> ticketRequestSolveWithHttpInfo(Long extId, Long ticketId, Long ticketExtId, Integer entityParentId, Integer staffParentId, String staffExtId) throws ApiException {
        com.squareup.okhttp.Call call = ticketRequestSolveValidateBeforeCall(extId, ticketId, ticketExtId, entityParentId, staffParentId, staffExtId, null, null);
        Type localVarReturnType = new TypeToken<ServerTicket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Method to request the resolution of  the ticket by id. 
     * @param extId Entity external id to request solve (required)
     * @param ticketId Ticket id to request solve (optional)
     * @param ticketExtId Ticket external id to request solve (optional)
     * @param entityParentId The parent entity id.  (optional)
     * @param staffParentId The staff parent entity id.  (optional)
     * @param staffExtId The staff external id.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ticketRequestSolveAsync(Long extId, Long ticketId, Long ticketExtId, Integer entityParentId, Integer staffParentId, String staffExtId, final ApiCallback<ServerTicket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ticketRequestSolveValidateBeforeCall(extId, ticketId, ticketExtId, entityParentId, staffParentId, staffExtId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServerTicket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
