/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.EBData;
import com.panda.sport.rcs.virtual.third.client.model.EBLiveStats;
import com.panda.sport.rcs.virtual.third.client.model.EBResult;
import com.panda.sport.rcs.virtual.third.client.model.EBStats;
import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import com.panda.sport.rcs.virtual.third.client.model.EventBlock;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventBlockApi {
    private ApiClient apiClient;

    public EventBlockApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventBlockApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelEvent
     * @param eventId Used for get a result by Event Id.  (required)
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelEventCall(Long eventId, Long eBlockId, Integer playlistId, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/cancelEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eventId", eventId));
        if (eBlockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eBlockId", eBlockId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelEventValidateBeforeCall(Long eventId, Long eBlockId, Integer playlistId, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling cancelEvent(Async)");
        }
        
        // verify the required parameter 'eBlockId' is set
        if (eBlockId == null) {
            throw new ApiException("Missing the required parameter 'eBlockId' when calling cancelEvent(Async)");
        }
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling cancelEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelEventCall(eventId, eBlockId, playlistId, extId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Cancel an event data with one or more events. 
     * @param eventId Used for get a result by Event Id.  (required)
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long cancelEvent(Long eventId, Long eBlockId, Integer playlistId, String extId) throws ApiException {
        ApiResponse<Long> resp = cancelEventWithHttpInfo(eventId, eBlockId, playlistId, extId);
        return resp.getData();
    }

    /**
     * 
     * Cancel an event data with one or more events. 
     * @param eventId Used for get a result by Event Id.  (required)
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> cancelEventWithHttpInfo(Long eventId, Long eBlockId, Integer playlistId, String extId) throws ApiException {
        com.squareup.okhttp.Call call = cancelEventValidateBeforeCall(eventId, eBlockId, playlistId, extId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel an event data with one or more events. 
     * @param eventId Used for get a result by Event Id.  (required)
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelEventAsync(Long eventId, Long eBlockId, Integer playlistId, String extId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelEventValidateBeforeCall(eventId, eBlockId, playlistId, extId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelEventBlock
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelEventBlockCall(Long eBlockId, Integer playlistId, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/cancelEventBlock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eBlockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eBlockId", eBlockId));
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelEventBlockValidateBeforeCall(Long eBlockId, Integer playlistId, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eBlockId' is set
        if (eBlockId == null) {
            throw new ApiException("Missing the required parameter 'eBlockId' when calling cancelEventBlock(Async)");
        }
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling cancelEventBlock(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelEventBlockCall(eBlockId, playlistId, extId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Cancel an eventBlock data with one or more events. 
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long cancelEventBlock(Long eBlockId, Integer playlistId, String extId) throws ApiException {
        ApiResponse<Long> resp = cancelEventBlockWithHttpInfo(eBlockId, playlistId, extId);
        return resp.getData();
    }

    /**
     * 
     * Cancel an eventBlock data with one or more events. 
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> cancelEventBlockWithHttpInfo(Long eBlockId, Integer playlistId, String extId) throws ApiException {
        com.squareup.okhttp.Call call = cancelEventBlockValidateBeforeCall(eBlockId, playlistId, extId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel an eventBlock data with one or more events. 
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelEventBlockAsync(Long eBlockId, Integer playlistId, String extId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelEventBlockValidateBeforeCall(eBlockId, playlistId, extId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for closeMarket
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param closeMarketTime Close market datetime.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeMarketCall(Long eBlockId, Integer playlistId, OffsetDateTime closeMarketTime, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/closeMarket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eBlockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eBlockId", eBlockId));
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (closeMarketTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("closeMarketTime", closeMarketTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeMarketValidateBeforeCall(Long eBlockId, Integer playlistId, OffsetDateTime closeMarketTime, String extId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eBlockId' is set
        if (eBlockId == null) {
            throw new ApiException("Missing the required parameter 'eBlockId' when calling closeMarket(Async)");
        }
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling closeMarket(Async)");
        }
        
        // verify the required parameter 'closeMarketTime' is set
        if (closeMarketTime == null) {
            throw new ApiException("Missing the required parameter 'closeMarketTime' when calling closeMarket(Async)");
        }
        

        com.squareup.okhttp.Call call = closeMarketCall(eBlockId, playlistId, closeMarketTime, extId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Close the market of an eventBlock data with one or more events. 
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param closeMarketTime Close market datetime.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long closeMarket(Long eBlockId, Integer playlistId, OffsetDateTime closeMarketTime, String extId) throws ApiException {
        ApiResponse<Long> resp = closeMarketWithHttpInfo(eBlockId, playlistId, closeMarketTime, extId);
        return resp.getData();
    }

    /**
     * 
     * Close the market of an eventBlock data with one or more events. 
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param closeMarketTime Close market datetime.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> closeMarketWithHttpInfo(Long eBlockId, Integer playlistId, OffsetDateTime closeMarketTime, String extId) throws ApiException {
        com.squareup.okhttp.Call call = closeMarketValidateBeforeCall(eBlockId, playlistId, closeMarketTime, extId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Close the market of an eventBlock data with one or more events. 
     * @param eBlockId Used for get a result by Event Block Id.  (required)
     * @param playlistId Used for define the playlist of eventblock.  (required)
     * @param closeMarketTime Close market datetime.  (required)
     * @param extId Used for define the external Id of event.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeMarketAsync(Long eBlockId, Integer playlistId, OffsetDateTime closeMarketTime, String extId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeMarketValidateBeforeCall(eBlockId, playlistId, closeMarketTime, extId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventBlockById
     * @param playlistId Playlist identifier  (required)
     * @param eblockId Identifier of eventblock.  (optional)
     * @param eventId Identifier of event.  (optional)
     * @param calculationId Id to calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventBlockByIdCall(Integer playlistId, Long eblockId, Long eventId, Integer calculationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/byId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (eblockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eblockId", eblockId));
        if (eventId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eventId", eventId));
        if (calculationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calculationId", calculationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventBlockByIdValidateBeforeCall(Integer playlistId, Long eblockId, Long eventId, Integer calculationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling eventBlockById(Async)");
        }
        

        com.squareup.okhttp.Call call = eventBlockByIdCall(playlistId, eblockId, eventId, calculationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Given an specific event Id This can return all data /stats/result of event id. If the eventId is a part of a multievent Eventblock, the eventblock that we return will containt all the event included in the matchday. One of parameters (eblockId or eventId) are required. 
     * @param playlistId Playlist identifier  (required)
     * @param eblockId Identifier of eventblock.  (optional)
     * @param eventId Identifier of event.  (optional)
     * @param calculationId Id to calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).  (optional)
     * @return EventBlock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventBlock eventBlockById(Integer playlistId, Long eblockId, Long eventId, Integer calculationId) throws ApiException {
        ApiResponse<EventBlock> resp = eventBlockByIdWithHttpInfo(playlistId, eblockId, eventId, calculationId);
        return resp.getData();
    }

    /**
     * 
     * Given an specific event Id This can return all data /stats/result of event id. If the eventId is a part of a multievent Eventblock, the eventblock that we return will containt all the event included in the matchday. One of parameters (eblockId or eventId) are required. 
     * @param playlistId Playlist identifier  (required)
     * @param eblockId Identifier of eventblock.  (optional)
     * @param eventId Identifier of event.  (optional)
     * @param calculationId Id to calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).  (optional)
     * @return ApiResponse&lt;EventBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventBlock> eventBlockByIdWithHttpInfo(Integer playlistId, Long eblockId, Long eventId, Integer calculationId) throws ApiException {
        com.squareup.okhttp.Call call = eventBlockByIdValidateBeforeCall(playlistId, eblockId, eventId, calculationId, null, null);
        Type localVarReturnType = new TypeToken<EventBlock>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Given an specific event Id This can return all data /stats/result of event id. If the eventId is a part of a multievent Eventblock, the eventblock that we return will containt all the event included in the matchday. One of parameters (eblockId or eventId) are required. 
     * @param playlistId Playlist identifier  (required)
     * @param eblockId Identifier of eventblock.  (optional)
     * @param eventId Identifier of event.  (optional)
     * @param calculationId Id to calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventBlockByIdAsync(Integer playlistId, Long eblockId, Long eventId, Integer calculationId, final ApiCallback<EventBlock> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventBlockByIdValidateBeforeCall(playlistId, eblockId, eventId, calculationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventBlock>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventBlockData
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventBlockDataCall(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/data/byTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (contentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentId", contentId));
        if (eventTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eventTime", eventTime));
        if (calculationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calculationId", calculationId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventBlockDataValidateBeforeCall(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling eventBlockData(Async)");
        }
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling eventBlockData(Async)");
        }
        

        com.squareup.okhttp.Call call = eventBlockDataCall(contentType, contentId, eventTime, calculationId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Given an specific display Content ( Channel - Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of current event, in case this is already available. 
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @return List&lt;EventBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventBlock> eventBlockData(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Integer entityId) throws ApiException {
        ApiResponse<List<EventBlock>> resp = eventBlockDataWithHttpInfo(contentType, contentId, eventTime, calculationId, entityId);
        return resp.getData();
    }

    /**
     * 
     * Given an specific display Content ( Channel - Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of current event, in case this is already available. 
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @return ApiResponse&lt;List&lt;EventBlock&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventBlock>> eventBlockDataWithHttpInfo(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = eventBlockDataValidateBeforeCall(contentType, contentId, eventTime, calculationId, entityId, null, null);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Given an specific display Content ( Channel - Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of current event, in case this is already available. 
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventBlockDataAsync(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Integer entityId, final ApiCallback<List<EventBlock>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventBlockDataValidateBeforeCall(contentType, contentId, eventTime, calculationId, entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventBlockFind
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval). For cache eficiency, it should  be rounded down to 30 seconds interval.  (required)
     * @param playlistId The playlist identifiers. (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval). Use n or endTime.  (optional)
     * @param entityId The Entity Unit Id of the On Demand Event  (optional)
     * @param status Status of events to find. If the parameter is not defined or no values match with the allowed values, the method returns the first n records. If one of the values of parameter is erroneous, the method returns the first n records that match with the allowed values.  (optional)
     * @param calculationId Id to calculate de odd values.  If this parameter is set, resource return the odd values.  If parameter is not set, the resource return odd probability and k values  (optional)
     * @param countDown Frequency count down for Playlist. Expressed in seconds starting from 00:00 H.  (optional)
     * @param offset Offset for Playlist. Expressed in seconds starting from 00:00H.   (optional)
     * @param n Total number of elements to return from current position to back.  (optional, default to 20)
     * @param order Order criteria to find events. By default, DESC order.  (optional, default to DESC)
     * @param advancedInfo Advanced eventblock info. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventBlockFindCall(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer entityId, List<String> status, Integer calculationId, Integer countDown, Integer offset, Integer n, String order, Boolean advancedInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (status != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
        if (calculationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calculationId", calculationId));
        if (countDown != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("countDown", countDown));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (advancedInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("advancedInfo", advancedInfo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventBlockFindValidateBeforeCall(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer entityId, List<String> status, Integer calculationId, Integer countDown, Integer offset, Integer n, String order, Boolean advancedInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling eventBlockFind(Async)");
        }
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling eventBlockFind(Async)");
        }
        

        com.squareup.okhttp.Call call = eventBlockFindCall(startTime, playlistId, endTime, entityId, status, calculationId, countDown, offset, n, order, advancedInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Given an specific display Content ( Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of      current event, in case this is already available.  Return empty array ([]) if no event found.    - eventTime   - Event.data.participants   - Event.eventId   - Event.result.wonMarkets   - Event.extData 
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval). For cache eficiency, it should  be rounded down to 30 seconds interval.  (required)
     * @param playlistId The playlist identifiers. (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval). Use n or endTime.  (optional)
     * @param entityId The Entity Unit Id of the On Demand Event  (optional)
     * @param status Status of events to find. If the parameter is not defined or no values match with the allowed values, the method returns the first n records. If one of the values of parameter is erroneous, the method returns the first n records that match with the allowed values.  (optional)
     * @param calculationId Id to calculate de odd values.  If this parameter is set, resource return the odd values.  If parameter is not set, the resource return odd probability and k values  (optional)
     * @param countDown Frequency count down for Playlist. Expressed in seconds starting from 00:00 H.  (optional)
     * @param offset Offset for Playlist. Expressed in seconds starting from 00:00H.   (optional)
     * @param n Total number of elements to return from current position to back.  (optional, default to 20)
     * @param order Order criteria to find events. By default, DESC order.  (optional, default to DESC)
     * @param advancedInfo Advanced eventblock info. (optional, default to true)
     * @return List&lt;EventBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventBlock> eventBlockFind(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer entityId, List<String> status, Integer calculationId, Integer countDown, Integer offset, Integer n, String order, Boolean advancedInfo) throws ApiException {
        ApiResponse<List<EventBlock>> resp = eventBlockFindWithHttpInfo(startTime, playlistId, endTime, entityId, status, calculationId, countDown, offset, n, order, advancedInfo);
        return resp.getData();
    }

    /**
     * 
     * Given an specific display Content ( Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of      current event, in case this is already available.  Return empty array ([]) if no event found.    - eventTime   - Event.data.participants   - Event.eventId   - Event.result.wonMarkets   - Event.extData 
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval). For cache eficiency, it should  be rounded down to 30 seconds interval.  (required)
     * @param playlistId The playlist identifiers. (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval). Use n or endTime.  (optional)
     * @param entityId The Entity Unit Id of the On Demand Event  (optional)
     * @param status Status of events to find. If the parameter is not defined or no values match with the allowed values, the method returns the first n records. If one of the values of parameter is erroneous, the method returns the first n records that match with the allowed values.  (optional)
     * @param calculationId Id to calculate de odd values.  If this parameter is set, resource return the odd values.  If parameter is not set, the resource return odd probability and k values  (optional)
     * @param countDown Frequency count down for Playlist. Expressed in seconds starting from 00:00 H.  (optional)
     * @param offset Offset for Playlist. Expressed in seconds starting from 00:00H.   (optional)
     * @param n Total number of elements to return from current position to back.  (optional, default to 20)
     * @param order Order criteria to find events. By default, DESC order.  (optional, default to DESC)
     * @param advancedInfo Advanced eventblock info. (optional, default to true)
     * @return ApiResponse&lt;List&lt;EventBlock&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventBlock>> eventBlockFindWithHttpInfo(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer entityId, List<String> status, Integer calculationId, Integer countDown, Integer offset, Integer n, String order, Boolean advancedInfo) throws ApiException {
        com.squareup.okhttp.Call call = eventBlockFindValidateBeforeCall(startTime, playlistId, endTime, entityId, status, calculationId, countDown, offset, n, order, advancedInfo, null, null);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Given an specific display Content ( Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of      current event, in case this is already available.  Return empty array ([]) if no event found.    - eventTime   - Event.data.participants   - Event.eventId   - Event.result.wonMarkets   - Event.extData 
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval). For cache eficiency, it should  be rounded down to 30 seconds interval.  (required)
     * @param playlistId The playlist identifiers. (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval). Use n or endTime.  (optional)
     * @param entityId The Entity Unit Id of the On Demand Event  (optional)
     * @param status Status of events to find. If the parameter is not defined or no values match with the allowed values, the method returns the first n records. If one of the values of parameter is erroneous, the method returns the first n records that match with the allowed values.  (optional)
     * @param calculationId Id to calculate de odd values.  If this parameter is set, resource return the odd values.  If parameter is not set, the resource return odd probability and k values  (optional)
     * @param countDown Frequency count down for Playlist. Expressed in seconds starting from 00:00 H.  (optional)
     * @param offset Offset for Playlist. Expressed in seconds starting from 00:00H.   (optional)
     * @param n Total number of elements to return from current position to back.  (optional, default to 20)
     * @param order Order criteria to find events. By default, DESC order.  (optional, default to DESC)
     * @param advancedInfo Advanced eventblock info. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventBlockFindAsync(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer entityId, List<String> status, Integer calculationId, Integer countDown, Integer offset, Integer n, String order, Boolean advancedInfo, final ApiCallback<List<EventBlock>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventBlockFindValidateBeforeCall(startTime, playlistId, endTime, entityId, status, calculationId, countDown, offset, n, order, advancedInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventBlockFindUpdated
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval).  (required)
     * @param playlistId The playlist identifier.  (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval).  (optional)
     * @param n Total number of elements to return from current position to back.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventBlockFindUpdatedCall(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/find/updatedEventBlock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (playlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playlistId", playlistId));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventBlockFindUpdatedValidateBeforeCall(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer n, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling eventBlockFindUpdated(Async)");
        }
        
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling eventBlockFindUpdated(Async)");
        }
        

        com.squareup.okhttp.Call call = eventBlockFindUpdatedCall(startTime, playlistId, endTime, n, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return a list with the eventBlocks that has had modifications Return empty array ([]) if not events found. 
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval).  (required)
     * @param playlistId The playlist identifier.  (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval).  (optional)
     * @param n Total number of elements to return from current position to back.  (optional)
     * @return List&lt;EventBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventBlock> eventBlockFindUpdated(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer n) throws ApiException {
        ApiResponse<List<EventBlock>> resp = eventBlockFindUpdatedWithHttpInfo(startTime, playlistId, endTime, n);
        return resp.getData();
    }

    /**
     * 
     * Return a list with the eventBlocks that has had modifications Return empty array ([]) if not events found. 
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval).  (required)
     * @param playlistId The playlist identifier.  (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval).  (optional)
     * @param n Total number of elements to return from current position to back.  (optional)
     * @return ApiResponse&lt;List&lt;EventBlock&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventBlock>> eventBlockFindUpdatedWithHttpInfo(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer n) throws ApiException {
        com.squareup.okhttp.Call call = eventBlockFindUpdatedValidateBeforeCall(startTime, playlistId, endTime, n, null, null);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list with the eventBlocks that has had modifications Return empty array ([]) if not events found. 
     * @param startTime Interval start datetime from which the search will be performed (lower endpoint of the date interval).  (required)
     * @param playlistId The playlist identifier.  (required)
     * @param endTime Interval end datetime to which the search will be performed (upper endpoint of the date interval).  (optional)
     * @param n Total number of elements to return from current position to back.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventBlockFindUpdatedAsync(OffsetDateTime startTime, Integer playlistId, OffsetDateTime endTime, Integer n, final ApiCallback<List<EventBlock>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventBlockFindUpdatedValidateBeforeCall(startTime, playlistId, endTime, n, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventBlockResult
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param eBlockId Used for get a result by Event Block Id. Only supported for PLAYLIST in ONDEMAND mode  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventBlockResultCall(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Long eBlockId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventBlocks/result/byTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (contentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentId", contentId));
        if (eventTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eventTime", eventTime));
        if (calculationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("calculationId", calculationId));
        if (eBlockId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("eBlockId", eBlockId));
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventBlockResultValidateBeforeCall(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Long eBlockId, Integer entityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling eventBlockResult(Async)");
        }
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling eventBlockResult(Async)");
        }
        

        com.squareup.okhttp.Call call = eventBlockResultCall(contentType, contentId, eventTime, calculationId, eBlockId, entityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Given an specific display Content ( Channel - Playlist) Return event result at given absolute startTime.  
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param eBlockId Used for get a result by Event Block Id. Only supported for PLAYLIST in ONDEMAND mode  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @return List&lt;EventBlock&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventBlock> eventBlockResult(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Long eBlockId, Integer entityId) throws ApiException {
        ApiResponse<List<EventBlock>> resp = eventBlockResultWithHttpInfo(contentType, contentId, eventTime, calculationId, eBlockId, entityId);
        return resp.getData();
    }

    /**
     * 
     * Given an specific display Content ( Channel - Playlist) Return event result at given absolute startTime.  
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param eBlockId Used for get a result by Event Block Id. Only supported for PLAYLIST in ONDEMAND mode  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @return ApiResponse&lt;List&lt;EventBlock&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventBlock>> eventBlockResultWithHttpInfo(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Long eBlockId, Integer entityId) throws ApiException {
        com.squareup.okhttp.Call call = eventBlockResultValidateBeforeCall(contentType, contentId, eventTime, calculationId, eBlockId, entityId, null, null);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Given an specific display Content ( Channel - Playlist) Return event result at given absolute startTime.  
     * @param contentType Content type requested. Current contents:   - CHANNEL   - PLAYLIST  (required)
     * @param contentId Content identification:  If contetype &#x3D; CHANNEL then content id &#x3D; channelId.  If contetype &#x3D; PLAYLIST then content id &#x3D; playlist.  (required)
     * @param eventTime Datetime before first event returned.  (optional)
     * @param calculationId Id tu calculate de odd values. If this parameter is set, resource return the odd values. It parameter is not set, the resource return odd probability and k values  (need calculate oddvalues with this params and overround in Gamesetting for a specific odd/game).   - When we use the content of type PLAYLIST, oddsValues and probailities will be used, therefore this parameter is optional,    - When we use the content of type CHANNEL, only the oddsValues will be used, therefore this parameter is obligatory.  (optional)
     * @param eBlockId Used for get a result by Event Block Id. Only supported for PLAYLIST in ONDEMAND mode  (optional)
     * @param entityId Identifier of entity.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventBlockResultAsync(String contentType, Integer contentId, OffsetDateTime eventTime, Integer calculationId, Long eBlockId, Integer entityId, final ApiCallback<List<EventBlock>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventBlockResultValidateBeforeCall(contentType, contentId, eventTime, calculationId, eBlockId, entityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventBlock>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishEventData
     * @param eventBlockData Object to create an eventBlock data.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishEventDataCall(EBData eventBlockData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventBlockData;

        // create path and map variables
        String localVarPath = "/eventBlocks/publish/eventData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishEventDataValidateBeforeCall(EBData eventBlockData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventBlockData' is set
        if (eventBlockData == null) {
            throw new ApiException("Missing the required parameter 'eventBlockData' when calling publishEventData(Async)");
        }
        

        com.squareup.okhttp.Call call = publishEventDataCall(eventBlockData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation an eventBlock data with one or more events with similar start time 
     * @param eventBlockData Object to create an eventBlock data.  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long publishEventData(EBData eventBlockData) throws ApiException {
        ApiResponse<Long> resp = publishEventDataWithHttpInfo(eventBlockData);
        return resp.getData();
    }

    /**
     * 
     * Creation an eventBlock data with one or more events with similar start time 
     * @param eventBlockData Object to create an eventBlock data.  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> publishEventDataWithHttpInfo(EBData eventBlockData) throws ApiException {
        com.squareup.okhttp.Call call = publishEventDataValidateBeforeCall(eventBlockData, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creation an eventBlock data with one or more events with similar start time 
     * @param eventBlockData Object to create an eventBlock data.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishEventDataAsync(EBData eventBlockData, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishEventDataValidateBeforeCall(eventBlockData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishEventResult
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishEventResultCall(EBResult eventBlockResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventBlockResult;

        // create path and map variables
        String localVarPath = "/eventBlocks/publish/eventResult";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishEventResultValidateBeforeCall(EBResult eventBlockResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventBlockResult' is set
        if (eventBlockResult == null) {
            throw new ApiException("Missing the required parameter 'eventBlockResult' when calling publishEventResult(Async)");
        }
        

        com.squareup.okhttp.Call call = publishEventResultCall(eventBlockResult, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation an eventBlock result with one or more events. 
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long publishEventResult(EBResult eventBlockResult) throws ApiException {
        ApiResponse<Long> resp = publishEventResultWithHttpInfo(eventBlockResult);
        return resp.getData();
    }

    /**
     * 
     * Creation an eventBlock result with one or more events. 
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> publishEventResultWithHttpInfo(EBResult eventBlockResult) throws ApiException {
        com.squareup.okhttp.Call call = publishEventResultValidateBeforeCall(eventBlockResult, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creation an eventBlock result with one or more events. 
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishEventResultAsync(EBResult eventBlockResult, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishEventResultValidateBeforeCall(eventBlockResult, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishLiveStats
     * @param eventBlockLiveStats Object with the live stats of an eventblock  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishLiveStatsCall(EBLiveStats eventBlockLiveStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventBlockLiveStats;

        // create path and map variables
        String localVarPath = "/eventBlocks/publish/liveStats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishLiveStatsValidateBeforeCall(EBLiveStats eventBlockLiveStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = publishLiveStatsCall(eventBlockLiveStats, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation the live stats of the eventBlock data with one or more events. 
     * @param eventBlockLiveStats Object with the live stats of an eventblock  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long publishLiveStats(EBLiveStats eventBlockLiveStats) throws ApiException {
        ApiResponse<Long> resp = publishLiveStatsWithHttpInfo(eventBlockLiveStats);
        return resp.getData();
    }

    /**
     * 
     * Creation the live stats of the eventBlock data with one or more events. 
     * @param eventBlockLiveStats Object with the live stats of an eventblock  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> publishLiveStatsWithHttpInfo(EBLiveStats eventBlockLiveStats) throws ApiException {
        com.squareup.okhttp.Call call = publishLiveStatsValidateBeforeCall(eventBlockLiveStats, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creation the live stats of the eventBlock data with one or more events. 
     * @param eventBlockLiveStats Object with the live stats of an eventblock  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishLiveStatsAsync(EBLiveStats eventBlockLiveStats, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishLiveStatsValidateBeforeCall(eventBlockLiveStats, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishStats
     * @param eventBlockStats Object with the stats of an eventblock  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishStatsCall(EBStats eventBlockStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventBlockStats;

        // create path and map variables
        String localVarPath = "/eventBlocks/publish/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishStatsValidateBeforeCall(EBStats eventBlockStats, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = publishStatsCall(eventBlockStats, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation the stats of an eventBlock data with one or more events. 
     * @param eventBlockStats Object with the stats of an eventblock  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long publishStats(EBStats eventBlockStats) throws ApiException {
        ApiResponse<Long> resp = publishStatsWithHttpInfo(eventBlockStats);
        return resp.getData();
    }

    /**
     * 
     * Creation the stats of an eventBlock data with one or more events. 
     * @param eventBlockStats Object with the stats of an eventblock  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> publishStatsWithHttpInfo(EBStats eventBlockStats) throws ApiException {
        com.squareup.okhttp.Call call = publishStatsValidateBeforeCall(eventBlockStats, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creation the stats of an eventBlock data with one or more events. 
     * @param eventBlockStats Object with the stats of an eventblock  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishStatsAsync(EBStats eventBlockStats, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishStatsValidateBeforeCall(eventBlockStats, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEventResult
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventResultCall(EBResult eventBlockResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventBlockResult;

        // create path and map variables
        String localVarPath = "/eventBlocks/update/eventResult";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventResultValidateBeforeCall(EBResult eventBlockResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventBlockResult' is set
        if (eventBlockResult == null) {
            throw new ApiException("Missing the required parameter 'eventBlockResult' when calling updateEventResult(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEventResultCall(eventBlockResult, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update an eventBlock result with one or more events.  This update must contains only modification in properties that do no modify the ticket resolution. Is an update of additional information. NEVER will modify the main data to solve the event. 
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long updateEventResult(EBResult eventBlockResult) throws ApiException {
        ApiResponse<Long> resp = updateEventResultWithHttpInfo(eventBlockResult);
        return resp.getData();
    }

    /**
     * 
     * Update an eventBlock result with one or more events.  This update must contains only modification in properties that do no modify the ticket resolution. Is an update of additional information. NEVER will modify the main data to solve the event. 
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> updateEventResultWithHttpInfo(EBResult eventBlockResult) throws ApiException {
        com.squareup.okhttp.Call call = updateEventResultValidateBeforeCall(eventBlockResult, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an eventBlock result with one or more events.  This update must contains only modification in properties that do no modify the ticket resolution. Is an update of additional information. NEVER will modify the main data to solve the event. 
     * @param eventBlockResult Object to create an eventBlock result.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventResultAsync(EBResult eventBlockResult, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventResultValidateBeforeCall(eventBlockResult, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
