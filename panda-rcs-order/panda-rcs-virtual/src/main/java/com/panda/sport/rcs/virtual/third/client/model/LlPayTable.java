/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Information about the pay table of Live Lotto. 
 */
@ApiModel(description = "Information about the pay table of Live Lotto. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class LlPayTable {
  @SerializedName("_1_out_of_1")
  private Double _1OutOf1 = null;

  @SerializedName("_2_out_of_2")
  private Double _2OutOf2 = null;

  @SerializedName("_3_out_of_3")
  private Double _3OutOf3 = null;

  @SerializedName("_4_out_of_4")
  private Double _4OutOf4 = null;

  @SerializedName("_1_out_of_2")
  private Double _1OutOf2 = null;

  @SerializedName("_1_out_of_3")
  private Double _1OutOf3 = null;

  @SerializedName("_1_out_of_4")
  private Double _1OutOf4 = null;

  @SerializedName("first_over_15")
  private Double firstOver15 = null;

  @SerializedName("first_under_15")
  private Double firstUnder15 = null;

  @SerializedName("first_over_25")
  private Double firstOver25 = null;

  @SerializedName("first_under_25")
  private Double firstUnder25 = null;

  @SerializedName("first_over_35")
  private Double firstOver35 = null;

  @SerializedName("first_under_35")
  private Double firstUnder35 = null;

  @SerializedName("first_over_25_second_under_25")
  private Double firstOver25SecondUnder25 = null;

  @SerializedName("first_under_25_second_over_25")
  private Double firstUnder25SecondOver25 = null;

  @SerializedName("first_over_25_second_over_25")
  private Double firstOver25SecondOver25 = null;

  @SerializedName("first_under_25_second_under_25")
  private Double firstUnder25SecondUnder25 = null;

  @SerializedName("sum_is_odd")
  private Double sumIsOdd = null;

  @SerializedName("sum_is_even")
  private Double sumIsEven = null;

  @SerializedName("sum_over_120")
  private Double sumOver120 = null;

  @SerializedName("sum_under_120")
  private Double sumUnder120 = null;

  @SerializedName("sum_over_135")
  private Double sumOver135 = null;

  @SerializedName("sum_under_135")
  private Double sumUnder135 = null;

  @SerializedName("sum_over_150")
  private Double sumOver150 = null;

  @SerializedName("sum_under_150")
  private Double sumUnder150 = null;

  @SerializedName("sum_over_155")
  private Double sumOver155 = null;

  @SerializedName("sum_under_155")
  private Double sumUnder155 = null;

  @SerializedName("sum_over_170")
  private Double sumOver170 = null;

  @SerializedName("sum_under_170")
  private Double sumUnder170 = null;

  @SerializedName("sum_over_185")
  private Double sumOver185 = null;

  @SerializedName("sum_under_185")
  private Double sumUnder185 = null;

  @SerializedName("sum_white_over_65")
  private Double sumWhiteOver65 = null;

  @SerializedName("sum_white_under_65")
  private Double sumWhiteUnder65 = null;

  @SerializedName("sum_pink_over_65")
  private Double sumPinkOver65 = null;

  @SerializedName("sum_pink_under_65")
  private Double sumPinkUnder65 = null;

  @SerializedName("sum_white_over_100")
  private Double sumWhiteOver100 = null;

  @SerializedName("sum_white_under_100")
  private Double sumWhiteUnder100 = null;

  @SerializedName("sum_pink_over_100")
  private Double sumPinkOver100 = null;

  @SerializedName("sum_pink_under_100")
  private Double sumPinkUnder100 = null;

  @SerializedName("all_white")
  private Double allWhite = null;

  @SerializedName("all_pink")
  private Double allPink = null;

  @SerializedName("more_white")
  private Double moreWhite = null;

  @SerializedName("more_pink")
  private Double morePink = null;

  @SerializedName("first_white")
  private Double firstWhite = null;

  @SerializedName("first_pink")
  private Double firstPink = null;

  @SerializedName("first_white_second_white")
  private Double firstWhiteSecondWhite = null;

  @SerializedName("first_pink_second_pink")
  private Double firstPinkSecondPink = null;

  @SerializedName("first_white_second_pink")
  private Double firstWhiteSecondPink = null;

  @SerializedName("first_pink_second_white")
  private Double firstPinkSecondWhite = null;

  public LlPayTable _1OutOf1(Double _1OutOf1) {
    this._1OutOf1 = _1OutOf1;
    return this;
  }

   /**
   * The odd value for market N1O1.
   * minimum: 1
   * @return _1OutOf1
  **/
  @ApiModelProperty(value = "The odd value for market N1O1.")
  public Double get1OutOf1() {
    return _1OutOf1;
  }

  public void set1OutOf1(Double _1OutOf1) {
    this._1OutOf1 = _1OutOf1;
  }

  public LlPayTable _2OutOf2(Double _2OutOf2) {
    this._2OutOf2 = _2OutOf2;
    return this;
  }

   /**
   * The odd value for market N2O2.
   * minimum: 1
   * @return _2OutOf2
  **/
  @ApiModelProperty(value = "The odd value for market N2O2.")
  public Double get2OutOf2() {
    return _2OutOf2;
  }

  public void set2OutOf2(Double _2OutOf2) {
    this._2OutOf2 = _2OutOf2;
  }

  public LlPayTable _3OutOf3(Double _3OutOf3) {
    this._3OutOf3 = _3OutOf3;
    return this;
  }

   /**
   * The odd value for market N3O3.
   * minimum: 1
   * @return _3OutOf3
  **/
  @ApiModelProperty(value = "The odd value for market N3O3.")
  public Double get3OutOf3() {
    return _3OutOf3;
  }

  public void set3OutOf3(Double _3OutOf3) {
    this._3OutOf3 = _3OutOf3;
  }

  public LlPayTable _4OutOf4(Double _4OutOf4) {
    this._4OutOf4 = _4OutOf4;
    return this;
  }

   /**
   * The odd value for market N4O4.
   * minimum: 1
   * @return _4OutOf4
  **/
  @ApiModelProperty(value = "The odd value for market N4O4.")
  public Double get4OutOf4() {
    return _4OutOf4;
  }

  public void set4OutOf4(Double _4OutOf4) {
    this._4OutOf4 = _4OutOf4;
  }

  public LlPayTable _1OutOf2(Double _1OutOf2) {
    this._1OutOf2 = _1OutOf2;
    return this;
  }

   /**
   * The odd value for market N1O2.
   * minimum: 1
   * @return _1OutOf2
  **/
  @ApiModelProperty(value = "The odd value for market N1O2.")
  public Double get1OutOf2() {
    return _1OutOf2;
  }

  public void set1OutOf2(Double _1OutOf2) {
    this._1OutOf2 = _1OutOf2;
  }

  public LlPayTable _1OutOf3(Double _1OutOf3) {
    this._1OutOf3 = _1OutOf3;
    return this;
  }

   /**
   * The odd value for market N1O3.
   * minimum: 1
   * @return _1OutOf3
  **/
  @ApiModelProperty(value = "The odd value for market N1O3.")
  public Double get1OutOf3() {
    return _1OutOf3;
  }

  public void set1OutOf3(Double _1OutOf3) {
    this._1OutOf3 = _1OutOf3;
  }

  public LlPayTable _1OutOf4(Double _1OutOf4) {
    this._1OutOf4 = _1OutOf4;
    return this;
  }

   /**
   * The odd value for market N1O4.
   * minimum: 1
   * @return _1OutOf4
  **/
  @ApiModelProperty(value = "The odd value for market N1O4.")
  public Double get1OutOf4() {
    return _1OutOf4;
  }

  public void set1OutOf4(Double _1OutOf4) {
    this._1OutOf4 = _1OutOf4;
  }

  public LlPayTable firstOver15(Double firstOver15) {
    this.firstOver15 = firstOver15;
    return this;
  }

   /**
   * The odd value for market FO15.
   * minimum: 1
   * @return firstOver15
  **/
  @ApiModelProperty(value = "The odd value for market FO15.")
  public Double getFirstOver15() {
    return firstOver15;
  }

  public void setFirstOver15(Double firstOver15) {
    this.firstOver15 = firstOver15;
  }

  public LlPayTable firstUnder15(Double firstUnder15) {
    this.firstUnder15 = firstUnder15;
    return this;
  }

   /**
   * The odd value for market FU15.
   * minimum: 1
   * @return firstUnder15
  **/
  @ApiModelProperty(value = "The odd value for market FU15.")
  public Double getFirstUnder15() {
    return firstUnder15;
  }

  public void setFirstUnder15(Double firstUnder15) {
    this.firstUnder15 = firstUnder15;
  }

  public LlPayTable firstOver25(Double firstOver25) {
    this.firstOver25 = firstOver25;
    return this;
  }

   /**
   * The odd value for market FO25.
   * minimum: 1
   * @return firstOver25
  **/
  @ApiModelProperty(value = "The odd value for market FO25.")
  public Double getFirstOver25() {
    return firstOver25;
  }

  public void setFirstOver25(Double firstOver25) {
    this.firstOver25 = firstOver25;
  }

  public LlPayTable firstUnder25(Double firstUnder25) {
    this.firstUnder25 = firstUnder25;
    return this;
  }

   /**
   * The odd value for market FU25.
   * minimum: 1
   * @return firstUnder25
  **/
  @ApiModelProperty(value = "The odd value for market FU25.")
  public Double getFirstUnder25() {
    return firstUnder25;
  }

  public void setFirstUnder25(Double firstUnder25) {
    this.firstUnder25 = firstUnder25;
  }

  public LlPayTable firstOver35(Double firstOver35) {
    this.firstOver35 = firstOver35;
    return this;
  }

   /**
   * The odd value for market FO35.
   * minimum: 1
   * @return firstOver35
  **/
  @ApiModelProperty(value = "The odd value for market FO35.")
  public Double getFirstOver35() {
    return firstOver35;
  }

  public void setFirstOver35(Double firstOver35) {
    this.firstOver35 = firstOver35;
  }

  public LlPayTable firstUnder35(Double firstUnder35) {
    this.firstUnder35 = firstUnder35;
    return this;
  }

   /**
   * The odd value for market FU35.
   * minimum: 1
   * @return firstUnder35
  **/
  @ApiModelProperty(value = "The odd value for market FU35.")
  public Double getFirstUnder35() {
    return firstUnder35;
  }

  public void setFirstUnder35(Double firstUnder35) {
    this.firstUnder35 = firstUnder35;
  }

  public LlPayTable firstOver25SecondUnder25(Double firstOver25SecondUnder25) {
    this.firstOver25SecondUnder25 = firstOver25SecondUnder25;
    return this;
  }

   /**
   * The odd value for market FOSU25.
   * minimum: 1
   * @return firstOver25SecondUnder25
  **/
  @ApiModelProperty(value = "The odd value for market FOSU25.")
  public Double getFirstOver25SecondUnder25() {
    return firstOver25SecondUnder25;
  }

  public void setFirstOver25SecondUnder25(Double firstOver25SecondUnder25) {
    this.firstOver25SecondUnder25 = firstOver25SecondUnder25;
  }

  public LlPayTable firstUnder25SecondOver25(Double firstUnder25SecondOver25) {
    this.firstUnder25SecondOver25 = firstUnder25SecondOver25;
    return this;
  }

   /**
   * The odd value for market FUSO25.
   * minimum: 1
   * @return firstUnder25SecondOver25
  **/
  @ApiModelProperty(value = "The odd value for market FUSO25.")
  public Double getFirstUnder25SecondOver25() {
    return firstUnder25SecondOver25;
  }

  public void setFirstUnder25SecondOver25(Double firstUnder25SecondOver25) {
    this.firstUnder25SecondOver25 = firstUnder25SecondOver25;
  }

  public LlPayTable firstOver25SecondOver25(Double firstOver25SecondOver25) {
    this.firstOver25SecondOver25 = firstOver25SecondOver25;
    return this;
  }

   /**
   * The odd value for market FOSO25.
   * minimum: 1
   * @return firstOver25SecondOver25
  **/
  @ApiModelProperty(value = "The odd value for market FOSO25.")
  public Double getFirstOver25SecondOver25() {
    return firstOver25SecondOver25;
  }

  public void setFirstOver25SecondOver25(Double firstOver25SecondOver25) {
    this.firstOver25SecondOver25 = firstOver25SecondOver25;
  }

  public LlPayTable firstUnder25SecondUnder25(Double firstUnder25SecondUnder25) {
    this.firstUnder25SecondUnder25 = firstUnder25SecondUnder25;
    return this;
  }

   /**
   * The odd value for market FUSU25.
   * minimum: 1
   * @return firstUnder25SecondUnder25
  **/
  @ApiModelProperty(value = "The odd value for market FUSU25.")
  public Double getFirstUnder25SecondUnder25() {
    return firstUnder25SecondUnder25;
  }

  public void setFirstUnder25SecondUnder25(Double firstUnder25SecondUnder25) {
    this.firstUnder25SecondUnder25 = firstUnder25SecondUnder25;
  }

  public LlPayTable sumIsOdd(Double sumIsOdd) {
    this.sumIsOdd = sumIsOdd;
    return this;
  }

   /**
   * The odd value for market SUMO.
   * minimum: 1
   * @return sumIsOdd
  **/
  @ApiModelProperty(value = "The odd value for market SUMO.")
  public Double getSumIsOdd() {
    return sumIsOdd;
  }

  public void setSumIsOdd(Double sumIsOdd) {
    this.sumIsOdd = sumIsOdd;
  }

  public LlPayTable sumIsEven(Double sumIsEven) {
    this.sumIsEven = sumIsEven;
    return this;
  }

   /**
   * The odd value for market SUME.
   * minimum: 1
   * @return sumIsEven
  **/
  @ApiModelProperty(value = "The odd value for market SUME.")
  public Double getSumIsEven() {
    return sumIsEven;
  }

  public void setSumIsEven(Double sumIsEven) {
    this.sumIsEven = sumIsEven;
  }

  public LlPayTable sumOver120(Double sumOver120) {
    this.sumOver120 = sumOver120;
    return this;
  }

   /**
   * The odd value for market SUMO120.
   * minimum: 1
   * @return sumOver120
  **/
  @ApiModelProperty(value = "The odd value for market SUMO120.")
  public Double getSumOver120() {
    return sumOver120;
  }

  public void setSumOver120(Double sumOver120) {
    this.sumOver120 = sumOver120;
  }

  public LlPayTable sumUnder120(Double sumUnder120) {
    this.sumUnder120 = sumUnder120;
    return this;
  }

   /**
   * The odd value for market SUMU120.
   * minimum: 1
   * @return sumUnder120
  **/
  @ApiModelProperty(value = "The odd value for market SUMU120.")
  public Double getSumUnder120() {
    return sumUnder120;
  }

  public void setSumUnder120(Double sumUnder120) {
    this.sumUnder120 = sumUnder120;
  }

  public LlPayTable sumOver135(Double sumOver135) {
    this.sumOver135 = sumOver135;
    return this;
  }

   /**
   * The odd value for market SUMO135.
   * minimum: 1
   * @return sumOver135
  **/
  @ApiModelProperty(value = "The odd value for market SUMO135.")
  public Double getSumOver135() {
    return sumOver135;
  }

  public void setSumOver135(Double sumOver135) {
    this.sumOver135 = sumOver135;
  }

  public LlPayTable sumUnder135(Double sumUnder135) {
    this.sumUnder135 = sumUnder135;
    return this;
  }

   /**
   * The odd value for market SUMU135.
   * minimum: 1
   * @return sumUnder135
  **/
  @ApiModelProperty(value = "The odd value for market SUMU135.")
  public Double getSumUnder135() {
    return sumUnder135;
  }

  public void setSumUnder135(Double sumUnder135) {
    this.sumUnder135 = sumUnder135;
  }

  public LlPayTable sumOver150(Double sumOver150) {
    this.sumOver150 = sumOver150;
    return this;
  }

   /**
   * The odd value for market SUMO150.
   * minimum: 1
   * @return sumOver150
  **/
  @ApiModelProperty(value = "The odd value for market SUMO150.")
  public Double getSumOver150() {
    return sumOver150;
  }

  public void setSumOver150(Double sumOver150) {
    this.sumOver150 = sumOver150;
  }

  public LlPayTable sumUnder150(Double sumUnder150) {
    this.sumUnder150 = sumUnder150;
    return this;
  }

   /**
   * The odd value for market SUMU150.
   * minimum: 1
   * @return sumUnder150
  **/
  @ApiModelProperty(value = "The odd value for market SUMU150.")
  public Double getSumUnder150() {
    return sumUnder150;
  }

  public void setSumUnder150(Double sumUnder150) {
    this.sumUnder150 = sumUnder150;
  }

  public LlPayTable sumOver155(Double sumOver155) {
    this.sumOver155 = sumOver155;
    return this;
  }

   /**
   * The odd value for market SUMO155.
   * minimum: 1
   * @return sumOver155
  **/
  @ApiModelProperty(value = "The odd value for market SUMO155.")
  public Double getSumOver155() {
    return sumOver155;
  }

  public void setSumOver155(Double sumOver155) {
    this.sumOver155 = sumOver155;
  }

  public LlPayTable sumUnder155(Double sumUnder155) {
    this.sumUnder155 = sumUnder155;
    return this;
  }

   /**
   * The odd value for market SUMU155.
   * minimum: 1
   * @return sumUnder155
  **/
  @ApiModelProperty(value = "The odd value for market SUMU155.")
  public Double getSumUnder155() {
    return sumUnder155;
  }

  public void setSumUnder155(Double sumUnder155) {
    this.sumUnder155 = sumUnder155;
  }

  public LlPayTable sumOver170(Double sumOver170) {
    this.sumOver170 = sumOver170;
    return this;
  }

   /**
   * The odd value for market SUMO170.
   * minimum: 1
   * @return sumOver170
  **/
  @ApiModelProperty(value = "The odd value for market SUMO170.")
  public Double getSumOver170() {
    return sumOver170;
  }

  public void setSumOver170(Double sumOver170) {
    this.sumOver170 = sumOver170;
  }

  public LlPayTable sumUnder170(Double sumUnder170) {
    this.sumUnder170 = sumUnder170;
    return this;
  }

   /**
   * The odd value for market SUMU170.
   * minimum: 1
   * @return sumUnder170
  **/
  @ApiModelProperty(value = "The odd value for market SUMU170.")
  public Double getSumUnder170() {
    return sumUnder170;
  }

  public void setSumUnder170(Double sumUnder170) {
    this.sumUnder170 = sumUnder170;
  }

  public LlPayTable sumOver185(Double sumOver185) {
    this.sumOver185 = sumOver185;
    return this;
  }

   /**
   * The odd value for market SUMO185.
   * minimum: 1
   * @return sumOver185
  **/
  @ApiModelProperty(value = "The odd value for market SUMO185.")
  public Double getSumOver185() {
    return sumOver185;
  }

  public void setSumOver185(Double sumOver185) {
    this.sumOver185 = sumOver185;
  }

  public LlPayTable sumUnder185(Double sumUnder185) {
    this.sumUnder185 = sumUnder185;
    return this;
  }

   /**
   * The odd value for market SUMU185.
   * minimum: 1
   * @return sumUnder185
  **/
  @ApiModelProperty(value = "The odd value for market SUMU185.")
  public Double getSumUnder185() {
    return sumUnder185;
  }

  public void setSumUnder185(Double sumUnder185) {
    this.sumUnder185 = sumUnder185;
  }

  public LlPayTable sumWhiteOver65(Double sumWhiteOver65) {
    this.sumWhiteOver65 = sumWhiteOver65;
    return this;
  }

   /**
   * The odd value for market SUMWO65.
   * minimum: 1
   * @return sumWhiteOver65
  **/
  @ApiModelProperty(value = "The odd value for market SUMWO65.")
  public Double getSumWhiteOver65() {
    return sumWhiteOver65;
  }

  public void setSumWhiteOver65(Double sumWhiteOver65) {
    this.sumWhiteOver65 = sumWhiteOver65;
  }

  public LlPayTable sumWhiteUnder65(Double sumWhiteUnder65) {
    this.sumWhiteUnder65 = sumWhiteUnder65;
    return this;
  }

   /**
   * The odd value for market SUMWU65.
   * minimum: 1
   * @return sumWhiteUnder65
  **/
  @ApiModelProperty(value = "The odd value for market SUMWU65.")
  public Double getSumWhiteUnder65() {
    return sumWhiteUnder65;
  }

  public void setSumWhiteUnder65(Double sumWhiteUnder65) {
    this.sumWhiteUnder65 = sumWhiteUnder65;
  }

  public LlPayTable sumPinkOver65(Double sumPinkOver65) {
    this.sumPinkOver65 = sumPinkOver65;
    return this;
  }

   /**
   * The odd value for market SUMPO65.
   * minimum: 1
   * @return sumPinkOver65
  **/
  @ApiModelProperty(value = "The odd value for market SUMPO65.")
  public Double getSumPinkOver65() {
    return sumPinkOver65;
  }

  public void setSumPinkOver65(Double sumPinkOver65) {
    this.sumPinkOver65 = sumPinkOver65;
  }

  public LlPayTable sumPinkUnder65(Double sumPinkUnder65) {
    this.sumPinkUnder65 = sumPinkUnder65;
    return this;
  }

   /**
   * The odd value for market SUMPU65.
   * minimum: 1
   * @return sumPinkUnder65
  **/
  @ApiModelProperty(value = "The odd value for market SUMPU65.")
  public Double getSumPinkUnder65() {
    return sumPinkUnder65;
  }

  public void setSumPinkUnder65(Double sumPinkUnder65) {
    this.sumPinkUnder65 = sumPinkUnder65;
  }

  public LlPayTable sumWhiteOver100(Double sumWhiteOver100) {
    this.sumWhiteOver100 = sumWhiteOver100;
    return this;
  }

   /**
   * The odd value for market SUMWO100.
   * minimum: 1
   * @return sumWhiteOver100
  **/
  @ApiModelProperty(value = "The odd value for market SUMWO100.")
  public Double getSumWhiteOver100() {
    return sumWhiteOver100;
  }

  public void setSumWhiteOver100(Double sumWhiteOver100) {
    this.sumWhiteOver100 = sumWhiteOver100;
  }

  public LlPayTable sumWhiteUnder100(Double sumWhiteUnder100) {
    this.sumWhiteUnder100 = sumWhiteUnder100;
    return this;
  }

   /**
   * The odd value for market SUMWU100.
   * minimum: 1
   * @return sumWhiteUnder100
  **/
  @ApiModelProperty(value = "The odd value for market SUMWU100.")
  public Double getSumWhiteUnder100() {
    return sumWhiteUnder100;
  }

  public void setSumWhiteUnder100(Double sumWhiteUnder100) {
    this.sumWhiteUnder100 = sumWhiteUnder100;
  }

  public LlPayTable sumPinkOver100(Double sumPinkOver100) {
    this.sumPinkOver100 = sumPinkOver100;
    return this;
  }

   /**
   * The odd value for market SUMPO100.
   * minimum: 1
   * @return sumPinkOver100
  **/
  @ApiModelProperty(value = "The odd value for market SUMPO100.")
  public Double getSumPinkOver100() {
    return sumPinkOver100;
  }

  public void setSumPinkOver100(Double sumPinkOver100) {
    this.sumPinkOver100 = sumPinkOver100;
  }

  public LlPayTable sumPinkUnder100(Double sumPinkUnder100) {
    this.sumPinkUnder100 = sumPinkUnder100;
    return this;
  }

   /**
   * The odd value for market SUMPU100.
   * minimum: 1
   * @return sumPinkUnder100
  **/
  @ApiModelProperty(value = "The odd value for market SUMPU100.")
  public Double getSumPinkUnder100() {
    return sumPinkUnder100;
  }

  public void setSumPinkUnder100(Double sumPinkUnder100) {
    this.sumPinkUnder100 = sumPinkUnder100;
  }

  public LlPayTable allWhite(Double allWhite) {
    this.allWhite = allWhite;
    return this;
  }

   /**
   * The odd value for market ALLW.
   * minimum: 1
   * @return allWhite
  **/
  @ApiModelProperty(value = "The odd value for market ALLW.")
  public Double getAllWhite() {
    return allWhite;
  }

  public void setAllWhite(Double allWhite) {
    this.allWhite = allWhite;
  }

  public LlPayTable allPink(Double allPink) {
    this.allPink = allPink;
    return this;
  }

   /**
   * The odd value for market ALLP.
   * minimum: 1
   * @return allPink
  **/
  @ApiModelProperty(value = "The odd value for market ALLP.")
  public Double getAllPink() {
    return allPink;
  }

  public void setAllPink(Double allPink) {
    this.allPink = allPink;
  }

  public LlPayTable moreWhite(Double moreWhite) {
    this.moreWhite = moreWhite;
    return this;
  }

   /**
   * The odd value for market MOREW.
   * minimum: 1
   * @return moreWhite
  **/
  @ApiModelProperty(value = "The odd value for market MOREW.")
  public Double getMoreWhite() {
    return moreWhite;
  }

  public void setMoreWhite(Double moreWhite) {
    this.moreWhite = moreWhite;
  }

  public LlPayTable morePink(Double morePink) {
    this.morePink = morePink;
    return this;
  }

   /**
   * The odd value for market MOREP.
   * minimum: 1
   * @return morePink
  **/
  @ApiModelProperty(value = "The odd value for market MOREP.")
  public Double getMorePink() {
    return morePink;
  }

  public void setMorePink(Double morePink) {
    this.morePink = morePink;
  }

  public LlPayTable firstWhite(Double firstWhite) {
    this.firstWhite = firstWhite;
    return this;
  }

   /**
   * The odd value for market FIRSTW.
   * minimum: 1
   * @return firstWhite
  **/
  @ApiModelProperty(value = "The odd value for market FIRSTW.")
  public Double getFirstWhite() {
    return firstWhite;
  }

  public void setFirstWhite(Double firstWhite) {
    this.firstWhite = firstWhite;
  }

  public LlPayTable firstPink(Double firstPink) {
    this.firstPink = firstPink;
    return this;
  }

   /**
   * The odd value for market FIRSTP.
   * minimum: 1
   * @return firstPink
  **/
  @ApiModelProperty(value = "The odd value for market FIRSTP.")
  public Double getFirstPink() {
    return firstPink;
  }

  public void setFirstPink(Double firstPink) {
    this.firstPink = firstPink;
  }

  public LlPayTable firstWhiteSecondWhite(Double firstWhiteSecondWhite) {
    this.firstWhiteSecondWhite = firstWhiteSecondWhite;
    return this;
  }

   /**
   * The odd value for market FWSW.
   * minimum: 1
   * @return firstWhiteSecondWhite
  **/
  @ApiModelProperty(value = "The odd value for market FWSW.")
  public Double getFirstWhiteSecondWhite() {
    return firstWhiteSecondWhite;
  }

  public void setFirstWhiteSecondWhite(Double firstWhiteSecondWhite) {
    this.firstWhiteSecondWhite = firstWhiteSecondWhite;
  }

  public LlPayTable firstPinkSecondPink(Double firstPinkSecondPink) {
    this.firstPinkSecondPink = firstPinkSecondPink;
    return this;
  }

   /**
   * The odd value for market FPSP.
   * minimum: 1
   * @return firstPinkSecondPink
  **/
  @ApiModelProperty(value = "The odd value for market FPSP.")
  public Double getFirstPinkSecondPink() {
    return firstPinkSecondPink;
  }

  public void setFirstPinkSecondPink(Double firstPinkSecondPink) {
    this.firstPinkSecondPink = firstPinkSecondPink;
  }

  public LlPayTable firstWhiteSecondPink(Double firstWhiteSecondPink) {
    this.firstWhiteSecondPink = firstWhiteSecondPink;
    return this;
  }

   /**
   * The odd value for market FWSP.
   * minimum: 1
   * @return firstWhiteSecondPink
  **/
  @ApiModelProperty(value = "The odd value for market FWSP.")
  public Double getFirstWhiteSecondPink() {
    return firstWhiteSecondPink;
  }

  public void setFirstWhiteSecondPink(Double firstWhiteSecondPink) {
    this.firstWhiteSecondPink = firstWhiteSecondPink;
  }

  public LlPayTable firstPinkSecondWhite(Double firstPinkSecondWhite) {
    this.firstPinkSecondWhite = firstPinkSecondWhite;
    return this;
  }

   /**
   * The odd value for market FPSW.
   * minimum: 1
   * @return firstPinkSecondWhite
  **/
  @ApiModelProperty(value = "The odd value for market FPSW.")
  public Double getFirstPinkSecondWhite() {
    return firstPinkSecondWhite;
  }

  public void setFirstPinkSecondWhite(Double firstPinkSecondWhite) {
    this.firstPinkSecondWhite = firstPinkSecondWhite;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LlPayTable llPayTable = (LlPayTable) o;
    return Objects.equals(this._1OutOf1, llPayTable._1OutOf1) &&
        Objects.equals(this._2OutOf2, llPayTable._2OutOf2) &&
        Objects.equals(this._3OutOf3, llPayTable._3OutOf3) &&
        Objects.equals(this._4OutOf4, llPayTable._4OutOf4) &&
        Objects.equals(this._1OutOf2, llPayTable._1OutOf2) &&
        Objects.equals(this._1OutOf3, llPayTable._1OutOf3) &&
        Objects.equals(this._1OutOf4, llPayTable._1OutOf4) &&
        Objects.equals(this.firstOver15, llPayTable.firstOver15) &&
        Objects.equals(this.firstUnder15, llPayTable.firstUnder15) &&
        Objects.equals(this.firstOver25, llPayTable.firstOver25) &&
        Objects.equals(this.firstUnder25, llPayTable.firstUnder25) &&
        Objects.equals(this.firstOver35, llPayTable.firstOver35) &&
        Objects.equals(this.firstUnder35, llPayTable.firstUnder35) &&
        Objects.equals(this.firstOver25SecondUnder25, llPayTable.firstOver25SecondUnder25) &&
        Objects.equals(this.firstUnder25SecondOver25, llPayTable.firstUnder25SecondOver25) &&
        Objects.equals(this.firstOver25SecondOver25, llPayTable.firstOver25SecondOver25) &&
        Objects.equals(this.firstUnder25SecondUnder25, llPayTable.firstUnder25SecondUnder25) &&
        Objects.equals(this.sumIsOdd, llPayTable.sumIsOdd) &&
        Objects.equals(this.sumIsEven, llPayTable.sumIsEven) &&
        Objects.equals(this.sumOver120, llPayTable.sumOver120) &&
        Objects.equals(this.sumUnder120, llPayTable.sumUnder120) &&
        Objects.equals(this.sumOver135, llPayTable.sumOver135) &&
        Objects.equals(this.sumUnder135, llPayTable.sumUnder135) &&
        Objects.equals(this.sumOver150, llPayTable.sumOver150) &&
        Objects.equals(this.sumUnder150, llPayTable.sumUnder150) &&
        Objects.equals(this.sumOver155, llPayTable.sumOver155) &&
        Objects.equals(this.sumUnder155, llPayTable.sumUnder155) &&
        Objects.equals(this.sumOver170, llPayTable.sumOver170) &&
        Objects.equals(this.sumUnder170, llPayTable.sumUnder170) &&
        Objects.equals(this.sumOver185, llPayTable.sumOver185) &&
        Objects.equals(this.sumUnder185, llPayTable.sumUnder185) &&
        Objects.equals(this.sumWhiteOver65, llPayTable.sumWhiteOver65) &&
        Objects.equals(this.sumWhiteUnder65, llPayTable.sumWhiteUnder65) &&
        Objects.equals(this.sumPinkOver65, llPayTable.sumPinkOver65) &&
        Objects.equals(this.sumPinkUnder65, llPayTable.sumPinkUnder65) &&
        Objects.equals(this.sumWhiteOver100, llPayTable.sumWhiteOver100) &&
        Objects.equals(this.sumWhiteUnder100, llPayTable.sumWhiteUnder100) &&
        Objects.equals(this.sumPinkOver100, llPayTable.sumPinkOver100) &&
        Objects.equals(this.sumPinkUnder100, llPayTable.sumPinkUnder100) &&
        Objects.equals(this.allWhite, llPayTable.allWhite) &&
        Objects.equals(this.allPink, llPayTable.allPink) &&
        Objects.equals(this.moreWhite, llPayTable.moreWhite) &&
        Objects.equals(this.morePink, llPayTable.morePink) &&
        Objects.equals(this.firstWhite, llPayTable.firstWhite) &&
        Objects.equals(this.firstPink, llPayTable.firstPink) &&
        Objects.equals(this.firstWhiteSecondWhite, llPayTable.firstWhiteSecondWhite) &&
        Objects.equals(this.firstPinkSecondPink, llPayTable.firstPinkSecondPink) &&
        Objects.equals(this.firstWhiteSecondPink, llPayTable.firstWhiteSecondPink) &&
        Objects.equals(this.firstPinkSecondWhite, llPayTable.firstPinkSecondWhite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_1OutOf1, _2OutOf2, _3OutOf3, _4OutOf4, _1OutOf2, _1OutOf3, _1OutOf4, firstOver15, firstUnder15, firstOver25, firstUnder25, firstOver35, firstUnder35, firstOver25SecondUnder25, firstUnder25SecondOver25, firstOver25SecondOver25, firstUnder25SecondUnder25, sumIsOdd, sumIsEven, sumOver120, sumUnder120, sumOver135, sumUnder135, sumOver150, sumUnder150, sumOver155, sumUnder155, sumOver170, sumUnder170, sumOver185, sumUnder185, sumWhiteOver65, sumWhiteUnder65, sumPinkOver65, sumPinkUnder65, sumWhiteOver100, sumWhiteUnder100, sumPinkOver100, sumPinkUnder100, allWhite, allPink, moreWhite, morePink, firstWhite, firstPink, firstWhiteSecondWhite, firstPinkSecondPink, firstWhiteSecondPink, firstPinkSecondWhite);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LlPayTable {\n");
    
    sb.append("    _1OutOf1: ").append(toIndentedString(_1OutOf1)).append("\n");
    sb.append("    _2OutOf2: ").append(toIndentedString(_2OutOf2)).append("\n");
    sb.append("    _3OutOf3: ").append(toIndentedString(_3OutOf3)).append("\n");
    sb.append("    _4OutOf4: ").append(toIndentedString(_4OutOf4)).append("\n");
    sb.append("    _1OutOf2: ").append(toIndentedString(_1OutOf2)).append("\n");
    sb.append("    _1OutOf3: ").append(toIndentedString(_1OutOf3)).append("\n");
    sb.append("    _1OutOf4: ").append(toIndentedString(_1OutOf4)).append("\n");
    sb.append("    firstOver15: ").append(toIndentedString(firstOver15)).append("\n");
    sb.append("    firstUnder15: ").append(toIndentedString(firstUnder15)).append("\n");
    sb.append("    firstOver25: ").append(toIndentedString(firstOver25)).append("\n");
    sb.append("    firstUnder25: ").append(toIndentedString(firstUnder25)).append("\n");
    sb.append("    firstOver35: ").append(toIndentedString(firstOver35)).append("\n");
    sb.append("    firstUnder35: ").append(toIndentedString(firstUnder35)).append("\n");
    sb.append("    firstOver25SecondUnder25: ").append(toIndentedString(firstOver25SecondUnder25)).append("\n");
    sb.append("    firstUnder25SecondOver25: ").append(toIndentedString(firstUnder25SecondOver25)).append("\n");
    sb.append("    firstOver25SecondOver25: ").append(toIndentedString(firstOver25SecondOver25)).append("\n");
    sb.append("    firstUnder25SecondUnder25: ").append(toIndentedString(firstUnder25SecondUnder25)).append("\n");
    sb.append("    sumIsOdd: ").append(toIndentedString(sumIsOdd)).append("\n");
    sb.append("    sumIsEven: ").append(toIndentedString(sumIsEven)).append("\n");
    sb.append("    sumOver120: ").append(toIndentedString(sumOver120)).append("\n");
    sb.append("    sumUnder120: ").append(toIndentedString(sumUnder120)).append("\n");
    sb.append("    sumOver135: ").append(toIndentedString(sumOver135)).append("\n");
    sb.append("    sumUnder135: ").append(toIndentedString(sumUnder135)).append("\n");
    sb.append("    sumOver150: ").append(toIndentedString(sumOver150)).append("\n");
    sb.append("    sumUnder150: ").append(toIndentedString(sumUnder150)).append("\n");
    sb.append("    sumOver155: ").append(toIndentedString(sumOver155)).append("\n");
    sb.append("    sumUnder155: ").append(toIndentedString(sumUnder155)).append("\n");
    sb.append("    sumOver170: ").append(toIndentedString(sumOver170)).append("\n");
    sb.append("    sumUnder170: ").append(toIndentedString(sumUnder170)).append("\n");
    sb.append("    sumOver185: ").append(toIndentedString(sumOver185)).append("\n");
    sb.append("    sumUnder185: ").append(toIndentedString(sumUnder185)).append("\n");
    sb.append("    sumWhiteOver65: ").append(toIndentedString(sumWhiteOver65)).append("\n");
    sb.append("    sumWhiteUnder65: ").append(toIndentedString(sumWhiteUnder65)).append("\n");
    sb.append("    sumPinkOver65: ").append(toIndentedString(sumPinkOver65)).append("\n");
    sb.append("    sumPinkUnder65: ").append(toIndentedString(sumPinkUnder65)).append("\n");
    sb.append("    sumWhiteOver100: ").append(toIndentedString(sumWhiteOver100)).append("\n");
    sb.append("    sumWhiteUnder100: ").append(toIndentedString(sumWhiteUnder100)).append("\n");
    sb.append("    sumPinkOver100: ").append(toIndentedString(sumPinkOver100)).append("\n");
    sb.append("    sumPinkUnder100: ").append(toIndentedString(sumPinkUnder100)).append("\n");
    sb.append("    allWhite: ").append(toIndentedString(allWhite)).append("\n");
    sb.append("    allPink: ").append(toIndentedString(allPink)).append("\n");
    sb.append("    moreWhite: ").append(toIndentedString(moreWhite)).append("\n");
    sb.append("    morePink: ").append(toIndentedString(morePink)).append("\n");
    sb.append("    firstWhite: ").append(toIndentedString(firstWhite)).append("\n");
    sb.append("    firstPink: ").append(toIndentedString(firstPink)).append("\n");
    sb.append("    firstWhiteSecondWhite: ").append(toIndentedString(firstWhiteSecondWhite)).append("\n");
    sb.append("    firstPinkSecondPink: ").append(toIndentedString(firstPinkSecondPink)).append("\n");
    sb.append("    firstWhiteSecondPink: ").append(toIndentedString(firstWhiteSecondPink)).append("\n");
    sb.append("    firstPinkSecondWhite: ").append(toIndentedString(firstPinkSecondWhite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

