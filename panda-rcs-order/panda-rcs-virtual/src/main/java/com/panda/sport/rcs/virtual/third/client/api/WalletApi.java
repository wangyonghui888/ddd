/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.api;

import com.panda.sport.rcs.virtual.third.client.ApiCallback;
import com.panda.sport.rcs.virtual.third.client.ApiClient;
import com.panda.sport.rcs.virtual.third.client.ApiException;
import com.panda.sport.rcs.virtual.third.client.ApiResponse;
import com.panda.sport.rcs.virtual.third.client.Configuration;
import com.panda.sport.rcs.virtual.third.client.Pair;
import com.panda.sport.rcs.virtual.third.client.ProgressRequestBody;
import com.panda.sport.rcs.virtual.third.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.panda.sport.rcs.virtual.third.client.model.ErrorInfo;
import org.threeten.bp.OffsetDateTime;
import com.panda.sport.rcs.virtual.third.client.model.Transaction;
import com.panda.sport.rcs.virtual.third.client.model.Wallet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletApi {
    private ApiClient apiClient;

    public WalletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for walletCreate
     * @param entityId Goldenrace entity and user identifier. The owner of the wallet.  (required)
     * @param currency The currency code of the wallet  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param balance The actual balance of the wallet  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param isPromotion Indicate if it is a promotion wallet  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational. The default start date is the moment the wallet is created.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreateCall(Integer entityId, String currency, String extId, String extData, Double balance, Integer priority, Boolean isPromotion, String description, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        if (balance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("balance", balance));
        if (priority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));
        if (isPromotion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isPromotion", isPromotion));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreateValidateBeforeCall(Integer entityId, String currency, String extId, String extData, Double balance, Integer priority, Boolean isPromotion, String description, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling walletCreate(Async)");
        }
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling walletCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreateCall(entityId, currency, extId, extData, balance, priority, isPromotion, description, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creation of a new wallet, whose currency (currencyIso), its external id (extId), the external information (extData), boolean for is a promotion (isPromotion) and the status of the wallet. - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - the status of the entity (enabled, disabled or deleted). 
     * @param entityId Goldenrace entity and user identifier. The owner of the wallet.  (required)
     * @param currency The currency code of the wallet  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param balance The actual balance of the wallet  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param isPromotion Indicate if it is a promotion wallet  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational. The default start date is the moment the wallet is created.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @return Wallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wallet walletCreate(Integer entityId, String currency, String extId, String extData, Double balance, Integer priority, Boolean isPromotion, String description, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<Wallet> resp = walletCreateWithHttpInfo(entityId, currency, extId, extData, balance, priority, isPromotion, description, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * Creation of a new wallet, whose currency (currencyIso), its external id (extId), the external information (extData), boolean for is a promotion (isPromotion) and the status of the wallet. - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - the status of the entity (enabled, disabled or deleted). 
     * @param entityId Goldenrace entity and user identifier. The owner of the wallet.  (required)
     * @param currency The currency code of the wallet  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param balance The actual balance of the wallet  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param isPromotion Indicate if it is a promotion wallet  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational. The default start date is the moment the wallet is created.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @return ApiResponse&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wallet> walletCreateWithHttpInfo(Integer entityId, String currency, String extId, String extData, Double balance, Integer priority, Boolean isPromotion, String description, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = walletCreateValidateBeforeCall(entityId, currency, extId, extData, balance, priority, isPromotion, description, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creation of a new wallet, whose currency (currencyIso), its external id (extId), the external information (extData), boolean for is a promotion (isPromotion) and the status of the wallet. - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - the status of the entity (enabled, disabled or deleted). 
     * @param entityId Goldenrace entity and user identifier. The owner of the wallet.  (required)
     * @param currency The currency code of the wallet  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param balance The actual balance of the wallet  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param isPromotion Indicate if it is a promotion wallet  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational. The default start date is the moment the wallet is created.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreateAsync(Integer entityId, String currency, String extId, String extData, Double balance, Integer priority, Boolean isPromotion, String description, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<Wallet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreateValidateBeforeCall(entityId, currency, extId, extData, balance, priority, isPromotion, description, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditAdd
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to increase current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditAddCall(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (extTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTransactionId", extTransactionId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditAddValidateBeforeCall(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling walletCreditAdd(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling walletCreditAdd(Async)");
        }
        
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling walletCreditAdd(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditAddCall(walletId, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Increments credit as a transaction on current unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to increase current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction walletCreditAdd(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        ApiResponse<Transaction> resp = walletCreditAddWithHttpInfo(walletId, currencyCode, amount, extTransactionId, extData, method);
        return resp.getData();
    }

    /**
     * 
     * Increments credit as a transaction on current unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to increase current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> walletCreditAddWithHttpInfo(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditAddValidateBeforeCall(walletId, currencyCode, amount, extTransactionId, extData, method, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Increments credit as a transaction on current unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to increase current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditAddAsync(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditAddValidateBeforeCall(walletId, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditClear
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditClearCall(Integer walletId, String currencyCode, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/clear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (extTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTransactionId", extTransactionId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditClearValidateBeforeCall(Integer walletId, String currencyCode, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling walletCreditClear(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling walletCreditClear(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditClearCall(walletId, currencyCode, extTransactionId, extData, method, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Clears all the credit as a transaction on currrent unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction walletCreditClear(Integer walletId, String currencyCode, String extTransactionId, String extData, String method) throws ApiException {
        ApiResponse<Transaction> resp = walletCreditClearWithHttpInfo(walletId, currencyCode, extTransactionId, extData, method);
        return resp.getData();
    }

    /**
     * 
     * Clears all the credit as a transaction on currrent unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> walletCreditClearWithHttpInfo(Integer walletId, String currencyCode, String extTransactionId, String extData, String method) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditClearValidateBeforeCall(walletId, currencyCode, extTransactionId, extData, method, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clears all the credit as a transaction on currrent unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditClearAsync(Integer walletId, String currencyCode, String extTransactionId, String extData, String method, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditClearValidateBeforeCall(walletId, currencyCode, extTransactionId, extData, method, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditFind
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param n Number of elements to return from query. If 0, get all elements. Value must be 0 or positive.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element. Value must be 0 or positive.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param walletId Wallet identifier from transaction. (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param currency Currency ISO Code (optional)
     * @param operatorId Entity operator, can be manager/client/api, wich can perform operations on current wallet. (optional)
     * @param operatorAPI Entity operator session, can be manager/client/external. (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param withChildren If true, find wallets for the entity and his childrens. If false, find wallets only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditFindCall(Integer entityId, OffsetDateTime startTime, Integer n, Integer first, String orderBy, Integer walletId, OffsetDateTime endTime, String currency, Integer operatorId, String operatorAPI, String method, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        if (operatorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operatorId", operatorId));
        if (operatorAPI != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operatorAPI", operatorAPI));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("method", method));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (first != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first", first));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditFindValidateBeforeCall(Integer entityId, OffsetDateTime startTime, Integer n, Integer first, String orderBy, Integer walletId, OffsetDateTime endTime, String currency, Integer operatorId, String operatorAPI, String method, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling walletCreditFind(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling walletCreditFind(Async)");
        }
        
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling walletCreditFind(Async)");
        }
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling walletCreditFind(Async)");
        }
        
        // verify the required parameter 'orderBy' is set
        if (orderBy == null) {
            throw new ApiException("Missing the required parameter 'orderBy' when calling walletCreditFind(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditFindCall(entityId, startTime, n, first, orderBy, walletId, endTime, currency, operatorId, operatorAPI, method, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Produces a history of credit transactions
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param n Number of elements to return from query. If 0, get all elements. Value must be 0 or positive.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element. Value must be 0 or positive.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param walletId Wallet identifier from transaction. (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param currency Currency ISO Code (optional)
     * @param operatorId Entity operator, can be manager/client/api, wich can perform operations on current wallet. (optional)
     * @param operatorAPI Entity operator session, can be manager/client/external. (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param withChildren If true, find wallets for the entity and his childrens. If false, find wallets only for the entity. (optional, default to true)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Transaction> walletCreditFind(Integer entityId, OffsetDateTime startTime, Integer n, Integer first, String orderBy, Integer walletId, OffsetDateTime endTime, String currency, Integer operatorId, String operatorAPI, String method, Boolean withChildren) throws ApiException {
        ApiResponse<List<Transaction>> resp = walletCreditFindWithHttpInfo(entityId, startTime, n, first, orderBy, walletId, endTime, currency, operatorId, operatorAPI, method, withChildren);
        return resp.getData();
    }

    /**
     * 
     * Produces a history of credit transactions
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param n Number of elements to return from query. If 0, get all elements. Value must be 0 or positive.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element. Value must be 0 or positive.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param walletId Wallet identifier from transaction. (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param currency Currency ISO Code (optional)
     * @param operatorId Entity operator, can be manager/client/api, wich can perform operations on current wallet. (optional)
     * @param operatorAPI Entity operator session, can be manager/client/external. (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param withChildren If true, find wallets for the entity and his childrens. If false, find wallets only for the entity. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Transaction>> walletCreditFindWithHttpInfo(Integer entityId, OffsetDateTime startTime, Integer n, Integer first, String orderBy, Integer walletId, OffsetDateTime endTime, String currency, Integer operatorId, String operatorAPI, String method, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditFindValidateBeforeCall(entityId, startTime, n, first, orderBy, walletId, endTime, currency, operatorId, operatorAPI, method, withChildren, null, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Produces a history of credit transactions
     * @param entityId The id of the entity.  (required)
     * @param startTime Interval start time from which the search will be performed.  (required)
     * @param n Number of elements to return from query. If 0, get all elements. Value must be 0 or positive.  (required)
     * @param first First element of query to be returned, for paging purposes. If 0, start from first element. Value must be 0 or positive.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param walletId Wallet identifier from transaction. (optional)
     * @param endTime Interval end time to which the search will be performed. Use n or endTime  (optional)
     * @param currency Currency ISO Code (optional)
     * @param operatorId Entity operator, can be manager/client/api, wich can perform operations on current wallet. (optional)
     * @param operatorAPI Entity operator session, can be manager/client/external. (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param withChildren If true, find wallets for the entity and his childrens. If false, find wallets only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditFindAsync(Integer entityId, OffsetDateTime startTime, Integer n, Integer first, String orderBy, Integer walletId, OffsetDateTime endTime, String currency, Integer operatorId, String operatorAPI, String method, Boolean withChildren, final ApiCallback<List<Transaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditFindValidateBeforeCall(entityId, startTime, n, first, orderBy, walletId, endTime, currency, operatorId, operatorAPI, method, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditFindById
     * @param entityId Entity id. This method will find transaction from this entity and its childs. (required)
     * @param ticketId Ticket id from transaction. (optional)
     * @param transactionId Unique identifier from transaction. (optional)
     * @param extTransactionId Unique external identifier from transaction. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditFindByIdCall(Integer entityId, Integer ticketId, Integer transactionId, String extTransactionId, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (ticketId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ticketId", ticketId));
        if (transactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transactionId", transactionId));
        if (extTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTransactionId", extTransactionId));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditFindByIdValidateBeforeCall(Integer entityId, Integer ticketId, Integer transactionId, String extTransactionId, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling walletCreditFindById(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditFindByIdCall(entityId, ticketId, transactionId, extTransactionId, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return transaction list
     * @param entityId Entity id. This method will find transaction from this entity and its childs. (required)
     * @param ticketId Ticket id from transaction. (optional)
     * @param transactionId Unique identifier from transaction. (optional)
     * @param extTransactionId Unique external identifier from transaction. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Transaction> walletCreditFindById(Integer entityId, Integer ticketId, Integer transactionId, String extTransactionId, Boolean withChildren) throws ApiException {
        ApiResponse<List<Transaction>> resp = walletCreditFindByIdWithHttpInfo(entityId, ticketId, transactionId, extTransactionId, withChildren);
        return resp.getData();
    }

    /**
     * 
     * Return transaction list
     * @param entityId Entity id. This method will find transaction from this entity and its childs. (required)
     * @param ticketId Ticket id from transaction. (optional)
     * @param transactionId Unique identifier from transaction. (optional)
     * @param extTransactionId Unique external identifier from transaction. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Transaction>> walletCreditFindByIdWithHttpInfo(Integer entityId, Integer ticketId, Integer transactionId, String extTransactionId, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditFindByIdValidateBeforeCall(entityId, ticketId, transactionId, extTransactionId, withChildren, null, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return transaction list
     * @param entityId Entity id. This method will find transaction from this entity and its childs. (required)
     * @param ticketId Ticket id from transaction. (optional)
     * @param transactionId Unique identifier from transaction. (optional)
     * @param extTransactionId Unique external identifier from transaction. (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditFindByIdAsync(Integer entityId, Integer ticketId, Integer transactionId, String extTransactionId, Boolean withChildren, final ApiCallback<List<Transaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditFindByIdValidateBeforeCall(entityId, ticketId, transactionId, extTransactionId, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditRemove
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditRemoveCall(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (extTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTransactionId", extTransactionId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditRemoveValidateBeforeCall(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling walletCreditRemove(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling walletCreditRemove(Async)");
        }
        
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling walletCreditRemove(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditRemoveCall(walletId, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Decrements credit as a transaction on currrent unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction walletCreditRemove(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        ApiResponse<Transaction> resp = walletCreditRemoveWithHttpInfo(walletId, currencyCode, amount, extTransactionId, extData, method);
        return resp.getData();
    }

    /**
     * 
     * Decrements credit as a transaction on currrent unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> walletCreditRemoveWithHttpInfo(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditRemoveValidateBeforeCall(walletId, currencyCode, amount, extTransactionId, extData, method, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Decrements credit as a transaction on currrent unit. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditRemoveAsync(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditRemoveValidateBeforeCall(walletId, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditSet
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditSetCall(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (extTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTransactionId", extTransactionId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditSetValidateBeforeCall(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling walletCreditSet(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling walletCreditSet(Async)");
        }
        
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling walletCreditSet(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditSetCall(walletId, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * To set an amount as the new credit value; this will override any limit or check. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transaction walletCreditSet(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        ApiResponse<Transaction> resp = walletCreditSetWithHttpInfo(walletId, currencyCode, amount, extTransactionId, extData, method);
        return resp.getData();
    }

    /**
     * 
     * To set an amount as the new credit value; this will override any limit or check. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transaction> walletCreditSetWithHttpInfo(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditSetValidateBeforeCall(walletId, currencyCode, amount, extTransactionId, extData, method, null, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * To set an amount as the new credit value; this will override any limit or check. 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction    (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditSetAsync(Integer walletId, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ApiCallback<Transaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditSetValidateBeforeCall(walletId, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletCreditTransfer
     * @param walletIdFrom Goldenrace wallet identifier. Credit wallet origin.  (required)
     * @param walletIdTo Goldenrace wallet identifier. Credit wallet destination.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction        (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletCreditTransferCall(Integer walletIdFrom, Integer walletIdTo, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/credit/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletIdFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletIdFrom", walletIdFrom));
        if (walletIdTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletIdTo", walletIdTo));
        if (currencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currencyCode", currencyCode));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        if (extTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extTransactionId", extTransactionId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (method != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("method", method));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletCreditTransferValidateBeforeCall(Integer walletIdFrom, Integer walletIdTo, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletIdFrom' is set
        if (walletIdFrom == null) {
            throw new ApiException("Missing the required parameter 'walletIdFrom' when calling walletCreditTransfer(Async)");
        }
        
        // verify the required parameter 'walletIdTo' is set
        if (walletIdTo == null) {
            throw new ApiException("Missing the required parameter 'walletIdTo' when calling walletCreditTransfer(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling walletCreditTransfer(Async)");
        }
        
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling walletCreditTransfer(Async)");
        }
        

        com.squareup.okhttp.Call call = walletCreditTransferCall(walletIdFrom, walletIdTo, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Transfer credit from one wallet to another. 
     * @param walletIdFrom Goldenrace wallet identifier. Credit wallet origin.  (required)
     * @param walletIdTo Goldenrace wallet identifier. Credit wallet destination.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction        (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Transaction> walletCreditTransfer(Integer walletIdFrom, Integer walletIdTo, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        ApiResponse<List<Transaction>> resp = walletCreditTransferWithHttpInfo(walletIdFrom, walletIdTo, currencyCode, amount, extTransactionId, extData, method);
        return resp.getData();
    }

    /**
     * 
     * Transfer credit from one wallet to another. 
     * @param walletIdFrom Goldenrace wallet identifier. Credit wallet origin.  (required)
     * @param walletIdTo Goldenrace wallet identifier. Credit wallet destination.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction        (optional)
     * @param method Path used on API to perform this operation (optional)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Transaction>> walletCreditTransferWithHttpInfo(Integer walletIdFrom, Integer walletIdTo, String currencyCode, Double amount, String extTransactionId, String extData, String method) throws ApiException {
        com.squareup.okhttp.Call call = walletCreditTransferValidateBeforeCall(walletIdFrom, walletIdTo, currencyCode, amount, extTransactionId, extData, method, null, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Transfer credit from one wallet to another. 
     * @param walletIdFrom Goldenrace wallet identifier. Credit wallet origin.  (required)
     * @param walletIdTo Goldenrace wallet identifier. Credit wallet destination.  (required)
     * @param currencyCode ISO Currency code (required)
     * @param amount Positive amount to decrease current credit  (required)
     * @param extTransactionId External transaction Id (optional)
     * @param extData JSON encoded object with custom data to be associated with transaction        (optional)
     * @param method Path used on API to perform this operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletCreditTransferAsync(Integer walletIdFrom, Integer walletIdTo, String currencyCode, Double amount, String extTransactionId, String extData, String method, final ApiCallback<List<Transaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletCreditTransferValidateBeforeCall(walletIdFrom, walletIdTo, currencyCode, amount, extTransactionId, extData, method, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletFindAllByEntityId
     * @param entityId The id of the entity.  (required)
     * @param n Number of elements to return from query. Value must be 0 or positive. If 0, get all elements and first parameter value will be ignored.          (required)
     * @param first First element of query to be returned, for paging purposes. Value must be 0 or positive. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletFindAllByEntityIdCall(Integer entityId, Integer n, Integer first, String orderBy, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/findAllByEntityId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (n != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("n", n));
        if (first != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first", first));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletFindAllByEntityIdValidateBeforeCall(Integer entityId, Integer n, Integer first, String orderBy, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling walletFindAllByEntityId(Async)");
        }
        
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling walletFindAllByEntityId(Async)");
        }
        
        // verify the required parameter 'first' is set
        if (first == null) {
            throw new ApiException("Missing the required parameter 'first' when calling walletFindAllByEntityId(Async)");
        }
        
        // verify the required parameter 'orderBy' is set
        if (orderBy == null) {
            throw new ApiException("Missing the required parameter 'orderBy' when calling walletFindAllByEntityId(Async)");
        }
        

        com.squareup.okhttp.Call call = walletFindAllByEntityIdCall(entityId, n, first, orderBy, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return all the wallet availables by entity id, hierarchically.  
     * @param entityId The id of the entity.  (required)
     * @param n Number of elements to return from query. Value must be 0 or positive. If 0, get all elements and first parameter value will be ignored.          (required)
     * @param first First element of query to be returned, for paging purposes. Value must be 0 or positive. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return List&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Wallet> walletFindAllByEntityId(Integer entityId, Integer n, Integer first, String orderBy, Boolean withChildren) throws ApiException {
        ApiResponse<List<Wallet>> resp = walletFindAllByEntityIdWithHttpInfo(entityId, n, first, orderBy, withChildren);
        return resp.getData();
    }

    /**
     * 
     * Return all the wallet availables by entity id, hierarchically.  
     * @param entityId The id of the entity.  (required)
     * @param n Number of elements to return from query. Value must be 0 or positive. If 0, get all elements and first parameter value will be ignored.          (required)
     * @param first First element of query to be returned, for paging purposes. Value must be 0 or positive. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Wallet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Wallet>> walletFindAllByEntityIdWithHttpInfo(Integer entityId, Integer n, Integer first, String orderBy, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = walletFindAllByEntityIdValidateBeforeCall(entityId, n, first, orderBy, withChildren, null, null);
        Type localVarReturnType = new TypeToken<List<Wallet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all the wallet availables by entity id, hierarchically.  
     * @param entityId The id of the entity.  (required)
     * @param n Number of elements to return from query. Value must be 0 or positive. If 0, get all elements and first parameter value will be ignored.          (required)
     * @param first First element of query to be returned, for paging purposes. Value must be 0 or positive. If 0, start from first element.  (required)
     * @param orderBy Define order ASC or DESC  (required)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletFindAllByEntityIdAsync(Integer entityId, Integer n, Integer first, String orderBy, Boolean withChildren, final ApiCallback<List<Wallet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletFindAllByEntityIdValidateBeforeCall(entityId, n, first, orderBy, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Wallet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletFindById
     * @param entityId Wallet entity id. (required)
     * @param walletId The id of the wallet.  (optional)
     * @param extId The third party identifier of the wallet.  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletFindByIdCall(Integer entityId, Integer walletId, String extId, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityId", entityId));
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletFindByIdValidateBeforeCall(Integer entityId, Integer walletId, String extId, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling walletFindById(Async)");
        }
        

        com.squareup.okhttp.Call call = walletFindByIdCall(entityId, walletId, extId, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return a wallet availables by wallet id. 
     * @param entityId Wallet entity id. (required)
     * @param walletId The id of the wallet.  (optional)
     * @param extId The third party identifier of the wallet.  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return List&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Wallet> walletFindById(Integer entityId, Integer walletId, String extId, Boolean withChildren) throws ApiException {
        ApiResponse<List<Wallet>> resp = walletFindByIdWithHttpInfo(entityId, walletId, extId, withChildren);
        return resp.getData();
    }

    /**
     * 
     * Return a wallet availables by wallet id. 
     * @param entityId Wallet entity id. (required)
     * @param walletId The id of the wallet.  (optional)
     * @param extId The third party identifier of the wallet.  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @return ApiResponse&lt;List&lt;Wallet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Wallet>> walletFindByIdWithHttpInfo(Integer entityId, Integer walletId, String extId, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = walletFindByIdValidateBeforeCall(entityId, walletId, extId, withChildren, null, null);
        Type localVarReturnType = new TypeToken<List<Wallet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a wallet availables by wallet id. 
     * @param entityId Wallet entity id. (required)
     * @param walletId The id of the wallet.  (optional)
     * @param extId The third party identifier of the wallet.  (optional)
     * @param withChildren If true, find wallets for the entity and his children. If false, find wallets only for the entity. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletFindByIdAsync(Integer entityId, Integer walletId, String extId, Boolean withChildren, final ApiCallback<List<Wallet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletFindByIdValidateBeforeCall(entityId, walletId, extId, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Wallet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletRetryCancel
     * @param ticketIds Array ids ticket  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletRetryCancelCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ticketIds;

        // create path and map variables
        String localVarPath = "/wallet/retryCancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletRetryCancelValidateBeforeCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketIds' is set
        if (ticketIds == null) {
            throw new ApiException("Missing the required parameter 'ticketIds' when calling walletRetryCancel(Async)");
        }
        

        com.squareup.okhttp.Call call = walletRetryCancelCall(ticketIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> walletRetryCancel(List<Long> ticketIds) throws ApiException {
        ApiResponse<List<Object>> resp = walletRetryCancelWithHttpInfo(ticketIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> walletRetryCancelWithHttpInfo(List<Long> ticketIds) throws ApiException {
        com.squareup.okhttp.Call call = walletRetryCancelValidateBeforeCall(ticketIds, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticketIds Array ids ticket  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletRetryCancelAsync(List<Long> ticketIds, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletRetryCancelValidateBeforeCall(ticketIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletRetryPayout
     * @param ticketIds Array ids ticket  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletRetryPayoutCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ticketIds;

        // create path and map variables
        String localVarPath = "/wallet/retryPayout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletRetryPayoutValidateBeforeCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketIds' is set
        if (ticketIds == null) {
            throw new ApiException("Missing the required parameter 'ticketIds' when calling walletRetryPayout(Async)");
        }
        

        com.squareup.okhttp.Call call = walletRetryPayoutCall(ticketIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> walletRetryPayout(List<Long> ticketIds) throws ApiException {
        ApiResponse<List<Object>> resp = walletRetryPayoutWithHttpInfo(ticketIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> walletRetryPayoutWithHttpInfo(List<Long> ticketIds) throws ApiException {
        com.squareup.okhttp.Call call = walletRetryPayoutValidateBeforeCall(ticketIds, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticketIds Array ids ticket  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletRetryPayoutAsync(List<Long> ticketIds, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletRetryPayoutValidateBeforeCall(ticketIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletRetrySell
     * @param ticketIds Array ids ticket  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletRetrySellCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ticketIds;

        // create path and map variables
        String localVarPath = "/wallet/retrySell";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletRetrySellValidateBeforeCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketIds' is set
        if (ticketIds == null) {
            throw new ApiException("Missing the required parameter 'ticketIds' when calling walletRetrySell(Async)");
        }
        

        com.squareup.okhttp.Call call = walletRetrySellCall(ticketIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> walletRetrySell(List<Long> ticketIds) throws ApiException {
        ApiResponse<List<Object>> resp = walletRetrySellWithHttpInfo(ticketIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> walletRetrySellWithHttpInfo(List<Long> ticketIds) throws ApiException {
        com.squareup.okhttp.Call call = walletRetrySellValidateBeforeCall(ticketIds, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticketIds Array ids ticket  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletRetrySellAsync(List<Long> ticketIds, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletRetrySellValidateBeforeCall(ticketIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletRetrySolve
     * @param ticketIds Array ids ticket  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletRetrySolveCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ticketIds;

        // create path and map variables
        String localVarPath = "/wallet/retrySolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletRetrySolveValidateBeforeCall(List<Long> ticketIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ticketIds' is set
        if (ticketIds == null) {
            throw new ApiException("Missing the required parameter 'ticketIds' when calling walletRetrySolve(Async)");
        }
        

        com.squareup.okhttp.Call call = walletRetrySolveCall(ticketIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> walletRetrySolve(List<Long> ticketIds) throws ApiException {
        ApiResponse<List<Object>> resp = walletRetrySolveWithHttpInfo(ticketIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param ticketIds Array ids ticket  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> walletRetrySolveWithHttpInfo(List<Long> ticketIds) throws ApiException {
        com.squareup.okhttp.Call call = walletRetrySolveValidateBeforeCall(ticketIds, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param ticketIds Array ids ticket  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletRetrySolveAsync(List<Long> ticketIds, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletRetrySolveValidateBeforeCall(ticketIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for walletSet
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param status Status to be assigned to the wallet (enabled, disabled or deleted).  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call walletSetCall(Integer walletId, String status, String extId, String extData, Integer priority, String description, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (walletId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walletId", walletId));
        if (extId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extId", extId));
        if (extData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("extData", extData));
        if (priority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiDomain", "apiHash", "apiId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call walletSetValidateBeforeCall(Integer walletId, String status, String extId, String extData, Integer priority, String description, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'walletId' is set
        if (walletId == null) {
            throw new ApiException("Missing the required parameter 'walletId' when calling walletSet(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling walletSet(Async)");
        }
        

        com.squareup.okhttp.Call call = walletSetCall(walletId, status, extId, extData, priority, description, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Edition of a new wallet, whose currency (currencyIso), its external id (extId), the external information (extData), boolean for is a promotion (isPromotion) and the status of the wallet. - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - the status of the entity (enabled, disabled or deleted). 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param status Status to be assigned to the wallet (enabled, disabled or deleted).  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @return Wallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wallet walletSet(Integer walletId, String status, String extId, String extData, Integer priority, String description, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<Wallet> resp = walletSetWithHttpInfo(walletId, status, extId, extData, priority, description, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * Edition of a new wallet, whose currency (currencyIso), its external id (extId), the external information (extData), boolean for is a promotion (isPromotion) and the status of the wallet. - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - the status of the entity (enabled, disabled or deleted). 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param status Status to be assigned to the wallet (enabled, disabled or deleted).  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @return ApiResponse&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wallet> walletSetWithHttpInfo(Integer walletId, String status, String extId, String extData, Integer priority, String description, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = walletSetValidateBeforeCall(walletId, status, extId, extData, priority, description, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edition of a new wallet, whose currency (currencyIso), its external id (extId), the external information (extData), boolean for is a promotion (isPromotion) and the status of the wallet. - the external identifier (*extId*) - a JSON object that is used as Information repository on body request (*extData*) - the status of the entity (enabled, disabled or deleted). 
     * @param walletId Goldenrace wallet identifier.  (required)
     * @param status Status to be assigned to the wallet (enabled, disabled or deleted).  (required)
     * @param extId Third party wallet identifier.  (optional)
     * @param extData Third party Json type information with for example the initial balance.  (optional)
     * @param priority Signed integer, with priority of this wallet to be used when more than one wallet is available  (optional)
     * @param description Human readable wallet description, if not, default to currency code.  (optional)
     * @param startDate The date from which this wallet is operational.  (optional)
     * @param endDate The date until which this wallet is operational. Could be NULL  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call walletSetAsync(Integer walletId, String status, String extId, String extData, Integer priority, String description, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<Wallet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = walletSetValidateBeforeCall(walletId, status, extId, extData, priority, description, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
