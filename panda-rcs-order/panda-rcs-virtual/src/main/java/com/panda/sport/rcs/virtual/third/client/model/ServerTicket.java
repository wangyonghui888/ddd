/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.AdvancedTicketInfo;
import com.panda.sport.rcs.virtual.third.client.model.Currency;
import com.panda.sport.rcs.virtual.third.client.model.Entity;
import com.panda.sport.rcs.virtual.third.client.model.ServerTicketJackpotData;
import com.panda.sport.rcs.virtual.third.client.model.ServerTicketWinningData;
import com.panda.sport.rcs.virtual.third.client.model.ServerTicketWonData;
import com.panda.sport.rcs.virtual.third.client.model.TicketDetail;
import com.panda.sport.rcs.virtual.third.client.model.TicketStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Entity for receive ticket data from server 
 */
@ApiModel(description = "Entity for receive ticket data from server ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ServerTicket {
  @SerializedName("ticketId")
  private Long ticketId = null;

  @SerializedName("extId")
  private String extId = null;

  @SerializedName("extData")
  private Object extData = null;

  @SerializedName("serverHash")
  private String serverHash = null;

  @SerializedName("ip")
  private String ip = null;

  @SerializedName("unit")
  private Entity unit = null;

  @SerializedName("payStaff")
  private Entity payStaff = null;

  @SerializedName("sellStaff")
  private Entity sellStaff = null;

  @SerializedName("printEntity")
  private Entity printEntity = null;

  @SerializedName("walletId")
  private Long walletId = null;

  @SerializedName("promotionalWalletId")
  private Long promotionalWalletId = null;

  @SerializedName("timeSend")
  private OffsetDateTime timeSend = null;

  @SerializedName("timeRegister")
  private OffsetDateTime timeRegister = null;

  @SerializedName("timeResolved")
  private OffsetDateTime timeResolved = null;

  @SerializedName("timeCancelled")
  private OffsetDateTime timeCancelled = null;

  @SerializedName("timePaid")
  private OffsetDateTime timePaid = null;

  @SerializedName("timeClosedMarket")
  private OffsetDateTime timeClosedMarket = null;

  @SerializedName("timePrint")
  private OffsetDateTime timePrint = null;

  @SerializedName("status")
  private TicketStatus status = null;

  @SerializedName("currency")
  private Currency currency = null;

  @SerializedName("stake")
  private Double stake = null;

  @SerializedName("stakePromotional")
  private Double stakePromotional = null;

  @SerializedName("stakeTaxes")
  private Double stakeTaxes = null;

  @SerializedName("stakeTaxesPercent")
  private Double stakeTaxesPercent = null;

  @SerializedName("wonData")
  private ServerTicketWonData wonData = null;

  @SerializedName("winningData")
  private ServerTicketWinningData winningData = null;

  @SerializedName("oddSettingsId")
  private Integer oddSettingsId = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("calculationId")
  private Integer calculationId = null;

  @SerializedName("gameType")
  private List<String> gameType = null;

  @SerializedName("details")
  private TicketDetail details = null;

  @SerializedName("advancedInfo")
  private AdvancedTicketInfo advancedInfo = null;

  @SerializedName("jackpotData")
  private ServerTicketJackpotData jackpotData = null;

  public ServerTicket ticketId(Long ticketId) {
    this.ticketId = ticketId;
    return this;
  }

   /**
   * Get ticketId
   * @return ticketId
  **/
  @ApiModelProperty(value = "")
  public Long getTicketId() {
    return ticketId;
  }

  public void setTicketId(Long ticketId) {
    this.ticketId = ticketId;
  }

  public ServerTicket extId(String extId) {
    this.extId = extId;
    return this;
  }

   /**
   * Get extId
   * @return extId
  **/
  @ApiModelProperty(value = "")
  public String getExtId() {
    return extId;
  }

  public void setExtId(String extId) {
    this.extId = extId;
  }

  public ServerTicket extData(Object extData) {
    this.extData = extData;
    return this;
  }

   /**
   * Get extData
   * @return extData
  **/
  @ApiModelProperty(value = "")
  public Object getExtData() {
    return extData;
  }

  public void setExtData(Object extData) {
    this.extData = extData;
  }

  public ServerTicket serverHash(String serverHash) {
    this.serverHash = serverHash;
    return this;
  }

   /**
   * Get serverHash
   * @return serverHash
  **/
  @ApiModelProperty(value = "")
  public String getServerHash() {
    return serverHash;
  }

  public void setServerHash(String serverHash) {
    this.serverHash = serverHash;
  }

  public ServerTicket ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @ApiModelProperty(value = "")
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public ServerTicket unit(Entity unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @ApiModelProperty(value = "")
  public Entity getUnit() {
    return unit;
  }

  public void setUnit(Entity unit) {
    this.unit = unit;
  }

  public ServerTicket payStaff(Entity payStaff) {
    this.payStaff = payStaff;
    return this;
  }

   /**
   * Get payStaff
   * @return payStaff
  **/
  @ApiModelProperty(value = "")
  public Entity getPayStaff() {
    return payStaff;
  }

  public void setPayStaff(Entity payStaff) {
    this.payStaff = payStaff;
  }

  public ServerTicket sellStaff(Entity sellStaff) {
    this.sellStaff = sellStaff;
    return this;
  }

   /**
   * Get sellStaff
   * @return sellStaff
  **/
  @ApiModelProperty(value = "")
  public Entity getSellStaff() {
    return sellStaff;
  }

  public void setSellStaff(Entity sellStaff) {
    this.sellStaff = sellStaff;
  }

  public ServerTicket printEntity(Entity printEntity) {
    this.printEntity = printEntity;
    return this;
  }

   /**
   * Get printEntity
   * @return printEntity
  **/
  @ApiModelProperty(value = "")
  public Entity getPrintEntity() {
    return printEntity;
  }

  public void setPrintEntity(Entity printEntity) {
    this.printEntity = printEntity;
  }

  public ServerTicket walletId(Long walletId) {
    this.walletId = walletId;
    return this;
  }

   /**
   * The detault wallet identifier, from SellRequest. Not to be used for accounting. For non-promotional stake and receive final payment in auto payment. 
   * @return walletId
  **/
  @ApiModelProperty(value = "The detault wallet identifier, from SellRequest. Not to be used for accounting. For non-promotional stake and receive final payment in auto payment. ")
  public Long getWalletId() {
    return walletId;
  }

  public void setWalletId(Long walletId) {
    this.walletId = walletId;
  }

  public ServerTicket promotionalWalletId(Long promotionalWalletId) {
    this.promotionalWalletId = promotionalWalletId;
    return this;
  }

   /**
   * The default promotional wallet identifier, from SellRequest. Not to be used for accounting. To extract promotionalStake. 
   * @return promotionalWalletId
  **/
  @ApiModelProperty(value = "The default promotional wallet identifier, from SellRequest. Not to be used for accounting. To extract promotionalStake. ")
  public Long getPromotionalWalletId() {
    return promotionalWalletId;
  }

  public void setPromotionalWalletId(Long promotionalWalletId) {
    this.promotionalWalletId = promotionalWalletId;
  }

  public ServerTicket timeSend(OffsetDateTime timeSend) {
    this.timeSend = timeSend;
    return this;
  }

   /**
   * Timestamp (on client side) timestamp in RFC3339 / ISO_8601 format. Precission in milliseconds. for current ticket, used as transaction id, as no more than 2 tickets are allowed to be created on same timestamp. 
   * @return timeSend
  **/
  @ApiModelProperty(value = "Timestamp (on client side) timestamp in RFC3339 / ISO_8601 format. Precission in milliseconds. for current ticket, used as transaction id, as no more than 2 tickets are allowed to be created on same timestamp. ")
  public OffsetDateTime getTimeSend() {
    return timeSend;
  }

  public void setTimeSend(OffsetDateTime timeSend) {
    this.timeSend = timeSend;
  }

  public ServerTicket timeRegister(OffsetDateTime timeRegister) {
    this.timeRegister = timeRegister;
    return this;
  }

   /**
   * Get timeRegister
   * @return timeRegister
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimeRegister() {
    return timeRegister;
  }

  public void setTimeRegister(OffsetDateTime timeRegister) {
    this.timeRegister = timeRegister;
  }

  public ServerTicket timeResolved(OffsetDateTime timeResolved) {
    this.timeResolved = timeResolved;
    return this;
  }

   /**
   * Get timeResolved
   * @return timeResolved
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimeResolved() {
    return timeResolved;
  }

  public void setTimeResolved(OffsetDateTime timeResolved) {
    this.timeResolved = timeResolved;
  }

  public ServerTicket timeCancelled(OffsetDateTime timeCancelled) {
    this.timeCancelled = timeCancelled;
    return this;
  }

   /**
   * Get timeCancelled
   * @return timeCancelled
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimeCancelled() {
    return timeCancelled;
  }

  public void setTimeCancelled(OffsetDateTime timeCancelled) {
    this.timeCancelled = timeCancelled;
  }

  public ServerTicket timePaid(OffsetDateTime timePaid) {
    this.timePaid = timePaid;
    return this;
  }

   /**
   * Get timePaid
   * @return timePaid
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimePaid() {
    return timePaid;
  }

  public void setTimePaid(OffsetDateTime timePaid) {
    this.timePaid = timePaid;
  }

  public ServerTicket timeClosedMarket(OffsetDateTime timeClosedMarket) {
    this.timeClosedMarket = timeClosedMarket;
    return this;
  }

   /**
   * Get timeClosedMarket
   * @return timeClosedMarket
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimeClosedMarket() {
    return timeClosedMarket;
  }

  public void setTimeClosedMarket(OffsetDateTime timeClosedMarket) {
    this.timeClosedMarket = timeClosedMarket;
  }

  public ServerTicket timePrint(OffsetDateTime timePrint) {
    this.timePrint = timePrint;
    return this;
  }

   /**
   * Get timePrint
   * @return timePrint
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimePrint() {
    return timePrint;
  }

  public void setTimePrint(OffsetDateTime timePrint) {
    this.timePrint = timePrint;
  }

  public ServerTicket status(TicketStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public TicketStatus getStatus() {
    return status;
  }

  public void setStatus(TicketStatus status) {
    this.status = status;
  }

  public ServerTicket currency(Currency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }

  public ServerTicket stake(Double stake) {
    this.stake = stake;
    return this;
  }

   /**
   * Amount without taxes.
   * @return stake
  **/
  @ApiModelProperty(value = "Amount without taxes.")
  public Double getStake() {
    return stake;
  }

  public void setStake(Double stake) {
    this.stake = stake;
  }

  public ServerTicket stakePromotional(Double stakePromotional) {
    this.stakePromotional = stakePromotional;
    return this;
  }

   /**
   * Promotional stake, should not be included in the winning amounts for winning bets.  In the scenario, that a ticket is mixed between real and promotional stake, the proportion between promotional / total stake, should be deducted from the winning. As a result total winning should be equivalent to: winning &#x3D; stake * ( odd - (stakePromotional/stake) ) For normal tickets:                                winning &#x3D; stake * odd For 100% promotional  tickets:                     winning &#x3D; stake * ( odd - 1 )      This works, when evaluated for every single stake, for an aggregated winning of multiple bets, we should deduct the proportional amount:   - expectedWinningStake &#x3D; stake * (winningCombis/totalCombis)   - expectedWinningPromo &#x3D; expectedWinning  - stakePromotional * (expectedWinningStake/stake) 
   * @return stakePromotional
  **/
  @ApiModelProperty(value = "Promotional stake, should not be included in the winning amounts for winning bets.  In the scenario, that a ticket is mixed between real and promotional stake, the proportion between promotional / total stake, should be deducted from the winning. As a result total winning should be equivalent to: winning = stake * ( odd - (stakePromotional/stake) ) For normal tickets:                                winning = stake * odd For 100% promotional  tickets:                     winning = stake * ( odd - 1 )      This works, when evaluated for every single stake, for an aggregated winning of multiple bets, we should deduct the proportional amount:   - expectedWinningStake = stake * (winningCombis/totalCombis)   - expectedWinningPromo = expectedWinning  - stakePromotional * (expectedWinningStake/stake) ")
  public Double getStakePromotional() {
    return stakePromotional;
  }

  public void setStakePromotional(Double stakePromotional) {
    this.stakePromotional = stakePromotional;
  }

  public ServerTicket stakeTaxes(Double stakeTaxes) {
    this.stakeTaxes = stakeTaxes;
    return this;
  }

   /**
   * Total amount already paid by player on stake, in addition to total stake amount.
   * @return stakeTaxes
  **/
  @ApiModelProperty(value = "Total amount already paid by player on stake, in addition to total stake amount.")
  public Double getStakeTaxes() {
    return stakeTaxes;
  }

  public void setStakeTaxes(Double stakeTaxes) {
    this.stakeTaxes = stakeTaxes;
  }

  public ServerTicket stakeTaxesPercent(Double stakeTaxesPercent) {
    this.stakeTaxesPercent = stakeTaxesPercent;
    return this;
  }

   /**
   * Get stakeTaxesPercent
   * @return stakeTaxesPercent
  **/
  @ApiModelProperty(value = "")
  public Double getStakeTaxesPercent() {
    return stakeTaxesPercent;
  }

  public void setStakeTaxesPercent(Double stakeTaxesPercent) {
    this.stakeTaxesPercent = stakeTaxesPercent;
  }

  public ServerTicket wonData(ServerTicketWonData wonData) {
    this.wonData = wonData;
    return this;
  }

   /**
   * Get wonData
   * @return wonData
  **/
  @ApiModelProperty(value = "")
  public ServerTicketWonData getWonData() {
    return wonData;
  }

  public void setWonData(ServerTicketWonData wonData) {
    this.wonData = wonData;
  }

  public ServerTicket winningData(ServerTicketWinningData winningData) {
    this.winningData = winningData;
    return this;
  }

   /**
   * Get winningData
   * @return winningData
  **/
  @ApiModelProperty(value = "")
  public ServerTicketWinningData getWinningData() {
    return winningData;
  }

  public void setWinningData(ServerTicketWinningData winningData) {
    this.winningData = winningData;
  }

  public ServerTicket oddSettingsId(Integer oddSettingsId) {
    this.oddSettingsId = oddSettingsId;
    return this;
  }

   /**
   * Get oddSettingsId
   * @return oddSettingsId
  **/
  @ApiModelProperty(value = "")
  public Integer getOddSettingsId() {
    return oddSettingsId;
  }

  public void setOddSettingsId(Integer oddSettingsId) {
    this.oddSettingsId = oddSettingsId;
  }

  public ServerTicket tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ServerTicket addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Array tags.
   * @return tags
  **/
  @ApiModelProperty(value = "Array tags.")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public ServerTicket calculationId(Integer calculationId) {
    this.calculationId = calculationId;
    return this;
  }

   /**
   * Get calculationId
   * @return calculationId
  **/
  @ApiModelProperty(value = "")
  public Integer getCalculationId() {
    return calculationId;
  }

  public void setCalculationId(Integer calculationId) {
    this.calculationId = calculationId;
  }

  public ServerTicket gameType(List<String> gameType) {
    this.gameType = gameType;
    return this;
  }

  public ServerTicket addGameTypeItem(String gameTypeItem) {
    if (this.gameType == null) {
      this.gameType = new ArrayList<String>();
    }
    this.gameType.add(gameTypeItem);
    return this;
  }

   /**
   * A ticket can have more than one type of game when we place bets on events of different games (old MultiEvent (ME))
   * @return gameType
  **/
  @ApiModelProperty(value = "A ticket can have more than one type of game when we place bets on events of different games (old MultiEvent (ME))")
  public List<String> getGameType() {
    return gameType;
  }

  public void setGameType(List<String> gameType) {
    this.gameType = gameType;
  }

  public ServerTicket details(TicketDetail details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @ApiModelProperty(value = "")
  public TicketDetail getDetails() {
    return details;
  }

  public void setDetails(TicketDetail details) {
    this.details = details;
  }

  public ServerTicket advancedInfo(AdvancedTicketInfo advancedInfo) {
    this.advancedInfo = advancedInfo;
    return this;
  }

   /**
   * Get advancedInfo
   * @return advancedInfo
  **/
  @ApiModelProperty(value = "")
  public AdvancedTicketInfo getAdvancedInfo() {
    return advancedInfo;
  }

  public void setAdvancedInfo(AdvancedTicketInfo advancedInfo) {
    this.advancedInfo = advancedInfo;
  }

  public ServerTicket jackpotData(ServerTicketJackpotData jackpotData) {
    this.jackpotData = jackpotData;
    return this;
  }

   /**
   * Get jackpotData
   * @return jackpotData
  **/
  @ApiModelProperty(value = "")
  public ServerTicketJackpotData getJackpotData() {
    return jackpotData;
  }

  public void setJackpotData(ServerTicketJackpotData jackpotData) {
    this.jackpotData = jackpotData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerTicket serverTicket = (ServerTicket) o;
    return Objects.equals(this.ticketId, serverTicket.ticketId) &&
        Objects.equals(this.extId, serverTicket.extId) &&
        Objects.equals(this.extData, serverTicket.extData) &&
        Objects.equals(this.serverHash, serverTicket.serverHash) &&
        Objects.equals(this.ip, serverTicket.ip) &&
        Objects.equals(this.unit, serverTicket.unit) &&
        Objects.equals(this.payStaff, serverTicket.payStaff) &&
        Objects.equals(this.sellStaff, serverTicket.sellStaff) &&
        Objects.equals(this.printEntity, serverTicket.printEntity) &&
        Objects.equals(this.walletId, serverTicket.walletId) &&
        Objects.equals(this.promotionalWalletId, serverTicket.promotionalWalletId) &&
        Objects.equals(this.timeSend, serverTicket.timeSend) &&
        Objects.equals(this.timeRegister, serverTicket.timeRegister) &&
        Objects.equals(this.timeResolved, serverTicket.timeResolved) &&
        Objects.equals(this.timeCancelled, serverTicket.timeCancelled) &&
        Objects.equals(this.timePaid, serverTicket.timePaid) &&
        Objects.equals(this.timeClosedMarket, serverTicket.timeClosedMarket) &&
        Objects.equals(this.timePrint, serverTicket.timePrint) &&
        Objects.equals(this.status, serverTicket.status) &&
        Objects.equals(this.currency, serverTicket.currency) &&
        Objects.equals(this.stake, serverTicket.stake) &&
        Objects.equals(this.stakePromotional, serverTicket.stakePromotional) &&
        Objects.equals(this.stakeTaxes, serverTicket.stakeTaxes) &&
        Objects.equals(this.stakeTaxesPercent, serverTicket.stakeTaxesPercent) &&
        Objects.equals(this.wonData, serverTicket.wonData) &&
        Objects.equals(this.winningData, serverTicket.winningData) &&
        Objects.equals(this.oddSettingsId, serverTicket.oddSettingsId) &&
        Objects.equals(this.tags, serverTicket.tags) &&
        Objects.equals(this.calculationId, serverTicket.calculationId) &&
        Objects.equals(this.gameType, serverTicket.gameType) &&
        Objects.equals(this.details, serverTicket.details) &&
        Objects.equals(this.advancedInfo, serverTicket.advancedInfo) &&
        Objects.equals(this.jackpotData, serverTicket.jackpotData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticketId, extId, extData, serverHash, ip, unit, payStaff, sellStaff, printEntity, walletId, promotionalWalletId, timeSend, timeRegister, timeResolved, timeCancelled, timePaid, timeClosedMarket, timePrint, status, currency, stake, stakePromotional, stakeTaxes, stakeTaxesPercent, wonData, winningData, oddSettingsId, tags, calculationId, gameType, details, advancedInfo, jackpotData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerTicket {\n");
    
    sb.append("    ticketId: ").append(toIndentedString(ticketId)).append("\n");
    sb.append("    extId: ").append(toIndentedString(extId)).append("\n");
    sb.append("    extData: ").append(toIndentedString(extData)).append("\n");
    sb.append("    serverHash: ").append(toIndentedString(serverHash)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    payStaff: ").append(toIndentedString(payStaff)).append("\n");
    sb.append("    sellStaff: ").append(toIndentedString(sellStaff)).append("\n");
    sb.append("    printEntity: ").append(toIndentedString(printEntity)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    promotionalWalletId: ").append(toIndentedString(promotionalWalletId)).append("\n");
    sb.append("    timeSend: ").append(toIndentedString(timeSend)).append("\n");
    sb.append("    timeRegister: ").append(toIndentedString(timeRegister)).append("\n");
    sb.append("    timeResolved: ").append(toIndentedString(timeResolved)).append("\n");
    sb.append("    timeCancelled: ").append(toIndentedString(timeCancelled)).append("\n");
    sb.append("    timePaid: ").append(toIndentedString(timePaid)).append("\n");
    sb.append("    timeClosedMarket: ").append(toIndentedString(timeClosedMarket)).append("\n");
    sb.append("    timePrint: ").append(toIndentedString(timePrint)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    stake: ").append(toIndentedString(stake)).append("\n");
    sb.append("    stakePromotional: ").append(toIndentedString(stakePromotional)).append("\n");
    sb.append("    stakeTaxes: ").append(toIndentedString(stakeTaxes)).append("\n");
    sb.append("    stakeTaxesPercent: ").append(toIndentedString(stakeTaxesPercent)).append("\n");
    sb.append("    wonData: ").append(toIndentedString(wonData)).append("\n");
    sb.append("    winningData: ").append(toIndentedString(winningData)).append("\n");
    sb.append("    oddSettingsId: ").append(toIndentedString(oddSettingsId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    calculationId: ").append(toIndentedString(calculationId)).append("\n");
    sb.append("    gameType: ").append(toIndentedString(gameType)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    advancedInfo: ").append(toIndentedString(advancedInfo)).append("\n");
    sb.append("    jackpotData: ").append(toIndentedString(jackpotData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

