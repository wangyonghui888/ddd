/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Object to describe the error response of any API request. 
 */
@ApiModel(description = "Object to describe the error response of any API request. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ErrorInfo {
  /**
   * Error ambit 
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    CONNECTION("CONNECTION"),
    
    PROXY("PROXY"),
    
    SERVER("SERVER"),
    
    CLIENT("CLIENT");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scope")
  private ScopeEnum scope = null;

  @SerializedName("resource")
  private String resource = null;

  @SerializedName("errorCode")
  private String errorCode = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("param")
  private Object param = null;

  @SerializedName("extData")
  private Object extData = null;

  @SerializedName("expiredTime")
  private BigDecimal expiredTime = null;

  public ErrorInfo scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Error ambit 
   * @return scope
  **/
  @ApiModelProperty(value = "Error ambit ")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public ErrorInfo resource(String resource) {
    this.resource = resource;
    return this;
  }

   /**
   * Resource that generates error. I.E: /ticket/send 
   * @return resource
  **/
  @ApiModelProperty(value = "Resource that generates error. I.E: /ticket/send ")
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }

  public ErrorInfo errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * HTTP error code. &#39;200&#39; if no error 
   * @return errorCode
  **/
  @ApiModelProperty(required = true, value = "HTTP error code. '200' if no error ")
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  public ErrorInfo message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Unique tag for view and traductions purpose  
   * @return message
  **/
  @ApiModelProperty(value = "Unique tag for view and traductions purpose  ")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ErrorInfo param(Object param) {
    this.param = param;
    return this;
  }

   /**
   * Parameter for the error, if needed   
   * @return param
  **/
  @ApiModelProperty(value = "Parameter for the error, if needed   ")
  public Object getParam() {
    return param;
  }

  public void setParam(Object param) {
    this.param = param;
  }

  public ErrorInfo extData(Object extData) {
    this.extData = extData;
    return this;
  }

   /**
   * Third party external data. 
   * @return extData
  **/
  @ApiModelProperty(value = "Third party external data. ")
  public Object getExtData() {
    return extData;
  }

  public void setExtData(Object extData) {
    this.extData = extData;
  }

  public ErrorInfo expiredTime(BigDecimal expiredTime) {
    this.expiredTime = expiredTime;
    return this;
  }

   /**
   * The time until the response is valid. When this time will pass, the user can retry the call to receive  new information. In case that the value is equal 0 means that this response will not change. 
   * @return expiredTime
  **/
  @ApiModelProperty(value = "The time until the response is valid. When this time will pass, the user can retry the call to receive  new information. In case that the value is equal 0 means that this response will not change. ")
  public BigDecimal getExpiredTime() {
    return expiredTime;
  }

  public void setExpiredTime(BigDecimal expiredTime) {
    this.expiredTime = expiredTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorInfo errorInfo = (ErrorInfo) o;
    return Objects.equals(this.scope, errorInfo.scope) &&
        Objects.equals(this.resource, errorInfo.resource) &&
        Objects.equals(this.errorCode, errorInfo.errorCode) &&
        Objects.equals(this.message, errorInfo.message) &&
        Objects.equals(this.param, errorInfo.param) &&
        Objects.equals(this.extData, errorInfo.extData) &&
        Objects.equals(this.expiredTime, errorInfo.expiredTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, resource, errorCode, message, param, extData, expiredTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorInfo {\n");
    
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    extData: ").append(toIndentedString(extData)).append("\n");
    sb.append("    expiredTime: ").append(toIndentedString(expiredTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

