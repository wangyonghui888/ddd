/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.TickerGameSetting;
import com.panda.sport.rcs.virtual.third.client.model.ViewerProfileGameSettings;
import java.io.IOException;
import java.util.List;

/**
 * Ch Viewer Profile Game Settings 
 */
@ApiModel(description = "Ch Viewer Profile Game Settings ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class ChViewerProfileGameSettings extends ViewerProfileGameSettings {
  /**
   * Mode in which the live score will be shown in the football state ingame. 
   */
  @JsonAdapter(IngameLivescoreModeEnum.Adapter.class)
  public enum IngameLivescoreModeEnum {
    DOWN("DOWN"),
    
    RIGHT("RIGHT"),
    
    FULL_SCREEN("FULL_SCREEN");

    private String value;

    IngameLivescoreModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IngameLivescoreModeEnum fromValue(String text) {
      for (IngameLivescoreModeEnum b : IngameLivescoreModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IngameLivescoreModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IngameLivescoreModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IngameLivescoreModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IngameLivescoreModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ingameLivescoreMode")
  private IngameLivescoreModeEnum ingameLivescoreMode = null;

  /**
   * Type of soccer team emblem that will be shown in the different states. 
   */
  @JsonAdapter(EmblemTypeEnum.Adapter.class)
  public enum EmblemTypeEnum {
    NONE("NONE"),
    
    BADGE("BADGE");

    private String value;

    EmblemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmblemTypeEnum fromValue(String text) {
      for (EmblemTypeEnum b : EmblemTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EmblemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmblemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmblemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EmblemTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("emblemType")
  private EmblemTypeEnum emblemType = null;

  /**
   * Type of soccer team text representation to be shown. When 3_LETTERS selected will show the three letters of fifa code. When FULL_TEAM_NAME selected will show the full team name text translation. 
   */
  @JsonAdapter(TeamNameTextTypeEnum.Adapter.class)
  public enum TeamNameTextTypeEnum {
    _3_LETTERS("3_LETTERS"),
    
    FULL_TEAM_NAME("FULL_TEAM_NAME");

    private String value;

    TeamNameTextTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TeamNameTextTypeEnum fromValue(String text) {
      for (TeamNameTextTypeEnum b : TeamNameTextTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TeamNameTextTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TeamNameTextTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TeamNameTextTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TeamNameTextTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("teamNameTextType")
  private TeamNameTextTypeEnum teamNameTextType = null;

  public ChViewerProfileGameSettings ingameLivescoreMode(IngameLivescoreModeEnum ingameLivescoreMode) {
    this.ingameLivescoreMode = ingameLivescoreMode;
    return this;
  }

   /**
   * Mode in which the live score will be shown in the football state ingame. 
   * @return ingameLivescoreMode
  **/
  @ApiModelProperty(value = "Mode in which the live score will be shown in the football state ingame. ")
  public IngameLivescoreModeEnum getIngameLivescoreMode() {
    return ingameLivescoreMode;
  }

  public void setIngameLivescoreMode(IngameLivescoreModeEnum ingameLivescoreMode) {
    this.ingameLivescoreMode = ingameLivescoreMode;
  }

  public ChViewerProfileGameSettings emblemType(EmblemTypeEnum emblemType) {
    this.emblemType = emblemType;
    return this;
  }

   /**
   * Type of soccer team emblem that will be shown in the different states. 
   * @return emblemType
  **/
  @ApiModelProperty(value = "Type of soccer team emblem that will be shown in the different states. ")
  public EmblemTypeEnum getEmblemType() {
    return emblemType;
  }

  public void setEmblemType(EmblemTypeEnum emblemType) {
    this.emblemType = emblemType;
  }

  public ChViewerProfileGameSettings teamNameTextType(TeamNameTextTypeEnum teamNameTextType) {
    this.teamNameTextType = teamNameTextType;
    return this;
  }

   /**
   * Type of soccer team text representation to be shown. When 3_LETTERS selected will show the three letters of fifa code. When FULL_TEAM_NAME selected will show the full team name text translation. 
   * @return teamNameTextType
  **/
  @ApiModelProperty(value = "Type of soccer team text representation to be shown. When 3_LETTERS selected will show the three letters of fifa code. When FULL_TEAM_NAME selected will show the full team name text translation. ")
  public TeamNameTextTypeEnum getTeamNameTextType() {
    return teamNameTextType;
  }

  public void setTeamNameTextType(TeamNameTextTypeEnum teamNameTextType) {
    this.teamNameTextType = teamNameTextType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChViewerProfileGameSettings chViewerProfileGameSettings = (ChViewerProfileGameSettings) o;
    return Objects.equals(this.ingameLivescoreMode, chViewerProfileGameSettings.ingameLivescoreMode) &&
        Objects.equals(this.emblemType, chViewerProfileGameSettings.emblemType) &&
        Objects.equals(this.teamNameTextType, chViewerProfileGameSettings.teamNameTextType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ingameLivescoreMode, emblemType, teamNameTextType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChViewerProfileGameSettings {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    ingameLivescoreMode: ").append(toIndentedString(ingameLivescoreMode)).append("\n");
    sb.append("    emblemType: ").append(toIndentedString(emblemType)).append("\n");
    sb.append("    teamNameTextType: ").append(toIndentedString(teamNameTextType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

