/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Profile focused on everything related to ticket printing. It is used for retail. 
 */
@ApiModel(description = "Profile focused on everything related to ticket printing. It is used for retail. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class PrintProfileSettings {
  @SerializedName("ticketPromotionalText")
  private String ticketPromotionalText = null;

  @SerializedName("ticketTopUrl")
  private String ticketTopUrl = null;

  @SerializedName("headerTicketText01")
  private String headerTicketText01 = null;

  @SerializedName("headerTicketText02")
  private String headerTicketText02 = null;

  @SerializedName("headerTicketText03")
  private String headerTicketText03 = null;

  @SerializedName("bottomTicketText01")
  private String bottomTicketText01 = null;

  @SerializedName("bottomTicketText02")
  private String bottomTicketText02 = null;

  @SerializedName("bottomTicketText03")
  private String bottomTicketText03 = null;

  @SerializedName("legalText")
  private String legalText = null;

  @SerializedName("printCompactTickets")
  private Boolean printCompactTickets = null;

  @SerializedName("showUnitName")
  private Boolean showUnitName = null;

  /**
   * Ticket print anchor format 
   */
  @JsonAdapter(TicketFormatEnum.Adapter.class)
  public enum TicketFormatEnum {
    MM80("MM80"),
    
    MM58("MM58"),
    
    A6("A6");

    private String value;

    TicketFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TicketFormatEnum fromValue(String text) {
      for (TicketFormatEnum b : TicketFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TicketFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TicketFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TicketFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TicketFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ticketFormat")
  private TicketFormatEnum ticketFormat = null;

  /**
   * Mode in which it will be checked if a ticket is won or not 
   */
  @JsonAdapter(CheckTicketModeEnum.Adapter.class)
  public enum CheckTicketModeEnum {
    BARCODE("BARCODE");

    private String value;

    CheckTicketModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckTicketModeEnum fromValue(String text) {
      for (CheckTicketModeEnum b : CheckTicketModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CheckTicketModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckTicketModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckTicketModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CheckTicketModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("checkTicketMode")
  private CheckTicketModeEnum checkTicketMode = null;

  @SerializedName("showMaxPayout")
  private Boolean showMaxPayout = null;

  @SerializedName("printMaxWinPerTip")
  private Boolean printMaxWinPerTip = null;

  public PrintProfileSettings ticketPromotionalText(String ticketPromotionalText) {
    this.ticketPromotionalText = ticketPromotionalText;
    return this;
  }

   /**
   * In this field, the customer can configure a promotional text that will appear at the bottom of the ticket 
   * @return ticketPromotionalText
  **/
  @ApiModelProperty(value = "In this field, the customer can configure a promotional text that will appear at the bottom of the ticket ")
  public String getTicketPromotionalText() {
    return ticketPromotionalText;
  }

  public void setTicketPromotionalText(String ticketPromotionalText) {
    this.ticketPromotionalText = ticketPromotionalText;
  }

  public PrintProfileSettings ticketTopUrl(String ticketTopUrl) {
    this.ticketTopUrl = ticketTopUrl;
    return this;
  }

   /**
   * Url to ticket´s header 
   * @return ticketTopUrl
  **/
  @ApiModelProperty(value = "Url to ticket´s header ")
  public String getTicketTopUrl() {
    return ticketTopUrl;
  }

  public void setTicketTopUrl(String ticketTopUrl) {
    this.ticketTopUrl = ticketTopUrl;
  }

  public PrintProfileSettings headerTicketText01(String headerTicketText01) {
    this.headerTicketText01 = headerTicketText01;
    return this;
  }

   /**
   * First line Header ticket text 
   * @return headerTicketText01
  **/
  @ApiModelProperty(value = "First line Header ticket text ")
  public String getHeaderTicketText01() {
    return headerTicketText01;
  }

  public void setHeaderTicketText01(String headerTicketText01) {
    this.headerTicketText01 = headerTicketText01;
  }

  public PrintProfileSettings headerTicketText02(String headerTicketText02) {
    this.headerTicketText02 = headerTicketText02;
    return this;
  }

   /**
   * Second line Header ticket text 
   * @return headerTicketText02
  **/
  @ApiModelProperty(value = "Second line Header ticket text ")
  public String getHeaderTicketText02() {
    return headerTicketText02;
  }

  public void setHeaderTicketText02(String headerTicketText02) {
    this.headerTicketText02 = headerTicketText02;
  }

  public PrintProfileSettings headerTicketText03(String headerTicketText03) {
    this.headerTicketText03 = headerTicketText03;
    return this;
  }

   /**
   * Third line Header ticket text 
   * @return headerTicketText03
  **/
  @ApiModelProperty(value = "Third line Header ticket text ")
  public String getHeaderTicketText03() {
    return headerTicketText03;
  }

  public void setHeaderTicketText03(String headerTicketText03) {
    this.headerTicketText03 = headerTicketText03;
  }

  public PrintProfileSettings bottomTicketText01(String bottomTicketText01) {
    this.bottomTicketText01 = bottomTicketText01;
    return this;
  }

   /**
   * First line Bottom ticket text 
   * @return bottomTicketText01
  **/
  @ApiModelProperty(value = "First line Bottom ticket text ")
  public String getBottomTicketText01() {
    return bottomTicketText01;
  }

  public void setBottomTicketText01(String bottomTicketText01) {
    this.bottomTicketText01 = bottomTicketText01;
  }

  public PrintProfileSettings bottomTicketText02(String bottomTicketText02) {
    this.bottomTicketText02 = bottomTicketText02;
    return this;
  }

   /**
   * Second line Bottom ticket text 
   * @return bottomTicketText02
  **/
  @ApiModelProperty(value = "Second line Bottom ticket text ")
  public String getBottomTicketText02() {
    return bottomTicketText02;
  }

  public void setBottomTicketText02(String bottomTicketText02) {
    this.bottomTicketText02 = bottomTicketText02;
  }

  public PrintProfileSettings bottomTicketText03(String bottomTicketText03) {
    this.bottomTicketText03 = bottomTicketText03;
    return this;
  }

   /**
   * Third line Bottom ticket text 
   * @return bottomTicketText03
  **/
  @ApiModelProperty(value = "Third line Bottom ticket text ")
  public String getBottomTicketText03() {
    return bottomTicketText03;
  }

  public void setBottomTicketText03(String bottomTicketText03) {
    this.bottomTicketText03 = bottomTicketText03;
  }

  public PrintProfileSettings legalText(String legalText) {
    this.legalText = legalText;
    return this;
  }

   /**
   * Legal Text Ticket 
   * @return legalText
  **/
  @ApiModelProperty(value = "Legal Text Ticket ")
  public String getLegalText() {
    return legalText;
  }

  public void setLegalText(String legalText) {
    this.legalText = legalText;
  }

  public PrintProfileSettings printCompactTickets(Boolean printCompactTickets) {
    this.printCompactTickets = printCompactTickets;
    return this;
  }

   /**
   * Allow the cashier to print tickets in compact mode to save printing paper          
   * @return printCompactTickets
  **/
  @ApiModelProperty(value = "Allow the cashier to print tickets in compact mode to save printing paper          ")
  public Boolean isPrintCompactTickets() {
    return printCompactTickets;
  }

  public void setPrintCompactTickets(Boolean printCompactTickets) {
    this.printCompactTickets = printCompactTickets;
  }

  public PrintProfileSettings showUnitName(Boolean showUnitName) {
    this.showUnitName = showUnitName;
    return this;
  }

   /**
   * Show entity name in bet ticket. 
   * @return showUnitName
  **/
  @ApiModelProperty(value = "Show entity name in bet ticket. ")
  public Boolean isShowUnitName() {
    return showUnitName;
  }

  public void setShowUnitName(Boolean showUnitName) {
    this.showUnitName = showUnitName;
  }

  public PrintProfileSettings ticketFormat(TicketFormatEnum ticketFormat) {
    this.ticketFormat = ticketFormat;
    return this;
  }

   /**
   * Ticket print anchor format 
   * @return ticketFormat
  **/
  @ApiModelProperty(value = "Ticket print anchor format ")
  public TicketFormatEnum getTicketFormat() {
    return ticketFormat;
  }

  public void setTicketFormat(TicketFormatEnum ticketFormat) {
    this.ticketFormat = ticketFormat;
  }

  public PrintProfileSettings checkTicketMode(CheckTicketModeEnum checkTicketMode) {
    this.checkTicketMode = checkTicketMode;
    return this;
  }

   /**
   * Mode in which it will be checked if a ticket is won or not 
   * @return checkTicketMode
  **/
  @ApiModelProperty(value = "Mode in which it will be checked if a ticket is won or not ")
  public CheckTicketModeEnum getCheckTicketMode() {
    return checkTicketMode;
  }

  public void setCheckTicketMode(CheckTicketModeEnum checkTicketMode) {
    this.checkTicketMode = checkTicketMode;
  }

  public PrintProfileSettings showMaxPayout(Boolean showMaxPayout) {
    this.showMaxPayout = showMaxPayout;
    return this;
  }

   /**
   * Show max payout on bet printed ticket 
   * @return showMaxPayout
  **/
  @ApiModelProperty(value = "Show max payout on bet printed ticket ")
  public Boolean isShowMaxPayout() {
    return showMaxPayout;
  }

  public void setShowMaxPayout(Boolean showMaxPayout) {
    this.showMaxPayout = showMaxPayout;
  }

  public PrintProfileSettings printMaxWinPerTip(Boolean printMaxWinPerTip) {
    this.printMaxWinPerTip = printMaxWinPerTip;
    return this;
  }

   /**
   * Show max winning per tip on races tickets. 
   * @return printMaxWinPerTip
  **/
  @ApiModelProperty(value = "Show max winning per tip on races tickets. ")
  public Boolean isPrintMaxWinPerTip() {
    return printMaxWinPerTip;
  }

  public void setPrintMaxWinPerTip(Boolean printMaxWinPerTip) {
    this.printMaxWinPerTip = printMaxWinPerTip;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrintProfileSettings printProfileSettings = (PrintProfileSettings) o;
    return Objects.equals(this.ticketPromotionalText, printProfileSettings.ticketPromotionalText) &&
        Objects.equals(this.ticketTopUrl, printProfileSettings.ticketTopUrl) &&
        Objects.equals(this.headerTicketText01, printProfileSettings.headerTicketText01) &&
        Objects.equals(this.headerTicketText02, printProfileSettings.headerTicketText02) &&
        Objects.equals(this.headerTicketText03, printProfileSettings.headerTicketText03) &&
        Objects.equals(this.bottomTicketText01, printProfileSettings.bottomTicketText01) &&
        Objects.equals(this.bottomTicketText02, printProfileSettings.bottomTicketText02) &&
        Objects.equals(this.bottomTicketText03, printProfileSettings.bottomTicketText03) &&
        Objects.equals(this.legalText, printProfileSettings.legalText) &&
        Objects.equals(this.printCompactTickets, printProfileSettings.printCompactTickets) &&
        Objects.equals(this.showUnitName, printProfileSettings.showUnitName) &&
        Objects.equals(this.ticketFormat, printProfileSettings.ticketFormat) &&
        Objects.equals(this.checkTicketMode, printProfileSettings.checkTicketMode) &&
        Objects.equals(this.showMaxPayout, printProfileSettings.showMaxPayout) &&
        Objects.equals(this.printMaxWinPerTip, printProfileSettings.printMaxWinPerTip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticketPromotionalText, ticketTopUrl, headerTicketText01, headerTicketText02, headerTicketText03, bottomTicketText01, bottomTicketText02, bottomTicketText03, legalText, printCompactTickets, showUnitName, ticketFormat, checkTicketMode, showMaxPayout, printMaxWinPerTip);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrintProfileSettings {\n");
    
    sb.append("    ticketPromotionalText: ").append(toIndentedString(ticketPromotionalText)).append("\n");
    sb.append("    ticketTopUrl: ").append(toIndentedString(ticketTopUrl)).append("\n");
    sb.append("    headerTicketText01: ").append(toIndentedString(headerTicketText01)).append("\n");
    sb.append("    headerTicketText02: ").append(toIndentedString(headerTicketText02)).append("\n");
    sb.append("    headerTicketText03: ").append(toIndentedString(headerTicketText03)).append("\n");
    sb.append("    bottomTicketText01: ").append(toIndentedString(bottomTicketText01)).append("\n");
    sb.append("    bottomTicketText02: ").append(toIndentedString(bottomTicketText02)).append("\n");
    sb.append("    bottomTicketText03: ").append(toIndentedString(bottomTicketText03)).append("\n");
    sb.append("    legalText: ").append(toIndentedString(legalText)).append("\n");
    sb.append("    printCompactTickets: ").append(toIndentedString(printCompactTickets)).append("\n");
    sb.append("    showUnitName: ").append(toIndentedString(showUnitName)).append("\n");
    sb.append("    ticketFormat: ").append(toIndentedString(ticketFormat)).append("\n");
    sb.append("    checkTicketMode: ").append(toIndentedString(checkTicketMode)).append("\n");
    sb.append("    showMaxPayout: ").append(toIndentedString(showMaxPayout)).append("\n");
    sb.append("    printMaxWinPerTip: ").append(toIndentedString(printMaxWinPerTip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

