/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.panda.sport.rcs.virtual.third.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.panda.sport.rcs.virtual.third.client.model.Event;
import com.panda.sport.rcs.virtual.third.client.model.EventBlockData;
import com.panda.sport.rcs.virtual.third.client.model.EventBlockLiveStats;
import com.panda.sport.rcs.virtual.third.client.model.EventBlockStats;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Object with information about the events, details and results. 
 */
@ApiModel(description = "Object with information about the events, details and results. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T13:53:10.996Z")



public class EventBlock {
  /**
   * EventBlock types of all system * SIMPLE * MULTI  
   */
  @JsonAdapter(BlockTypeEnum.Adapter.class)
  public enum BlockTypeEnum {
    SIMPLE("SIMPLE"),
    
    MULTI("MULTI");

    private String value;

    BlockTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockTypeEnum fromValue(String text) {
      for (BlockTypeEnum b : BlockTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BlockTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BlockTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("blockType")
  private BlockTypeEnum blockType = null;

  /**
   * Content types of all system - PLAYLIST - CHANNEL 
   */
  @JsonAdapter(ContentBlockTypeEnum.Adapter.class)
  public enum ContentBlockTypeEnum {
    PLAYLIST("PLAYLIST"),
    
    CHANNEL("CHANNEL");

    private String value;

    ContentBlockTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentBlockTypeEnum fromValue(String text) {
      for (ContentBlockTypeEnum b : ContentBlockTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContentBlockTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentBlockTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentBlockTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentBlockTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("contentBlockType")
  private ContentBlockTypeEnum contentBlockType = null;

  /**
   * Server Status on a event life cycle. Currentlly, is all event are cancelled, EventBlock is cancelled:   - OPEN   - SCHEDULED   - LOCKED   - CANCELLED   - RESOLVED   - ERROR 
   */
  @JsonAdapter(ServerStatusEnum.Adapter.class)
  public enum ServerStatusEnum {
    OPEN("OPEN"),
    
    SCHEDULED("SCHEDULED"),
    
    LOCKED("LOCKED"),
    
    CANCELLED("CANCELLED"),
    
    RESOLVED("RESOLVED"),
    
    ERROR("ERROR");

    private String value;

    ServerStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerStatusEnum fromValue(String text) {
      for (ServerStatusEnum b : ServerStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServerStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServerStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("serverStatus")
  private ServerStatusEnum serverStatus = null;

  @SerializedName("eBlockId")
  private Long eBlockId = null;

  @SerializedName("channelId")
  private Integer channelId = null;

  @SerializedName("playlistId")
  private Integer playlistId = null;

  @SerializedName("displayOption")
  private String displayOption = null;

  @SerializedName("events")
  private List<Event> events = null;

  @SerializedName("eventTime")
  private OffsetDateTime eventTime = null;

  @SerializedName("expireTime")
  private OffsetDateTime expireTime = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("data")
  private EventBlockData data = null;

  @SerializedName("extData")
  private Object extData = null;

  @SerializedName("stats")
  private EventBlockStats stats = null;

  @SerializedName("liveStats")
  private EventBlockLiveStats liveStats = null;

  public EventBlock blockType(BlockTypeEnum blockType) {
    this.blockType = blockType;
    return this;
  }

   /**
   * EventBlock types of all system * SIMPLE * MULTI  
   * @return blockType
  **/
  @ApiModelProperty(required = true, value = "EventBlock types of all system * SIMPLE * MULTI  ")
  public BlockTypeEnum getBlockType() {
    return blockType;
  }

  public void setBlockType(BlockTypeEnum blockType) {
    this.blockType = blockType;
  }

  public EventBlock contentBlockType(ContentBlockTypeEnum contentBlockType) {
    this.contentBlockType = contentBlockType;
    return this;
  }

   /**
   * Content types of all system - PLAYLIST - CHANNEL 
   * @return contentBlockType
  **/
  @ApiModelProperty(value = "Content types of all system - PLAYLIST - CHANNEL ")
  public ContentBlockTypeEnum getContentBlockType() {
    return contentBlockType;
  }

  public void setContentBlockType(ContentBlockTypeEnum contentBlockType) {
    this.contentBlockType = contentBlockType;
  }

  public EventBlock serverStatus(ServerStatusEnum serverStatus) {
    this.serverStatus = serverStatus;
    return this;
  }

   /**
   * Server Status on a event life cycle. Currentlly, is all event are cancelled, EventBlock is cancelled:   - OPEN   - SCHEDULED   - LOCKED   - CANCELLED   - RESOLVED   - ERROR 
   * @return serverStatus
  **/
  @ApiModelProperty(value = "Server Status on a event life cycle. Currentlly, is all event are cancelled, EventBlock is cancelled:   - OPEN   - SCHEDULED   - LOCKED   - CANCELLED   - RESOLVED   - ERROR ")
  public ServerStatusEnum getServerStatus() {
    return serverStatus;
  }

  public void setServerStatus(ServerStatusEnum serverStatus) {
    this.serverStatus = serverStatus;
  }

  public EventBlock eBlockId(Long eBlockId) {
    this.eBlockId = eBlockId;
    return this;
  }

   /**
   * Get eBlockId
   * @return eBlockId
  **/
  @ApiModelProperty(value = "")
  public Long getEBlockId() {
    return eBlockId;
  }

  public void setEBlockId(Long eBlockId) {
    this.eBlockId = eBlockId;
  }

  public EventBlock channelId(Integer channelId) {
    this.channelId = channelId;
    return this;
  }

   /**
   * Get channelId
   * @return channelId
  **/
  @ApiModelProperty(value = "")
  public Integer getChannelId() {
    return channelId;
  }

  public void setChannelId(Integer channelId) {
    this.channelId = channelId;
  }

  public EventBlock playlistId(Integer playlistId) {
    this.playlistId = playlistId;
    return this;
  }

   /**
   * Get playlistId
   * @return playlistId
  **/
  @ApiModelProperty(value = "")
  public Integer getPlaylistId() {
    return playlistId;
  }

  public void setPlaylistId(Integer playlistId) {
    this.playlistId = playlistId;
  }

  public EventBlock displayOption(String displayOption) {
    this.displayOption = displayOption;
    return this;
  }

   /**
   * Option to display block. Parse info. 
   * @return displayOption
  **/
  @ApiModelProperty(value = "Option to display block. Parse info. ")
  public String getDisplayOption() {
    return displayOption;
  }

  public void setDisplayOption(String displayOption) {
    this.displayOption = displayOption;
  }

  public EventBlock events(List<Event> events) {
    this.events = events;
    return this;
  }

  public EventBlock addEventsItem(Event eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<Event>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @ApiModelProperty(value = "")
  public List<Event> getEvents() {
    return events;
  }

  public void setEvents(List<Event> events) {
    this.events = events;
  }

  public EventBlock eventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    return this;
  }

   /**
   * Get eventTime
   * @return eventTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  public void setEventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
  }

  public EventBlock expireTime(OffsetDateTime expireTime) {
    this.expireTime = expireTime;
    return this;
  }

   /**
   * Used for live events. Expire time for current time EBlock. If empty, LiveStats, are final.         
   * @return expireTime
  **/
  @ApiModelProperty(value = "Used for live events. Expire time for current time EBlock. If empty, LiveStats, are final.         ")
  public OffsetDateTime getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(OffsetDateTime expireTime) {
    this.expireTime = expireTime;
  }

  public EventBlock duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Total duration for this block. This time corresponds to the time from the beginning of the block of events until it ends (Start player). In channel, this value can be ddifferent for any block. In playlist, this value is same that countdown. The popouse that of this field is for controll the duration of event in any instant. 
   * @return duration
  **/
  @ApiModelProperty(value = "Total duration for this block. This time corresponds to the time from the beginning of the block of events until it ends (Start player). In channel, this value can be ddifferent for any block. In playlist, this value is same that countdown. The popouse that of this field is for controll the duration of event in any instant. ")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public EventBlock data(EventBlockData data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @ApiModelProperty(value = "")
  public EventBlockData getData() {
    return data;
  }

  public void setData(EventBlockData data) {
    this.data = data;
  }

  public EventBlock extData(Object extData) {
    this.extData = extData;
    return this;
  }

   /**
   * Third party entities data.         
   * @return extData
  **/
  @ApiModelProperty(value = "Third party entities data.         ")
  public Object getExtData() {
    return extData;
  }

  public void setExtData(Object extData) {
    this.extData = extData;
  }

  public EventBlock stats(EventBlockStats stats) {
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @ApiModelProperty(value = "")
  public EventBlockStats getStats() {
    return stats;
  }

  public void setStats(EventBlockStats stats) {
    this.stats = stats;
  }

  public EventBlock liveStats(EventBlockLiveStats liveStats) {
    this.liveStats = liveStats;
    return this;
  }

   /**
   * Get liveStats
   * @return liveStats
  **/
  @ApiModelProperty(value = "")
  public EventBlockLiveStats getLiveStats() {
    return liveStats;
  }

  public void setLiveStats(EventBlockLiveStats liveStats) {
    this.liveStats = liveStats;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventBlock eventBlock = (EventBlock) o;
    return Objects.equals(this.blockType, eventBlock.blockType) &&
        Objects.equals(this.contentBlockType, eventBlock.contentBlockType) &&
        Objects.equals(this.serverStatus, eventBlock.serverStatus) &&
        Objects.equals(this.eBlockId, eventBlock.eBlockId) &&
        Objects.equals(this.channelId, eventBlock.channelId) &&
        Objects.equals(this.playlistId, eventBlock.playlistId) &&
        Objects.equals(this.displayOption, eventBlock.displayOption) &&
        Objects.equals(this.events, eventBlock.events) &&
        Objects.equals(this.eventTime, eventBlock.eventTime) &&
        Objects.equals(this.expireTime, eventBlock.expireTime) &&
        Objects.equals(this.duration, eventBlock.duration) &&
        Objects.equals(this.data, eventBlock.data) &&
        Objects.equals(this.extData, eventBlock.extData) &&
        Objects.equals(this.stats, eventBlock.stats) &&
        Objects.equals(this.liveStats, eventBlock.liveStats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockType, contentBlockType, serverStatus, eBlockId, channelId, playlistId, displayOption, events, eventTime, expireTime, duration, data, extData, stats, liveStats);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventBlock {\n");
    
    sb.append("    blockType: ").append(toIndentedString(blockType)).append("\n");
    sb.append("    contentBlockType: ").append(toIndentedString(contentBlockType)).append("\n");
    sb.append("    serverStatus: ").append(toIndentedString(serverStatus)).append("\n");
    sb.append("    eBlockId: ").append(toIndentedString(eBlockId)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    playlistId: ").append(toIndentedString(playlistId)).append("\n");
    sb.append("    displayOption: ").append(toIndentedString(displayOption)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    extData: ").append(toIndentedString(extData)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    liveStats: ").append(toIndentedString(liveStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

