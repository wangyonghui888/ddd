/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.test.api;

import com.panda.sport.rcs.virtual.third.client.model.EventBlock;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;

import java.util.List;

/**
 * API tests for EventBlockApi
 */
//@Ignore
public class EventBlockApiTest {

    private final com.panda.sport.rcs.virtual.third.client.api.EventBlockApi api = new com.panda.sport.rcs.virtual.third.client.api.EventBlockApi();

    
    /**
     * 
     *
     * Cancel an event data with one or more events. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEventTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Long eventId = null;
        Long eBlockId = null;
        Integer playlistId = null;
        String extId = null;
        Long response = api.cancelEvent(eventId, eBlockId, playlistId, extId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel an eventBlock data with one or more events. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEventBlockTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Long eBlockId = null;
        Integer playlistId = null;
        String extId = null;
        Long response = api.cancelEventBlock(eBlockId, playlistId, extId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Close the market of an eventBlock data with one or more events. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void closeMarketTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Long eBlockId = null;
        Integer playlistId = null;
        OffsetDateTime closeMarketTime = null;
        String extId = null;
        Long response = api.closeMarket(eBlockId, playlistId, closeMarketTime, extId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Given an specific event Id This can return all data /stats/result of event id. If the eventId is a part of a multievent Eventblock, the eventblock that we return will containt all the event included in the matchday. One of parameters (eblockId or eventId) are required. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void eventBlockByIdTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        ApiTest.setApiDomain();

        Integer playlistId = 14106;
        Long eblockId = 38570L; //这个数字可以增大 测试拿数据
        Long eventId = null;
        Integer calculationId = 1408;//1408;
        try {
            com.panda.sport.rcs.virtual.third.client.model.EventBlock response = api.eventBlockById(playlistId, eblockId, eventId, calculationId);
            System.out.println(response);
        }catch (com.panda.sport.rcs.virtual.third.client.ApiException api){
            System.err.println(api.getCode());
            System.err.println(api.getResponseBody());
        }
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Given an specific display Content ( Channel - Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of current event, in case this is already available. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void eventBlockDataTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        ApiTest.setApiDomain();

        String contentType = "PLAYLIST";
        Integer contentId = 14002;
        OffsetDateTime eventTime = OffsetDateTime.now();
        Integer calculationId = 1;
        Integer entityId = null;
        List<EventBlock> response = api.eventBlockData(contentType, contentId, eventTime, calculationId, entityId);
        System.err.println(response);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Given an specific display Content ( Playlist)  Iterate for next event data after given absolute timestamp. This can return all data /stats/result of      current event, in case this is already available.  Return empty array ([]) if no event found.    - eventTime   - Event.data.participants   - Event.eventId   - Event.result.wonMarkets   - Event.extData 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void eventBlockFindTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        OffsetDateTime startTime = null;
        Integer playlistId = null;
        OffsetDateTime endTime = null;
        Integer entityId = null;
        List<String> status = null;
        Integer calculationId = null;
        Integer countDown = null;
        Integer offset = null;
        Integer n = null;
        String order = null;
        Boolean advancedInfo = null;
        List<EventBlock> response = api.eventBlockFind(startTime, playlistId, endTime, entityId, status, calculationId, countDown, offset, n, order, advancedInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a list with the eventBlocks that has had modifications Return empty array ([]) if not events found. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void eventBlockFindUpdatedTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        OffsetDateTime startTime = null;
        Integer playlistId = null;
        OffsetDateTime endTime = null;
        Integer n = null;
        List<EventBlock> response = api.eventBlockFindUpdated(startTime, playlistId, endTime, n);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Given an specific display Content ( Channel - Playlist) Return event result at given absolute startTime.  
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void eventBlockResultTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        ApiTest.setApiDomain();

        String contentType = "PLAYLIST";
        Integer contentId = 14100;
        OffsetDateTime eventTime =  OffsetDateTime.now();
        Integer calculationId = 11;
        Long eBlockId = null;
        Integer entityId = null;
        List<EventBlock> response = api.eventBlockResult(contentType, contentId, eventTime, calculationId, eBlockId, entityId);
        System.err.println(response);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creation an eventBlock data with one or more events with similar start time 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void publishEventDataTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        com.panda.sport.rcs.virtual.third.client.model.EBData eventBlockData = null;
        Long response = api.publishEventData(eventBlockData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creation an eventBlock result with one or more events. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void publishEventResultTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        com.panda.sport.rcs.virtual.third.client.model.EBResult eventBlockResult = null;
        Long response = api.publishEventResult(eventBlockResult);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creation the live stats of the eventBlock data with one or more events. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void publishLiveStatsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        com.panda.sport.rcs.virtual.third.client.model.EBLiveStats eventBlockLiveStats = null;
        Long response = api.publishLiveStats(eventBlockLiveStats);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creation the stats of an eventBlock data with one or more events. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void publishStatsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        com.panda.sport.rcs.virtual.third.client.model.EBStats eventBlockStats = null;
        Long response = api.publishStats(eventBlockStats);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update an eventBlock result with one or more events.  This update must contains only modification in properties that do no modify the ticket resolution. Is an update of additional information. NEVER will modify the main data to solve the event. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventResultTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        com.panda.sport.rcs.virtual.third.client.model.EBResult eventBlockResult = null;
        Long response = api.updateEventResult(eventBlockResult);

        // TODO: test validations
    }
    
}
