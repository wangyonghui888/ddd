/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server 
 *
 * OpenAPI spec version: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.test.api;

import com.panda.sport.rcs.virtual.third.client.model.EntityCredential;
import org.junit.Ignore;
import org.junit.Test;
import org.threeten.bp.OffsetDateTime;

import java.util.List;

/**
 * API tests for CredentialApi
 */
@Ignore
public class CredentialApiTest {

    private final com.panda.sport.rcs.virtual.third.client.api.CredentialApi api = new com.panda.sport.rcs.virtual.third.client.api.CredentialApi();

    
    /**
     * 
     *
     * Assign an Api credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialCreateApiTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer entityId = null;
        String domain = null;
        String apiId = null;
        String apiHash = null;
        String visibilityLevel = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialCreateApi(entityId, domain, apiId, apiHash, visibilityLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Assign role credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialCreateGuidTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer entityId = null;
        String role = null;
        String guid = null;
        String visibilityLevel = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialCreateGuid(entityId, role, guid, visibilityLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Assign an OAuth credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialCreateOAuthTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer entityId = null;
        String role = null;
        String provider = null;
        String account = null;
        String visibilityLevel = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialCreateOAuth(entityId, role, provider, account, visibilityLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Assign an UserPassword credentials to a given entitiy with an specific role.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialCreateUserPasswordTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer entityId = null;
        String role = null;
        String domain = null;
        String username = null;
        String password = null;
        String visibilityLevel = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialCreateUserPassword(entityId, role, domain, username, password, visibilityLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Credentials by User Id 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialFindTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        String credentialKey = null;
        Integer entityId = null;
        String role = null;
        String credentialType = null;
        List<EntityCredential> response = api.credentialFind(credentialKey, entityId, role, credentialType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove the Credential for the entity id and role received as parameter. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialRemoveTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        String credentialKey = null;
        String credentialType = null;
        String role = null;
        api.credentialRemove(credentialKey, credentialType, role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Edit a credential with information that we receive 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialSetAPIHashSettingsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        String credentialKey = null;
        String apiHash = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialSetAPIHashSettings(credentialKey, apiHash);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Edit status, valid until date, trusted and banned ips of the credential.  In order to establish the permissions to read/write certain entities, the Visibility level for this credential can have one of the following values: LEVEL_0   Read permission:  Itself and own descendants.   Write permission: Itself and own descendants. LEVEL_1   Read permission:  Parent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. LEVEL_2   Read permission:  Grandparent and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. CLIENT   Root entity: First ancestor that is marked as Client   Read permission:  Root entity and any of its descendants.   Write permission: Brothers, brother descendants and own descendants. 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialSetSettingsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        String credentialKey = null;
        String credentialType = null;
        String role = null;
        String status = null;
        OffsetDateTime validUntil = null;
        String trustedIps = null;
        String bannedIps = null;
        String visibilityLevel = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialSetSettings(credentialKey, credentialType, role, status, validUntil, trustedIps, bannedIps, visibilityLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Edit a credential with information that we receive 
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException
     *          if the Api call fails
     */
    @Test
    public void credentialSetUserPasswordSettingsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        String credentialKey = null;
        String role = null;
        String password = null;
        com.panda.sport.rcs.virtual.third.client.model.EntityCredential response = api.credentialSetUserPasswordSettings(credentialKey, role, password);

        // TODO: test validations
    }
    
}
