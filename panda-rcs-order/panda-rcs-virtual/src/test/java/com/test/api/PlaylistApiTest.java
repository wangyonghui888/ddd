/*
 * GoldenRace External API
 * Definitions of External API for GoldenRace Java Server
 *
 * OpenAPI spec version: 7.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.test.api;

import com.panda.sport.rcs.virtual.third.client.model.*;
import org.junit.Ignore;
import org.junit.Test;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * API tests for PlaylistApi
 */
@Ignore
public class PlaylistApiTest {

    private final com.panda.sport.rcs.virtual.third.client.api.PlaylistApi api = new com.panda.sport.rcs.virtual.third.client.api.PlaylistApi();


    /**
     * Create a new playlist
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException if the Api call fails
     */
    @Test
    public void playlistCreateTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer playlistId = null;
        String shortName = null;
        String description = null;
        String gametype = null;
        com.panda.sport.rcs.virtual.third.client.model.PlaylistInfo playlistInfo = null;
        Integer parentId = null;
        com.panda.sport.rcs.virtual.third.client.model.Playlist response = api.playlistCreate(playlistId, shortName, description, gametype, playlistInfo, parentId);

        // TODO: test validations
    }

    /**
     * Find all playlist related with a certain gametype code and a playlist-mode
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException if the Api call fails
     */
    @Test
    public void playlistFindAllTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        ApiTest.setApiDomain();

//        List<Market> list = new ArrayList<>(300);
        Set<String> set = new HashSet<>();
        String gameType = "Dog";
        String mode = "SCHEDULED";
        List<com.panda.sport.rcs.virtual.third.client.model.Playlist> response = api.playlistFindAll(gameType, mode);
        response.forEach(res -> {
            res.getParticipantTemplates().forEach(object->{
                com.panda.sport.rcs.virtual.third.client.model.FootballParticipant participant = (com.panda.sport.rcs.virtual.third.client.model.FootballParticipant)object;
                set.add(participant.getId());
            });
//            res.getMarketTemplates().forEach(obj -> {

//                if (!list.contains(obj)) {
//                    list.add(obj);
//                } else {
//                    for (Market market : list) {
//                        if (!market.equals(obj)) {
//                            continue;
//                        }
//                        if(market.getOdds().size() != obj.getOdds().size()){
//
//                        }else {
//                            for (Odd odd : market.getOdds()) {
//                                boolean falg = false;
//                                for (Odd odds : obj.getOdds()) {
//                                    if (odd.getId().equals(odds.getId()) && odd.getName().equals(odds.getName())) {
//                                        falg = true;
//                                    }
//                                }
//                                if (falg) {
//                                    continue;
//                                } else {
//                                    System.err.println("========");
//                                }
//                            }
//                        }
//                        if(!market.getOdds().containsAll(obj.getOdds())){
//                            System.err.println("============");
//                        }
//                    }
//                }
//            });
//            if(res.getId().equals(11101)) System.err.println(res);
//            res.getMarketTemplates().stream().forEach(market -> {
//                MarketDto marketDto = new MarketDto();
//                List<OddDto> oddDtoList = new ArrayList<>();
//                marketDto.setId(market.getId());
//                marketDto.setName(market.getName());
//                marketDto.setOdds(oddDtoList);
//                market.getOdds().stream().forEach(odd -> {
//                    OddDto oddDto = new OddDto();
//                    oddDto.setId(odd.getId());
//                    oddDto.setName(odd.getName());
//                    oddDtoList.add(oddDto);
//                });
//                set.add(marketDto);
//            });
//            if(res.getId().equals(24001)){
//                res.getMarketTemplates().forEach(market -> {
//                    System.err.println(market.getId() + "\t" + market.getName());
//                    System.err.println("\toddsId:");
//                    market.getOdds().stream().forEach(o -> {
//                        System.err.println(o.getId());
//                    });
//                    System.err.println("\toddsName:");
//                    market.getOdds().stream().forEach(o -> {
//                        System.err.println(o.getName());
//                    });
//                    System.err.println();
//                });
//            }
        });
        System.err.println(set.size());
//        list.forEach(object -> {
//            System.err.println(object.getId() + "\t" + object.getName());
//            System.err.println("\t oddId:");
//            object.getOdds().forEach(oddDto -> {
//                System.err.println(oddDto.getId());
//            });
//            System.err.println("\t oddName:");
//            object.getOdds().forEach(oddDto -> {
//                System.err.println(oddDto.getName());
//            });
//            System.err.println();
//        });
        // TODO: test validations
    }

    /**
     * Find playlists by identifier
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException if the Api call fails
     */
    @Test
    public void playlistFindByIdsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        List<String> playlistIds = null;
        List<com.panda.sport.rcs.virtual.third.client.model.Playlist> response = api.playlistFindByIds(playlistIds);

        // TODO: test validations
    }

    /**
     * Set playlist properties
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException if the Api call fails
     */
    @Test
    public void playlistSetTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer playlistId = null;
        String description = null;
        String mode = null;
        com.panda.sport.rcs.virtual.third.client.model.Playlist response = api.playlistSet(playlistId, description, mode);

        // TODO: test validations
    }

    /**
     * Create a new playlist
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException if the Api call fails
     */
    @Test
    public void playlistSetAssetsTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer playlistId = null;
        com.panda.sport.rcs.virtual.third.client.model.Assets assets = null;
        com.panda.sport.rcs.virtual.third.client.model.Playlist response = api.playlistSetAssets(playlistId, assets);

        // TODO: test validations
    }

    /**
     * Create a new playlist
     *
     * @throws com.panda.sport.rcs.virtual.third.client.ApiException if the Api call fails
     */
    @Test
    public void playlistSetSchedulerConfigurationTest() throws com.panda.sport.rcs.virtual.third.client.ApiException {
        Integer playlistId = null;
        List<com.panda.sport.rcs.virtual.third.client.model.SchedulerConfiguration> schedulerConfigurations = null;
        List<Integer> allowedCountdown = null;
        List<Integer> allowedOffset = null;
        Integer scheduledWindow = null;
        com.panda.sport.rcs.virtual.third.client.model.Playlist response = api.playlistSetSchedulerConfiguration(playlistId, schedulerConfigurations, allowedCountdown, allowedOffset, scheduledWindow);

        // TODO: test validations
    }

}
